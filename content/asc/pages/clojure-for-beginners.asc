{:title "Clojure for beginners"
 :category ""
 :toc true
 :page-index 8
 :navbar? true
}

The key information, resources, community places, tools, and tricks you as a starting Clojure developer will find helpful.

(See the link:/clojure[Clojure page] for more and more general stuff.)

== How to become truly productive in Clojure

You can be very productive with Clojure, much more than e.g. in Java thanks to its interactive development, simplicity, and powerful tools such as macros. However there are some preconditions, as Eric Normand writes in https://purelyfunctional.tv/issues/purelyfunctional-tv-newsletter-266-beginner-experience/[PurelyFunctional.tv Newsletter 266]:

____
When you don’t have the stuff above (paren[these] management, integrated REPL, hot code reloading, and experience debugging the errors), the [development] cycle can be much slower than the descendants of punchcard languages.
____

NOTE: Check out my post link:/2022/trinity-of-clojure/[Clojure is in fact a trinity - of language, interactive development, and structural editing].

So to really experience the productivity and pleasure of Clojure(Script), you need:

. Learn and fully embrace https://clojure.org/guides/repl/introduction[REPL-driven development] (and debugging). Don’t underestimate this, it is a fundamental shift of how you develop. Most people struggle with this mind shift for a while.
. A tool to enable effective, productive (structural) editing of Clojure code, such as https://shaunlebron.github.io/parinfer/[Parinfer] (integrated in all popular Clojure editors)
. A good editor with an integrated REPL so that you can evaluate your code and interact with your running application in a frictionless way. Cursive (paid for commercial use) and Emacs (powerful but very steep and long learning curve) are the most popular, but there are also special ones for beginners such as https://sekao.net/nightcode/[Nightcode] and (simpler, web-based) https://sekao.net/lightmod/[Lightmod]. (Many editors have some Clojure support but the quality and depth and thus user experience vary a lot.)
. ClojureScript: hot code reloading (which http://shadow-cljs.org/[shadow-cljs] does perfectly (together with everything else you might need for frontend development)).
. Experience debugging errors - sadly you have to learn that though tools such as Ultra/Pretty (see below) and https://github.com/bhb/expound[Expound] for Spec do help. https://github.com/venantius/pyro[Pyro] also looks great.
. Not to hesitate to ask for help and advice at the Clojurians Slack community :-)
. https://livebook.manning.com/#!/book/the-joy-of-clojure-second-edition/chapter-1/[Understand Clojure philosophy] and the Clojure way to approach and solve problems. Don’t try to apply what you learned in OOP/…, that would hurt. Understand the core principles and their benefits and downsides.

== Learning Clojure

Learning Clojure is reportedly both easy and quick and a long-term process. New developers can start writing code within a few weeks but it might take months or years to master or Clojure core functions (you just keep stumbling on treasures in the core library) and to undo your OOP learning and start designing FP systems.

https://gist.github.com/ssrihari/0bf159afb781eef7cc552a1a0b17786f[*An opinionated list of excellent Clojure learning materials*] (added 2023/01) is an excellent list of organized, commented resources.

Tip: check out also https://github.com/matthewlisp/learn-clojure/blob/master/README.md#books[matthewlisp/learn-clojure] and Maarten Metz's https://www.mxmmz.nl/blog/clojure-learning-guide.html[Clojure(Script) Learning Guide] for useful books, videos, courses, websites and tools.

=== Getting started

The free online book https://www.braveclojure.com/[Clojure for the Brave and True] has been highly recommended to me for beginners. To get your hands dirty, go through the programming exercises at http://www.4clojure.com/[4clojure] and/or through the even more beginner (and non-programmer) friendly https://www.maria.cloud/intro[Maria: learn Clojure with Shapes].

Always keep the http://jafingerhut.github.io/cheatsheet/grimoire/cheatsheet-tiptip-cdocs-summary.html[Clojure Cheatsheet] close by and read through it (and the referenced resources) regularly. Make sure to study the https://clojure.org/guides/repl/introduction[Programming at the REPL] guide early on (and perhaps invest in Eric Normand’s video course https://purelyfunctional.tv/courses/repl-driven-development-in-clojure/[Repl-Driven Development in Clojure]; the first lesson is free, so check it out.)

I would also highly recommend reading the first chapter about https://livebook.manning.com/#!/book/the-joy-of-clojure-second-edition/chapter-1/[Clojure philosophy from Joy of Clojure].

Last but not least: remember that you don’t need to learn all at once. You will most likely never need https://clojure.org/reference/refs[STM] or https://clojure.org/reference/agents[agents] (https://clojure.org/reference/atoms[atoms] are perfect for perhaps 99% state management needs, use https://github.com/clojure/core.async[core.async] for non-trivial async needs) so feel free to skip those, at least for now. https://clojure.org/reference/datatypes[Datatypes and protocols] and https://clojure.org/reference/multimethods[multimethods] are something you will eventually need but you can likely get very far without them. Similarly, https://clojure.org/reference/macros[macros], https://clojure.org/reference/transients[transients], https://clojure.org/reference/transducers[transducers], https://clojure.org/reference/reducers[reducers], https://clojure.org/reference/compilation[compilation and class generation] can wait until you need them, certainly a few months.

The 14min video https://www.youtube.com/watch?v=7Ts9ny2JP4k[Clojure Syntax - The odd bits] introduces the weird symbols of Clojure, such as `?` and `!` in function names, `*` around a var name, `&` before an argument, `#(some-fn ...)` etc. It will make reading Clojure less confusing.

=== Leveling up

Ok, so you know the language and want to learn how to create systems and to deepen your understanding. Let's get started!

Tip: A gradual approach works best. Don't try to learn too much at once. Start with a simple, Clojure-only server, perhaps only using Ring and https://github.com/weavejester/hiccup[Hiccup] and nothing more. Then add a routing library, ... . Integrate with a database and/or an external API. Only when you are really comfortable with this, start with ClojureScript and its complexities. Personally I recommend using ClojureScript with https://shadow-cljs.org/[shadow-cljs] because it is an all-in-one tool (build, REPL, ...) focused on developer ergonomics, with a great documentation and active support. Start perhaps with a simple React wrapper such as https://reagent-project.github.io/[Reagent].

==== Books

* https://www.amazon.com/dp/1680500740/ref=cm_sw_r_cp_ep_dp_vEbkAbT77MYME[Clojure Applied: From Practice to Practitioner] by Ben Vandgrift, Alex Miller (2015) - even in 2019 this is the best and still highly relevant book about building systems in Clojure, tackling topics such as namespace organization, creating and connecting components, composing applications, handling configuration.
* https://leanpub.com/elementsofclojure[Elements of Clojure] by Zachary Tellman (2018) - "`It provides a framework for making better design choices, and a vocabulary for teams to discuss the software they collaborate on.`"
* https://www.amazon.com/dp/1680502468/ref=cm_sw_r_cp_ep_dp_GKzJAb11S07VA[Programming Clojure 3rd edition] by Alex Miller, Stuart Halloway, Aaron Bedra (2018) - a handy, comprehensive reference

See https://clojure.org/community/books[all Clojure books] at the Clojure site.

==== Reading code

A great way to learn is by studying code.

* https://github.com/seancorfield/usermanager-example[seancorfield/usermanager-example] - This is a simple web application using Component, Ring, Compojure, and Selmer connected to a local SQLite database. Intended as a demonstration for beginners.
* https://github.com/cljdoc/cljdoc[cljdoc] - the code for https://cljdoc.org[Cljdoc.org]. Beware that this is a little complex production application, with a database, batch jobs, and public APIs. Perhaps not the first thing to look at :)
* https://repo.clojars.org/seancorfield/next.jdbc[next.jdbc] - a Clojure wrapper for JDBC, created in 2019 to replace clojure/java.jdbc based on many years of experiences with maintaining and developing it, by a very skilled developer.
* https://github.com/quoll/asami[Asami] - I find the code of this graph database by Paula very well written an documented. Some parts of it are focused on top performance instead of readability but nonetheless it is a good place to learn.

==== Fixing bugs in open source

* https://github.com/cljdoc/cljdoc/labels/Good%20First%20Issue[cljdoc: Good First Issues]

== Resources for beginners

Official sources

* https://clojure.org/[Clojure.org] and its https://clojure.org/reference/reader[References] and https://clojure.org/guides/getting_started[Guides].
** Especially the https://clojure.org/guides/repl/introduction[Programming at the REPL] guide is essential
* https://clojurescript.org/[ClojureScript.org] and its https://clojurescript.org/reference/documentation[References] and https://clojurescript.org/guides/quick-start[Guides].

Help & learning

* http://jafingerhut.github.io/cheatsheet/grimoire/cheatsheet-tiptip-cdocs-summary.html[Clojure Cheatsheet] and http://cljs.info/cheatsheet/[ClojureScript Cheatsheet]
* https://clojuredocs.org/[ClojureDocs] - the language function documentation with examples
* https://cljdoc.org/[cljdoc] - documentation and API docs of Clojure libraries
* https://clojure-doc.github.io/[Community-driven documentation site for the Clojure programming language] - https://clojure-doc.github.io/articles/content/#essentials[Tutorials aimed at new users], guides, and more
* https://4clojure.oxal.org/[4clojure] - learn Clojure by solving small task and comparing your solution with others (you may also like http://www.clojurekoans.com/[Clojure koans])
* https://www.maria.cloud/intro[Maria: learn Clojure with Shapes] - a cool, beginner-friendly ClojureScript notebook-style editor with a built-in introduction to Clojure(Script) using graphical programming

Community, advice, fora

* http://clojurians.net/[Clojurians] - the official Slack organization with channels for Clojure, ClojureScript, and most popular libraries and topics. Leading developers and authors often answer questions.
* link:++https://groups.google.com/forum/#!forum/clojure++[Clojure] and link:++https://groups.google.com/forum/#!forum/clojurescript++[ClojureScript Google Groups] - for advice, announcements, keeping informed
* https://clojureverse.org/[Clojureverse] - friendly discussion fora
* Newsletters to keep updated about the latest development, useful libraries, etc.
** https://therepl.net/[The REPL] by Daniel Compton (https://us7.campaign-archive.com/home/?u=fef380870c4a5633a21f55d8e&id=b5272e542b[older issues])
** https://purelyfunctional.tv/newsletter/[PurelyFunctional.tv Newsletter] by Eric Normand (https://purelyfunctional.tv/newsletter-archives/[older issues])
* Podcasts
** http://blog.cognitect.com/cognicast/[Cognicast] by Cognitect, the company behind Clojure - interviews with interesting people
** https://defn.audio/[defn] - "`A loud, irreverent podcast discussing the delights of Clojure, ClojureScript with leaders and folks of the Community`"

== Beginner-friendly tools and starting packages

* Beginner-friendly, all-in-one. getting-started IDEs: https://sekao.net/nightcode/[Nightcode] and (simpler, web-based) https://sekao.net/lightmod/[Lightmod]
* Professional dev environments: The most popular tools for developing in Clojure(Script) are https://docs.cider.mx[Emacs with Cider] and https://cursive-ide.com/[IntelliJ with Cursive]. But people also use https://marketplace.visualstudio.com/items?itemName=cospaia.clojure4vscode[VS Code with Calva] (and https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer[Bracket Pair Colorizer]) and https://atom.io/[Atom] with https://atom.io/packages/chlorine[Chlorine].
* Web dev: http://www.luminusweb.net/[Luminus] is the recommended web "`framework,`" i.e. a curated and integrated set of libraries for web (backend and frontend) development in Clojure(Script) (developer tools, logging, security etc). So that you don’t need to assemble your own.
* Editing code
** https://shaunlebron.github.io/parinfer/[Parinfer] - provides for efficient and simple structural editing of Clojure/Lisp code using just Tab (compared to the older Paredit with its numerous key-bindings). A must-have for efficient and productive experience with any Lisp.
* Building and running code
** https://github.com/venantius/ultra[Ultra] - a Leiningen (the primary Clojure build tool) plugin for an absolutely kick-ass development environment (i.e. REPL) - better stack-traces (via https://github.com/AvisoNovate/pretty[Pretty]), human-friendly test output, colors, syntax-highlighting.
