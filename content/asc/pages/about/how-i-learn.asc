{:title "How I Learn", :category "", :toc true
}


(draft)

Couple of people asked me how I keep up to date and learn so here is a brief description.

*Challenging Job* I have (and had) a job where I can work on quite different projects and do lot of different stuff. I like learning new things and being challenged by them so it’s important to have a job that provides these challenges. Most of things that I learn are directly or indirectly related to my daily work. (Though I usually go an extra mile or two thnecessary to just do the task when learning them.)

*Reading* I read a lot. I guestimate that I spend 30-60 hours a month learning, most of that reading, mainly articles and blog posts (the top few of them get to my monthly link:/category/top-links-of-month/[top list]). Most of that comes to me via https://twitter.com/#!/jakubholynet[my Twitter feed], predominantly from https://twitter.com/#!/dzone[DZone] that does a good job of supplying popular and often relevant articles, and partly from specialized sources such as Planet Clojure and then from renown experts including Martin https://twitter.com/#!/martinfowler[Fowler], Kent https://twitter.com/#!/KentBeck[Beck], Adam https://twitter.com/#!/AdamBien[Bien], Gojko https://twitter.com/#!/gojkoadzic[Adzic]. I also link:/wiki/development/books/[read  books], preferably general ones such as _http://amzn.com/0321437381[Implementing Lean…]_, _http://amzn.com/0132350882[Clean Code]_, and even http://joyofclojure.com/the-book/[Joy of Clojur]e (though language-specific, it introduces the reader into functional thinking and the design and philosophy behind the language rather than just the syntax and tricks)

*Doing Different Stuff* I prefer to do very different stuff because that is how you learn most. That’s why I’ve decided f.ex. to learn Clojure as opposed to Ruby or Scala: it’s much more functional (yet practical, living on the JVM), http://www.slideshare.net/malyvelky/why-functiona-programming-and-clojure-lightningtalk[it’s mind bending] (slide 8), and it’s a Lisp, i.e. http://www.paulgraham.com/avg.html[the-most-powerful-language-ever].

*Programming* Finally I have some hobby projects that I use to do different stuff+++<sup>+++TM+++</sup>+++ than in my daily job such as experimenting with Groovy unit tests or to practice pair-programming with friends.

*Conferences & Similar* Good conferences provide inspiration and knowledge though not all are so good. http://www.meetup.com/find/?keywords=programming&mcId=&mcName=&lat=&lon=&userFreeform=oslo&gcResults=Oslo%2C+Norge%3ANO%3AOslo%3Anull%3AOslo%3Anull%3Anull%3A59.9138688%3A10.7522454&op=search&resetgeo=true&events=&allGroups=true[Meetup groups] such as Oslo Socially Functional, Coding Dojo, XP, Lean are good sources of both inspiration and fun.

== What About Time?

Yes, that’s a problem, especially given that I need time for my family and yoga. Sorry, I’ve no magic answer here.

== My Top Tools

* Mobile app for Twitter
* http://getpocket.com/[Pocket] mobile app for saving articles I haven’t time to read now
* Email and the https://play.google.com/store/apps/details?id=com.dngames.autoshare&hl=en[AutoShare] app to send stuff to process later to myself

== Your Tips?

Please use comments to share your tips for learning and keeping up-to-date with our rapidly moving profession!

== Where Am I, Where to Go?

Useful resources:

* http://sijinjoseph.com/programmer-competency-matrix/[Programmer Competency Matrix] – a nice overview of a programmer needs to know in different areas (computer science: data structures etc., SW engineering: SCM etc., programming: defensive coding, IDE etc.) + what experience and knowledge they need, split into 4 levels. Where are you?
* http://en.wikipedia.org/wiki/Dreyfus_model_of_skill_acquisition#The_original_five-stage_model[Dreyfus model of skill acquisition] - where are you in each of the key skills and what do you thus need to do to grow? (novice - quick wins, advanced beginner - breakable toys, i.e. safe environment to explore the limits of the rules by breaking them and learning from failure, practitioner (competence) - follows rules, needs goal-based tasks instead of micromanagement, proficient - develops intuition but checks it against the rules, learns from case studies and anecdotical knowledge, expert - transcends the rules, acts based on intuition, unable to truly explain her decisions (but well capable of rationalizing them)). You will typically be on different levels in your different skills - development, team member, communicator, solution engineering, methodology - and it pays of to know where you are and thus what are your limits, needs, abilities.
