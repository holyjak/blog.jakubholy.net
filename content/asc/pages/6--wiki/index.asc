{:title "Wiki", :layout :page, :category "", :toc true}


Persistent computer-related notes that are still under development.

== Most important/active pages

* link:/wiki/development/performance-testing-for-webapps-notes/[Performance & Performance Testing for Webapps]
* link:/wiki/development/ops-monitoring/[Ops: Monitoring]
* link:/wiki/development/clojure/[Clojure] - links to libs, resources etc.

== Index of pages

* link:/wiki/development/[Development]
** link:/wiki/development/architecture/[Architecture]
** link:/wiki/development/books/[Development Books] - the most influential books about software development I’ve read
** link:/wiki/development/learning-programming/[Learning Programming] - resources
** link:/wiki/development/testing/[Unit Testing Toolbox] (for Java) - collection of links to libraries, tools, concepts
** link:/wiki/development/performance-testing-for-webapps-notes/[Performance & Performance Testing for Webapps]
** link:/wiki/development/ops-monitoring/[Ops: Monitoring]
** link:/wiki/development/clojure/[Clojure] - links to libs, resources etc.
** link:/wiki/development/cloud/[Cloud]
** link:/wiki/development/code-conventions-java/[Code Conventions (Java)]
** link:/wiki/development/frontend/[Frontend]
** link:/wiki/development/practicies/[Practices]
*** link:/wiki/development/practicies/continuous-delivery/[Continuous Delivery]
** link:/wiki/development/compiled-must-watchread-resources/[Compiled "`Must Watch/Read`" Resources] - JS, functional JS, …
* link:/wiki/better-work/[Better Work] - creating more effective organizations with happier people and customers
* link:/wiki/tools/[Tools & OS]
** link:/wiki/tools/ubuntuatthinkpad/[Ubuntu@ThinkPad] - My experiences from running Ubuntu on Lenovo ThinkPad
** link:/wiki/tools/eclipse/[Eclipse] notes and tricks
** link:/wiki/tools/emacs/[Emacs/Aquamacs] mini-reference
** link:/wiki/tools/vagrant-notes/[Vagrant notes] and troubleshooting

=== Development Wiki

* link:/wiki/development/economics-of-coding/[Economics of Coding]
* link:/wiki/development/risk-based-testing/[Risk-Based Testing]
* link:/wiki/development/parallel-design-parallel-change/[Parallel Design (Parallel Change)]

== Tiny notes

=== Linux

==== Lock user account

Disable: usermod –expiredate 1 <login>

Re-enable: usermod –expiredate 2099-01-01 <login>

=== Tools

See the tools page for Git, Vim etc. notes

=== Java Development

==== What is "`enterprise`"?

Common enterprise problems: database access, remote procedure invocation, transactions, authentication, directory services, auditing, integration of multiple services, authorization (roles, groups of roles, …), LDAP, etc.

==== Source code & JavaDoc search sites

* http://grepcode.com/[GrepCode.com]
* http://www.jarvana.com/jarvana/[jarvana.com]

=== Clojure & Ecosystem

Datomic

* Not for write-heavy apps, i.e. apps with >= 1MB/s sustained write throughput (even 1TB/year is perhaps not a best fit) - Essentially serializable writes (shardable via multiple transactors)
* Note: Performance of the back-end storage doesn’t matter so much - hot data cached on peers, most of the rest can be hold by a memcached cluster in front of the storage
* A top for Datomic with a single transactor is perhaps around billion rows??
* Great at answering question about past, what-if, audit trail
* Good performance at joins for all in local (peer) memory, multiple pears can hold in memory quite different "`hot data`" for diff. use cases x monholitic DB
* Classical RDBMs and languages based on constraints from 70s that no more true (expensive memory and storage, dedicated machines) - Datomic explores what we would design if we broke those constraints
* Flexible: contrary to doc stores, here "`documents`" are assembled at query time => no need to decide ahead of time; schema can evolve much more freely
* Programmable: everything is data (commands, queries, tx info) => easy to generate, combine, use
* Consistency etc. - can use server-side functions to do multi-updates etc.
