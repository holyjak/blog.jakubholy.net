{:title "My year 2019 in review"
 :category "General"
 :date "2019-12-31"
}

This has been a year of Clojure (and DevOps). Since the beginning of the year, I have worked to persuade my team to adopt Clojure instead of (or rather in addition to) to the current mixture of Java and Groovy, argued to rewrite a key batch job in Clojure (thank you, Monica, for providing the business case!), and did all I could to spread Clojure knowledge and skill in the team and surroundings. It has been a success - the job has been rewritten, we have link:/how-clojure-helped-recovering-from-bad-data/[already benefited from it], and we are finishing a new, Clojure-based micro-service. I have learned a lot about link:/tags/clojure-vs-java/[Java vs. Clojure], about the value of link:/defeating-legacy-code-with-living-documentation-and-business-level-tests/[business-level tests and "living documentation"], about leveraging link:/generative-testing-lessons-learned/[Spec and property-based testing], about link:/2019/core-async-error-handling/[core.async (and error handling)]. On the DevOps front, I have grown to link:/2018/03/14/pains-with-terraform-perhaps-use-sceptre-next-time/[really dislike Terraform] (wishing repeatedly to have a proper programming language instead of the frustrating Terraform DSL and the hacks it requires, not mentioning the nightmare of upgrading providers and Tf itself; ü§ûfor CDK/link:https://github.com/StediInc/cdk-clj[cdk-clj]), have spent more time then I ever wanted with Kubernetes (and am working hard on simplifying our infrastructure and replacing K8s with AWS Fargate and thus spending less time on operations and more on development), and fell more and more in love with Clojure REPL, whether link:/java-troubleshooting-on-steroids-with-clojure-repl/[embdded in a Java app], in an actual Clojure code, or link:/2019/secure-repl-for-aws-fargate-services/[opening the door (securely!) to a "serverless" container on Fargate].

+++<!--more-->+++

== Open source contributions

I have released my first Clojure library, https://github.com/holyjak/clj-concordion[clj-concordion], a Clojure-friendly wrapper for a great Behavior-Driven Development / Testing tool. I have started contributing to the great documentation hub https://cljdoc.org/[cljdoc], implementing a better search and making it possible to download docs for org.clojure artifacts into https://clojureverse.org/t/dash-app-now-supports-cljdoc/3365[Dash] (soon!). I have also helped to make https://cryogenweb.org/[Cryogen], the Clojure static site generator, more extensible and customizable. Of my other contributions, I am most looking forward to the next version of Clojure where "ctor" in error messages will finally be replaced by "constructor" :-) and I hope my https://clojure.atlassian.net/browse/CLJ-2097[spec] and https://clojure.atlassian.net/browse/TCHECK-156?[test.check] patches will get merged and out.

== Noteworthy books, courses, videos

I have read 4 great Clojure/FP books this year. The last one is still under creation - Eric Normand's https://livebook.manning.com/book/grokking-simplicity/[Grokking Simplicity - Taming complex software with functional thinking] manages to articulate the thinking, principles, and values underlying functional programming in an accessible and attractive form, and makes you experience them through well-chosen examples and exercises. It provided me with the vocabulary and distinctions to better articulate and justify my design and decisions. Another book that deconstructs the values and principles of design is Zach Tellman's https://leanpub.com/elementsofclojure[Elements of Clojure] - "`It provides a framework for making better design choices, and a vocabulary for teams to discuss the software they collaborate on.`".

https://www.amazon.com/dp/1680500740/ref=cm_sw_r_cp_ep_dp_vEbkAbT77MYME[Clojure Applied: From Practice to Practitioner] by Ben Vandgrift, Alex Miller (2015) delivers on its name and really manages to guide you from knowing the language to applying it and structuring and building applications. Even in 2019 it is still highly relevant and quite unique in its focus. It tackles f.ex. topics such as namespace organization, creating and connecting components, composing applications, handling configuration. Finally, https://www.amazon.com/dp/1680502468/ref=cm_sw_r_cp_ep_dp_GKzJAb11S07VA[Programming Clojure 3rd edition] by Alex Miller, Stuart Halloway, Aaron Bedra (2018) is a handy, comprehensive reference. I still have things to learn :-)

Me and my colleagues have spent a few well-invested hours going through Eric Normand's video course https://purelyfunctional.tv/courses/repl-driven-development-in-clojure/[Repl-Driven Development in Clojure], taking (hopefully) our productivity to the next level. I have also learned useful details about core.async from https://tbaldridge.pivotshare.com/[Tim Baldridge's Core.Async tutorials], while preparing for my guide link:/2019/core-async-error-handling[Error handling in Clojure Core.Async]. I have also purchased Eric's https://purelyfunctional.tv/courses/intermediate-property-based-testing-with-test-check/[Intermediate] and https://purelyfunctional.tv/courses/advanced-property-based-testing-with-test-check/[Advanced Property-Based Testing with test.check] and am looking forward to deepening my knowledge of the topic.

During our regular work "tech talk lunches" we have seen a couple of great talks, the best ones include https://engineering.telia.no/blog/talk-exploring-four-hidden-superpowers-of-datomic[Exploring four hidden superpowers of Datomic (our summary, links)] and Eric Normand's https://lispcast.com/testing-stateful-and-concurrent-systems-using-test-check/[Testing Stateful and Concurrent Systems Using test.check] (talk + transcript).

http://dtrace.org/blogs/bmc/2018/09/18/falling-in-love-with-rust/[Falling in love with Rust] has motivated me even more to learn the language, fill the systems programming gap, and gain a new perspective on a number of things. (Why Rust and not Go? For the same reason https://engineering.telia.no/blog/choose-clojure-for-its-weirdness[why Clojure].)

(More interesting stuff can be found at http://holyjak.tumblr.com/[My top dev links of lately] feed.)

== Noteworthy additions to my blog

This has been a fruitful year. You can see the list of my blog link:/archives/[posts by month in the archives] but I would like to highlight a few.

=== Guides

* Dec 25 - link:/2019/core-async-error-handling/[Error handling in Clojure Core.Async]
* Sep 26 - link:/generative-testing-lessons-learned/[Applying Spec-based generative testing to a transformation pipeline - tips and lessons learned]

=== Experiences

* Dec 02 - link:/how-clojure-helped-recovering-from-bad-data/[How Clojure helped us recover from bad data]
* Oct 11 - link:/defeating-legacy-code-with-living-documentation-and-business-level-tests/[Defeating Legacy Code with Living Documentation And Business-Level Tests]

=== Clojure vs. Java

The link:/tags/clojure-vs-java/["Clojure vs. Java" series] builds on my experiences with our enterprise application built with Java and Groovy and compares it to a hypothetic Clojure application:

* Mar 21 - link:/translating-enterprise-spring-app-to-clojure/[Translating an enterprise Spring webapp to Clojure]
* Mar 07 - link:/clojure-vs-java-troubleshooting-prod-app/[Clojure vs Java: Troubleshooting an application in production]
* Mar 06 - link:/clojure-vs-java-few-datastructures-over-many-objects/[Clojure vs Java: The benefit of Few Data Structures, Many Functions over Many Unique Classes]
* Mar 01 - link:/design-in-java-vs-fp/[Solution design in Java/OOP vs. Clojure/FP - I/O anywhere or at the boundaries? - experience]

== Other

I have enjoyed the https://clojutre.org/2019/[ClojuTRE] conference - good talks, nice city, great opportunity to meet folks such as Martin Klepsch (cljdoc), Michiel Borkent (clj-kondo, babashka & more), Ray McDermott (the https://podcasts.apple.com/us/podcast/defn/id1114899563[Clojure podcast defn]), Alex Miller in the real life.

In Telia, our https://engineering.telia.no/blog/dev-happiness-fika["Dev happiness fika"] (thanks, Jakob!) gave rise to https://engineering.telia.no/blog/learning-fridays[Learning Fridays], which I am trying to keep going and spread them to the whole technology department of Telia Norway.

I have also started to support folks interested in Clojure by mentoring the https://exercism.io/my/tracks/clojure[Clojure track of Exercism], which https://blog.jakubholy.net/clojure-common-beginner-mistakes/[taught me a good deal]. We always need more mentors, and it is easy, so please https://exercism.io/become-a-mentor[join us!].

I have also finally link:/2019/migrating-from-gatsby-to-cryogen[moved my blog from Gatsby to Cryogen] (and from Markdown to AsciiDoctor), getting rid of some long-term frustrations and opening new opportunities.

== Thanks

There are many people who helped me in the past year and I want to thank at least some of them, in no particular order: Sean Corfield for https://github.com/seancorfield/next-jdbc/[next.jdbc] and support on Slack, Michiel Borkent (@borkdude) for https://github.com/borkdude/babashka/[babashka] and Carmen La for http://cryogenweb.org/[Cryogen] - all three especially for active help and rapid issue resolution. Erik Assum (https://twitter.com/slipset[@slipset]) for advice regarding Functional Core, Imperative Shell, Alf Kristian St√∏yle for starting the bi-monthly Oslo Clojure lunches, August Lille√•s for his inspiring https://youtu.be/hicQvxdKvnc[Datomic talk], https://augustl.com/series/datomic/[Datomic posts], and our chat on the topic. To the Prague Lambda meetup and Tieto Ostrava for having me and listening to my talks about Clojure and BDD. The supportive and helpful folks at the Clojurians Slack and ClojureVerse.

Last but not least, my great and inspiring colleagues that do so much beyond their work tasks - my teammates Anders Widgren, H√•kon Antonsen (both especially for embracing Clojure!), Anders Wighus, and Benedicte Selmer; my former teammates and fellow Clojurists , Christopher Nicolaysen, Eirik Stien, Jakob Lind, Madjid Hajian. Tom Erik Sundal-Ask for being such a supportive and open boss, Petter Hagman for having done so much for "dev happiness" in Telia.
