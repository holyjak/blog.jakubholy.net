{:title "What beginners to Clojure struggle with"
 :date "2020-01-21"
 :category "SW Development"
 :tags ["clojure", "learning"]
 :draft? true
}

What areas are giving most trouble to developers new to Clojure, what do they struggle most with? This is a follow-up to link:clojure-common-beginner-mistakes/[Clojure: Common beginner mistakes], this time focusing on a higher-level view.

<!--more-->

This is based on my experiences mentoring the https://exercism.io/tracks/clojure[Clojure track at Exercism.io], i.e. it only includes struggles that can be seen from the code and not anything else such as tooling, troubleshooting, and embracing REPL-driven development.

== Struggles

=== Language basics

People struggle with basics of using the language correctly because the do not know enough (yet) to see which variant is better and do not know fully the semantics of the language.

Basic elements and style:

* Not embracing https://guide.clojure.style/[the style of the language] - e.g. placing the closing `)` on a new line, using camelCase function / variable names, prepending `is-`/`has-` to function names (see link:++/clojure-common-beginner-mistakes/#_naming++[Naming in the Common beginner mistakes])
* Using `(require ..)` instead of `(ns .. (:require ..))`
* Using `def` instead of `let` inside functions

Semantics and conveniences:

* Not knowing the https://clojure.org/reference/reader#_dispatch[anonymous function literal] `#()`
* Not knowing that everything but `false` and `nil` is "truthy" and can (and arguably should) be used as such, instead of forcing a boolean (unless you really need one). I have seen an unnecessary `(bool ...)` and even `(if <some condition> true false)`.
* Not knowing that a string behaves as a sequence of Characters and can be e.g. ``map``-ed over directly

The unofficial https://guide.clojure.style/[Clojure Style Guide] is a treasure trove of information on style and good idioms. Go read it! (Again! :-))

=== Advanced conveniences for code readability

Many beginners have not yet discovered the *threading macros*, primarily `->` and `->`, to https://guide.clojure.style/#threading-macros[use instead of heavy form nesting for making code more readable]. Some even like to place multiple nested forms on a single line.

Another feature that simplifies code and makes it more readable that often escapes beginners is https://clojure.org/guides/destructuring[*destructuring*]. I find it especially useful in function arguments, f.ex. when mapping over a sequence of non-trivial items whose parts I need to access. Learn about it and leverage it where appropriate!

=== Embracing the platform

Clojure is a pragmatic language and an important part of that is that it embraces its platform, leveraging what it has to offer. And it expects the developers using it to do the same. So a lot of core Java functionality is no re-implemented in Clojure and you are expected to use the native one. This applies especially to the basic types such as https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html[`Character`] and `String` (though a significant subset of String's functionality is conveniently available via https://clojuredocs.org/clojure.string[`clojure.string`]), https://docs.oracle.com/javase/8/docs/api/java/io/File.html[`File`] and utilities such as https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html[`Math`] and `Base64`. On the other hand, if there is a Clojure version, you should prefer that one (it might have better semantics, is portable to ClojureScript / CLR, and is nicer).

So e.g. to parse a text into a number you should use `Character/digit` or `Integer/parseInt` and not Clojure's `read-string` (which is intended for something very different), you should leverage `Character/isLowerCase` etc.

=== Leveraging core functions and their full potential

"There is a function for it!"
-- an anonymous senior Clojure developer

There is a lot of power in the core library - both in individual functions and in the synergy between them for their are designed in clever ways to combine well together. It is easy to overlook the full breath of what a function can do (e.g that `(+)` and `(*)` make sense, that `map` can take multiple collections, ..) and to overlook that there is a function that can help you with your problem. Everybody knows `map`, `reduce`, and `filter` but what about the `partition*` set of functions, `juxt`, `fnil`, `iterate`, `cycle`, `interpose`, `reduced`, `clojure.walk/*`, ...? Also remember that maps, sets, and keywords can be used as functions. And be aware of the small conveniences such as `zero?`, `pos?`, `not=`, `if-let` etc.

One of the functions that beginners underestimate is `apply`, likely because they do not realize that many functions can take any number of arguments and thus can be applied to whole collections. So you can use `(apply str coll)` instead of `clojure.string/join` (if you don't need a separator) and `(apply + coll)` instead of something like `(reduce + coll)`.

I recommend to read regularly through the link:TODO[Clojure cheat sheet] and look at the functions you are not familiar with. Even after years with Clojure you can learn something new. You can also check out the https://www.youtube.com/channel/UCH0CkLvbv6yEyrUnw9qujpQ[Clojure Pills screencast].

=== Tendency to write a low-level code

Leverage the language and core library to take care of _how_ to do something and focus on _what_ you want to do. If you have a hammer, everything looks like a nail - and it is similar with Clojure's hammers, namely recursion and `reduce`. You can use either the one or the other to do anything but that doesn't mean you should. What you should do is to find the highest-level construct that lets you do what you need and takes care of as many implementation details as possible. As I've argued previously, link:/clojure-common-beginner-mistakes/#_prefer_higher_level_sequence_functions_over_low_level_recursion[prefer higher-level sequence functions over low-level recursion] - and, similarly, prefer higher-level sequence functions over the lower-level `reduce`. We replaced the manual Java(Script) `for` loop with its manual management of the position with `map` and for the same reason want to offload as much as possible of state management to the language / helper functions. Compare:

```clojure
;; Good
(->> [1 2 3]
  (filter even?)
  (map (partial * 2))
  (apply +))

;; Less good :-)
(reduce
  (fn [sum n] (if (even? n)
                (+ sum (* 2 n))
                sum))
  0
  [1 2 3])
```

(Of course, sometimes `reduce` or `recur` is the right solution - but make sure it is the case!)
