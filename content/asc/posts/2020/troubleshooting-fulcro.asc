{:title "Fulcro Troubleshooting Decision Tree (WIP)"
 :draft? true
 :date "2020-12-12"
 :tags ["Fulcro", "ClojureScript", "troubleshooting"]
 :category "SW Development"}

A decision tree to help you go from a problem to the most appropriate troubleshooting steps.

NOTE: Work in progress

+++<!--more-->+++

* *Fulcro Inspect*
** does not work / shows no data
  *** Try:
    **** Restart Chrome Dev Tools
    **** Re-install the Chrome extension
    **** Use the https://github.com/fulcrologic/fulcro-inspect#using-the-fulcro-3x-electron-app[standalone Inspect Electron app] instead
    **** Check the error logs of the extension and of Fulcro itself
  *** Update to the latest versions of Fulcro and Inspect - some versions don't work well together (as of 12/2020 you need Fulcro 3.4+ with the latest Inspect)
** EQL: No autocompletion -> _[(Re)load Pathom Index]_ (the button to the very left)
** Index Explorer - if _[Load index]_ does not work -> make sure there is a resolver for the index query defined and registered with Pathom; see https://github.com/fulcrologic/fulcro-rad-demo/pull/18[this example in RAD]

* *Data in client DB* missing / wrong. If data origin is:
  . Initial State
  *** Is your syntax for the `:initial-state` correct (https://book.fulcrologic.com/#_template_mode[template] x https://book.fulcrologic.com/#_lambda_mode[lambda] mode)? Make sure not to mix up the two in the same component!
+
```clojure
;; given :query [.. {:my/child SomeChild}]
;; 1. template mode (preferred)
:initial-state {:my/static 1
                :my/dyn :param/dyn-input <1>
                :my/child {}} <2>
;; 2. lambda mode w/ the same meaning:
:initial-state (fn [params]
                 {:my/static 1
                   :my/dyn (:dyn-input params)
                   :my/child (comp/get-initial-state SomeChild)})
```
<1> Values with the magical ns `:param` are replaced with the value of the corresponding, namespace-less key in the input `params` provided to the initial state by the parent
<2> For keys that match a join in the query, a map value
  is replaced with the initial state of that sub-component and
  the map is passed to it as its params
    **** Try `(comp/get-initial-state YourComponent)` and see   whether it looks OK or not

  *** Is the initial state composed correctly to the parent's and all the way up to the root component? Is the component's query also composed into the parent's query?
+
.Example
[source]
----
(defsc Child [_ {:child/keys [id some-prop]}]
  {:ident :child/id
   :query [:child/id :child/some-prop]
   :initial-state {:child/id :param/id}}
  ..)

(defsc Parent [_ {child :parent/child}]
  {;:ident ...
   :query [:parent/child (comp/get-query Child)]
   :initial-state {:parent/child {:id "123"}}
  (ui-child child))
----
    **** Try `(comp/get-initial-state Root)` and check the result, explore any "broken links"

. `load!` from the server
  *** Missing data
    **** Did the load fail? Did the server return an error or an empty response? Check the Transaction and Network tabs in Fulcro Inspect, check the log on both the client and server sides.
  *** The data is loaded but not normalized correctly
    **** Perhaps the corresponding entity is missing `:ident` (which is required for normalization) or it is not correct? (Remember to distinguish the https://book.fulcrologic.com/#_ident_generation[lambda x template x keyword form of ident].)
  *** The data is there correctly but not connected to the graph at the correct place(s) - make sure that you have the correct `:target` on the load, see `com.fulcrologic.fulcro.algorithms.data-targeting`, e.g. `targeting/append-to`.

  *** The data is at the wrong place in the DB - likely a wrong ident

* Data in DB OK but *not reflected in the UI*
** ident/query/initial-state and propagation up to the Root correct?
*** Check the transformation of the DB to the props tree manually:
+
```clojure
(let [state (app/current-state APP)]
    (com.fulcrologic.fulcro.algorithms.denormalize/db->tree
      (comp/get-query Root) ; or any component
      ;; Starting entity, state itself for Root
      ;; otherwise st. like (get-in state-map [:thing/id 1]):
      state
      state))
```
** ident-optimized renderer x not refreshing the impacted component(s) - the default (as of 3.4) ident-optimized `multiple-roots-renderer` tries to be smart and only re-render the component it knows has changed data, skipping its ancestors. Sometimes you must tell it what else to refresh (See ``df/load!``'s `:refresh` option and the optional `(refresh [env] ...)` section of a mutation).
*** Try rendering manually: `(app/force-root-render! com.example.client/app)`
*** Try switching to the simpler keyframe-render2, which renders from Root, including all ancestors, when you create your APP: `... :optimized-render! com.fulcrologic.fulcro.rendering.keyframe-render2/render!`
** Routing - if a dynamic router is involved, it is possible that you have made a mistake causing it to point to a different target component than you expect. Check the path `:com.fulcrologic.fulcro.routing.dynamic-routing/id <router> :current-route` in the db
* Pathom resolvers
** Resolver (i.e. the data it should provide) cannot be found
*** Reload the namespaces, restart Fulcro
*** Registered with the Pathom parser correctly? Look at where you create the parser and make sure that the resolver is included in the vector of resolvers you pass to it.
** Resolver fails
*** Try to run the parser manually:
```clojure
(parser
    {} ; fake Pathom env, add what you need, e.g. DataSource
    ;; e.g. in RAD with SQL:
    ;; {::sql/connection-pools pools/connection-pools}
    [:your/query :is/here ...])
```
*** Try to run the resolver (or `defattr` resolver) manually with a fake env with the expected db connection / ...

* TODO
** Routing (did you call `change-route[-relative]!`, including the full path to a _leaf target_? Is its initial state composed to its parent's state, e.g. using `:pre-merge` if the parent is loaded dynamically?)
*** Timeout -> router believes that current-route is the default but the UI shows (empty) the expected one
*** "dr/target-ready! was called but there was no router waiting for the target listed:  [:component/id :com.example.ui/Accounts] This could mean you sent one ident, and indicated ready on another."
** UISM
** Mutations
