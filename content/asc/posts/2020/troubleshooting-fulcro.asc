{:title "Fulcro Troubleshooting Decision Tree (WIP)"
 :date "2020-12-19"
 :tags ["Fulcro", "ClojureScript", "troubleshooting"]
 :category "SW Development"
 :toc true}

A decision tree to help you go from a problem to the most appropriate troubleshooting steps.

+++<!--more-->+++

NOTE: Work in progress (https://github.com/holyjak/blog.jakubholy.net/edit/master/content/asc/posts/2020/troubleshooting-fulcro.asc[Edit on Github] | https://github.com/holyjak/blog.jakubholy.net/commits/master/content/asc/posts/2020/troubleshooting-fulcro.asc[Commit history])

== Key troubleshooting insight from Fulcro's author

[quote,Tony Kay]
____
[..] a guiding principle that always helps me: Rendering in Fulcro is a pure function of state. Get the state right, and rendering will follow. The query/ident/composition has a shape that exactly matches the expected structure in app state. You do have to reason over that in time, but you need to learn to adapt to look at the *data patterns.*

Anytime I have a “bug” I *first* look at query/ident/initial state and see if they make sense, THEN I look at app state and see if it *matches* what makes sense, THEN I look at my logic and see if it is also working with that same data shape. It’s all about the data.
____

== The key to troubleshooting

Fulcro is fundamentally simple and so is, in essence, troubleshooting it. It consist of a number of small, simple parts connected together. All problems stem either from not using a part correctly or not connecting them correctly together (the price of Fulcro being more library-ish then framework-ish). The key to troubleshooting is then to find the relevant part and zoom in on it and then  to check all the relevant connections up to the UI. And you need to know how to optimally troubleshoot these various parts.

An early distinction to make is whether it is a frontend problem (mostly a matter of the correct query/ident/initial state/composition into parent) or a backend problem (mostly a matter of resolvers and their registration with Pathom or the underlying data sources).

For example. if the UI is not displaying the expected property, you might find out that it is because the server does not return it (connection). You zoom in to the resolver responsible for it (the simplest part) and the DB query it calls (even simpler sub-part) - is the query working? Is the resolver working? Is the resolver registered with Pathom? Is the query actually correct? The wrong solution is to stay at the level of the UI and work with the full stack while trying to locate the root cause of the problem.

Stuart Halloway's https://youtu.be/FihU5JxmnBg:[Debugging with the Scientific Method] offers a great approach to such a troubleshooting.

=== Know your tools!

It is crucial that you know your tools so that you can really focus on the relevant part of the sytem and to explore / invalidate a particular hypothesis about it and the cause. Primarily this means that you need to have Fulcro Inspect working and be familiar with its many powers:

* Use _DB_ to look at you client-side data
* Use _Transactions_ to see what is happening in the app (`transact!`, `load!` etc.)
* Use _Network_ to see requests sent to the backend (typically triggered by a `load!` transaction of a mutation) and use the `[Send to query]` button on a network request details to send the query to the EQL tab for further experimentation
* Use _EQL_ to try queries and mutations. Remember to _[(Re)load Pathom Index]_ to get autocompletion. (And re-load it whenever you register / change a resolver in a significant way.)
* Most importantly, use _Index Explorer_ to see the properties and resolvers known to Pathom. As with EQL, remember to _[Load index]_  whenever you register / change a resolver.

== Troubleshooting steps by problem

=== Fulcro RAD

Fulcro RAD is just an addon to Fulcro that builds on its established base, there is no magic.

`defsc-form` and `defsc-report` or still just `defsc` components (and so is Fulcro's `defrouter`).

`defattr` only defines a map, that must be passed to a form/report, may contain an inline `defresolver` via `ao/pc-resolve`, and are used to https://github.com/realgenekim/fulcro-rad-demo/blob/237db6a213b264bf63a3c77f243142fe6b635782/src/datomic/com/example/components/auto_resolvers.clj[auto-generate resolvers] from the `ao/identity? true` attribute to those that have it in its `ao/identities` set.

=== Frontend (Fulcro)

Frontend errors are most often in incorrect query/ident/composition.

Note: I use the same https://book.fulcrologic.com/#_common_prefixes_and_namespaces[namespace aliases as Fulcro documentation].

* [#inspect]#*Fulcro Inspect*#
** _DB and DB Explorer_ does not work / shows no data
  *** Try:
    **** Restart Chrome Dev Tools
    **** Re-install the Chrome extension
    **** Use the https://github.com/fulcrologic/fulcro-inspect#using-the-fulcro-3x-electron-app[standalone Inspect Electron app] instead
    **** Check the error logs of the extension and of Fulcro itself
  *** Update to the latest versions of Fulcro and Inspect - some versions don't work well together (as of 12/2020 you need Fulcro 3.4+ with the latest Inspect)
** _EQL_: No autocompletion -> _[(Re)load Pathom Index]_ (the button to the very right)
** _Index Explorer_ (a.k.a. https://blog.wsscode.com/pathom/v2/pathom/2.2.0/connect/exploration.html[Pathom Viz, documented here]) - if _[Load index]_ does not work -> make sure there is a resolver for the index query defined and registered with Pathom; see https://github.com/fulcrologic/fulcro-rad-demo/pull/18[this example in RAD]

* [#client-db]#*Data in the client DB*# missing / wrong. If data origin is:
  . Initial State
  *** Is your syntax for the `:initial-state` correct (https://book.fulcrologic.com/#_template_mode[template] x https://book.fulcrologic.com/#_lambda_mode[lambda] mode)? Make sure not to mix up the two in the same component! Example:
+
```clojure
;; given :query [.. {:my/child SomeChild}]
;; 1. template mode (preferred)
:initial-state {:my/static 1
                :my/dyn :param/dyn-input <1>
                :my/child {}} <2>
;; 2. lambda mode w/ the same meaning:
:initial-state (fn [params]
                 {:my/static 1
                   :my/dyn (:dyn-input params)
                   :my/child (comp/get-initial-state SomeChild)})
```
<1> Values with the magical ns `:param` are replaced with the value of the corresponding, namespace-less key in the input `params` provided to the initial state by the parent
<2> For keys that match a join in the query, a map value
  is replaced with the initial state of that sub-component and
  the map is passed to it as its params

    **** Try `(comp/get-initial-state YourComponent)` and see   whether it looks OK or not

  *** Is the initial state composed correctly to the parent's and all the way up to the root component? Is the component's query also composed into the parent's query?
+
.Example
[source]
----
(defsc Child [_ {:child/keys [id some-prop]}]
  {:ident :child/id
   :query [:child/id :child/some-prop]
   :initial-state {:child/id :param/id}}
  ..)

(defsc Parent [_ {child :parent/child}]
  {;:ident ...
   :query [:parent/child (comp/get-query Child)]
   :initial-state {:parent/child {:id "123"}}
  (ui-child child))
----
    **** Try `(comp/get-initial-state Root)` and check the result, explore any "broken links"

. [#load]#`load!`# from the server
  *** Missing data
    **** Did the load fail? Did the server return an error or an empty response? Check the Transaction and Network tabs in Fulcro Inspect, check the log on both the client and server sides.
    **** Is there a problem with the query / backend?
    ***** Find the request in Fulcro Inspect's Network tabs and click _Send to query_.
    ****** Does the query look ok?
    ****** _Run EQL_ and check the result. If you believe the problem is with the <<_backend_pathom,backend, see below>> how to run and troubleshoot the query there
  *** The data is loaded but not normalized correctly
    **** Perhaps the corresponding entity is missing `:ident` (which is required for normalization) or it is not correct? (Remember to distinguish the https://book.fulcrologic.com/#_ident_generation[lambda x template x keyword form of ident].)
  *** The data is there correctly but not connected to the graph at the correct place(s) - make sure that you have the correct `:target` on the load, see `com.fulcrologic.fulcro.algorithms.data-targeting`, e.g. `targeting/append-to`.

  *** The data is at the wrong place in the DB - likely a wrong ident

* [#ui-db-mismatch]#Data in DB OK but *not reflected in the UI*#
** ident/query/initial-state and propagation up to the Root correct?
*** Check the transformation of the DB to the props tree manually:
+
```clojure
(let [state (app/current-state APP)]
    (com.fulcrologic.fulcro.algorithms.denormalize/db->tree
      (comp/get-query Root) ; or any component
      ;; Starting entity, state itself for Root
      ;; otherwise st. like (get-in state-map [:thing/id 1]):
      state
      state))
```
** ident-optimized renderer x not refreshing the impacted component(s) - the default (as of 3.4) ident-optimized `multiple-roots-renderer` tries to be smart and only re-render the component it knows has changed data, skipping its ancestors. Sometimes you must tell it what else to refresh (See ``df/load!``'s `:refresh` option and the optional `(refresh [env] ...)` section of a mutation).
*** Try rendering manually: `(app/force-root-render! com.example.client/app)`
*** Try switching to the simpler keyframe-render2, which renders from Root, including all ancestors, when you create your APP: `... :optimized-render! com.fulcrologic.fulcro.rendering.keyframe-render2/render!`
** Routing - if a dynamic router is involved, it is possible that you have made a mistake causing it to point to a different target component than you expect. Check the path `:com.fulcrologic.fulcro.routing.dynamic-routing/id <router> :current-route` in the db

=== Backend (Pathom)

The key concept and source of problems are resolvers. Is there a resolver for the property you are interested in? Are there all the necessary resolvers for getting from the ID property A you have to the property P you are interested in? Does the resolver work? Even if some of the resolvers are https://github.com/realgenekim/fulcro-rad-demo/blob/237db6a213b264bf63a3c77f243142fe6b635782/src/datomic/com/example/components/auto_resolvers.clj[auto-generated e.g. by Fulcro RAD], you still end up just with resolvers and properties.

Note: I use the same https://blog.wsscode.com/pathom/v2/pathom/2.2.0/introduction.html#_aliases_used_in_code_examples[namespace aliases as Pathom documentation] (primarily `com.wsscode.pathom.core :as p`, `com.wsscode.pathom.connect :as pc`).

* [#query-result]#Query does not return the expected data#

** Is your https://edn-query-language.org/eql/1.0.0/specification.html[EQL syntax] correct? The basic syntax is `[:thing/simple-property {:thing/join-property [:joined-thing/prop1]}]` though it might get more complicated with https://edn-query-language.org/eql/1.0.0/specification.html#_parameters[parametrized properties / idents / joins], union queries etc. (Remember that a join always looks the same and returns either a single map or a vector of maps depending on whether it is 1:1 or 1:many.)
*** Check your query against the Spec (though beware - the spec does not need to be perfect and might possibly accept some invalid corner cases, I imagine):
+
```clojure
(require 'clojure.spec.alpha 'edn-query-language.core)
(clojure.spec.alpha/explain
    :edn-query-language.core/query
    [:your.query/here ...])
; OUT: Success!
```

** Run the query manually through the parser:
+
```clojure
(ns example
  (:require
    ;; SQL:
    [com.fulcrologic.rad.database-adapters.sql :as sql]
    [com.example.components.connection-pools :as pools]
    ;; Datomic:
    [com.fulcrologic.rad.database-adapters.datomic :as datomic]
    [com.example.components.datomic :as cd]
    [datomic.api :as d]))]
(def empty-env
  "fake, empty Pathom env, add what you need, e.g. a DataSource"
  {})
(def datomic-env
  {::datomic/databases
   {:production (atom (d/db (:main cd/datomic-connections)))}})
(def sql-env
  {::sql/connection-pools pools/connection-pools})
(parser
    (or datomic-env empty-env sql-env) ; choose the appropriate one
    [:your/query :is/here ...])
```
(The example above is from the Fulcro RAD Demo backed by Datomic. The environment you need to construct is what https://github.com/fulcrologic/fulcro-rad-demo/blob/f840996486fcedfaa3871443ca7499ed3a3cf62a/src/datomic/com/example/components/database_queries.clj#L10[your resolvers need]. The environment is prepared by the https://github.com/fulcrologic/fulcro-rad-datomic/blob/fulcro-rad-datomic-1.0.4/src/main/com/fulcrologic/rad/database_adapters/datomic.clj#L514[`datomic/pathom-plugin`], which is https://github.com/fulcrologic/fulcro-rad-demo/blob/f840996486fcedfaa3871443ca7499ed3a3cf62a/src/datomic/com/example/components/parser.clj#L38[registered with the parser].)
*** Remember that Pathom ``env``ironment is a map of configuration and context, typically containing a data source / connection. It is continually enhanced through the resolution process, which resembles a recursive, depth-first search, where the output of one resolver is added to the `env` before the next resolver for a join is invoked. Given the query `[{[:student/id 1] [:student/github {:student/classes [:room/nr]}]}]`: first the student resolver sets `\#:student{:id 1 :fname "Jo" :classes [[:class/id "X"]]}` as the current entity in the env then the classes resolver sets the current entity to `#:class{id "X", :room [:room/id 7]}` then the room resolver outputs `#:room{:id 7 :nr "201"}` and the `:nr` is propagated into the result. Then means that _you can invoke any resolver directly through the parser by setting env to contain the relevant context via https://blog.wsscode.com/pathom/v2/pathom/2.2.0/core/entities.html[`::p/entity`]_, you do not need to go all the way from the top. So for example in the fulcro-rad-demo you can run this in https://github.com/fulcrologic/fulcro-rad-demo/blob/f840996486fcedfaa3871443ca7499ed3a3cf62a/src/datomic/com/example/components/parser.clj[`parser.clj`]:
+
```clojure
(parser
    {::p/entity
     #:account{:id #uuid "ffffffff-ffff-ffff-ffff-000000000100",
               :name "Tony"}}
    [:account/name])
; => #:account{:name "Tony"}
```

** Is there a resolver for the property/join in question?
*** Look into Fulcro Inspect's Index Explorer, which lists all known properties and resolvers
**** If missing: have you created the resolver? Have you registered it with Pathom? (It must, directly or indirectly, be included into the list of resolvers that you https://github.com/fulcrologic/fulcro-template/blob/9aa9107a470eb302206fef2f5cf3868ee12c9831/src/main/app/server_components/pathom.clj#L49[pass to `p/parser` via `::p/plugins -> pc/connect-plugin -> ::pc/register`] (https://github.com/fulcrologic/fulcro-rad-demo/blob/f840996486fcedfaa3871443ca7499ed3a3cf62a/src/datomic/com/example/components/parser.clj#L49[RAD takes a vector of resolvers] and registers them with Pathom for you))

** Run the resolver manually (whether defined via `pc/defattr` or a Fulcro ``defattr``'s `ao/pc-resolve`):
+
```clojure
;; given (pc/defresolver MyThing) or (defattr MyThing):
((:com.wsscode.pathom.connect/resolve MyThing)
  fake-env input)
;; where fake-env, input are maps with whatever it needs
;; (fake-env is the Pathom env as sent to the parser)
```
*** Is the output in the expected form? (A map or a vector of maps with the properties declared in `::pc/output`.)
*** Has the resolver failed? Check the returned exception / server log
*** No data returned - capture the arguments, call and troubleshoot the underlying data source directly
*** Remember: *Reload namespaces, restart Fulcro* after any change to a resolver, RAD attribute, and registration of resolvers. `defresolver` and `defattr` don't do anything, they just `def`-ine a map. You need to register them with Pathom.

** Is it actually possible to get from the join property to the property you want to obtain?
*** Run a simpler query. Leverage https://blog.wsscode.com/pathom/v2/pathom/2.2.0/connect/resolvers.html#SingleInputs[joins on idents] to zoom in on the part of a complex, nested query that is giving you troubles. Example: from `[{:all-sessions [:session/id {:session/tags [:tag/id :tag/name]}]}]` -> `[{[:session/id 123] [:session/id {:session/tags [:tag/id :tag/name]}]}]` -> `[{[:tag/id 456] [:tag/name]}]`. If you are trying to go from property A to D through a chain if implicit connections, focus on a single connection at a time, i.e. first on the property B directly resolvable from A: `[{:A 123} [:B]]` then on the next connection: `[{:B 456} [:C]]` etc.
*** Look into the Index Explorer at the target property and its _Reach via_, look at the _Graph view_ (tip: look only at Direct inputs and increase the depth to see what the property is reachable from)

* *TODO*
** Routing (did you call `change-route[-relative]!`, including the full path to a _leaf target_? Is its initial state composed to its parent's state, e.g. using `:pre-merge` if the parent is loaded dynamically?)
*** Timeout -> router believes that current-route is the default but the UI shows (empty) the expected one
*** "dr/target-ready! was called but there was no router waiting for the target listed:  [:component/id :com.example.ui/Accounts] This could mean you sent one ident, and indicated ready on another."
** UISM
** Mutations

== Common sources of error

* Component's query (and sometimes initial state) not composed into the parent's query (initial state)
* Pathom resolver defined but not https://github.com/fulcrologic/fulcro-template/blob/9aa9107a470eb302206fef2f5cf3868ee12c9831/src/main/app/server_components/pathom.clj#L49[registered with Pathom]
* RAD attribute defined but not https://github.com/fulcrologic/fulcro-rad-demo/blob/f840996486fcedfaa3871443ca7499ed3a3cf62a/src/datomic/com/example/components/parser.clj#L36[registered with Pathom]

== Related resources

* https://blog.jakubholy.net/2020/error-handling-in-fulcro/[Error handling in Fulcro: 3 approaches]
