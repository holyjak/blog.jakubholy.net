{:title "Generalize to simplify: Factoring out looping from a paginated fetch function"
 :draft? true
 :series "Studies of bad and good code"
 :tags ["bad-good-code", "clojure"]
 :category "SW Development"
}

.Inputs
====
*TODO: Finalize title, rename file*

Thanks a lot to everybody who advised me on improving my function to fetch blog posts from a paginated API. I have applied your idea to use a dedicated stop-signal instead of just closing the output dst channel, which simplified the code, and @hiredman’s excellent idea to factor out the looping by creating an async version of core iterate (it took me a while to understand it fully and I ended up writing a less flexible but easier for me to understand version of it).
Here is the original async-fetch-all-posts https://github.com/holyjak/clj_tumblr_summarizer/blob/c1ca0ea37d2a6749466059bbf957647f5f989004/src/clj_tumblr_summarizer/input.clj#L49 combining async/thread, try, loop, let, when & if and here is the refactored and renamed fetch-posts-async! https://github.com/holyjak/clj_tumblr_summarizer/blob/e03395a0cd22ad52130e22d7b550561c35250f14/src/clj_tumblr_summarizer/input.clj#L67
(Here https://github.com/holyjak/clj_tumblr_summarizer/blob/e03395a0cd22ad52130e22d7b550561c35250f14/src/clj_tumblr_summarizer/input.clj#L50 I start the process producing pages of data and here is the factored-out async-iterate https://github.com/holyjak/clj_tumblr_summarizer/blob/e03395a0cd22ad52130e22d7b550561c35250f14/src/clj_tumblr_summarizer/async_utils.clj#L20). If you have any comments, they would be of course most welcome.

IDEAS

* Gorman and too many fn make reading difficult
* Reusability x Economy of reuse
* Diagram of the complexity of A and B wrt nr decision points/control structures
* Generalize too much => incomprehensible, too little => many corner cases
* More code yet "simpler"
* What is "simple"? Simple as "fewer things" x easy to understand. => simple ±= does one thing.
* Credit to @hiredman
* *OBS*: Mixture of two effects: generalization AND separation of responsibility <> be very clear about each
====

Can code become simpler by making it more generic? It is disputable but I want to argue that it can. I will demonstrate it on a function that I have recently simplified by replacing its looping and end of looping logic with a factored-out, general iterating function. The argument I want to make is this:

.Proposition:
____
Zooming out of the details of a piece of code and looking for more general patterns in it enables you to discover separate, higher-level concerns there. By factoring those out into general helper functions, the original function becomes simpler (https://en.wikipedia.org/wiki/Separation_of_concerns[Separation of Concerns]). Also these helper functions are "simple" - though not necessarily easy to comprehend at first - because they are more general and thus can assume less about their inputs and do less with them, ideally a single thing.
____

+++<!--more-->+++

The first part, about the benefit of separation of concerns, is, I believe, uncontentious. But the second part, about the advantages of a more general code, needs some justification, so I will focus on that. I am not sure how well I will manage to make my case. It originates from an aesthetic feeling that this is a better way and only now I am trying to justify why.

It is a similar argument that can be made for higher-order functions such as `reduce`, `map`, and the one that inspired this, `iterate` (which takes a function `f` and an `x` and returns the sequence of `x`, `f(x)`, `f(f(x))` etc.). Their usage is perhaps not as "easy" to understand as the straight-forward `for (int i = 0; i < 10; ++i) { .. }` but it is arguably "simpler" because you don't need to manage the low-level details of the iteration. They require more knowledge to understand but once you are familiar with them, you will appreciate the resulting simplification.

My proposition is that a more general code is simpler then a very concrete code - because it knows far less about its subject and thus can do far less. A function taking a `Collection` of things and returning a thing can do far less then a function taking a `List` of integers and returning an integer. Of course there is a sweet spot - the code might be so general that it becomes incomprehensible to anyone but a hardcode mathematician. Pagination over a remote REST API is much more concrete and difficult to comprehend then a generic `iterate` function that takes a function and x~0~ and produces the nth result x~n~ based as f(x~n-1~). Such a function is "simple" - it simply calls f(x~n-1~) in each stage. That makes it easier to comprehend the function that uses it to do the paginated read because it removes the iteration from its body and offloads it to the generic function you already ± know and understand / can easily intuitively grasp. The `iterate` function does a single thing and the calling function does a single thing. They both might be non-trivial but the whole is anyway easier to comprehend (and test) by separating out unrelated concerns (*SRP*).

## The code

The code was originally in Clojure, leveraging core.async. For the sake of accessibility, I present it in a simplified pseudocode here though I also link to the originals.

### Introducing the problem

I want to read https://www.tumblr.com/docs/en/api/v2#posts--retrieve-published-posts[posts from the Tumblr API], which returns a "page" of twenty posts at a time and I want to turn that into a flow of the individual posts. I want to keep fetching until I have got them all or until the consumer decides that it was enough (f.ex. because it has reached a post it has already processed during the previous execution).

### On channel-based asynchronicity

The code uses Go-like channels for asynchronous communication. A channel is essentially a first in - first out queue. It is used exclusively inside a `go` block that turns the synchronously-looking code into a state machine that yields control back to the system whenever it blocks on reading from / writing to a channel. It is similar to the rewriting that `async` + `await` do in other languages.

### Before (https://github.com/holyjak/clj_tumblr_summarizer/blob/c1ca0ea37d2a6749466059bbf957647f5f989004/src/clj_tumblr_summarizer/input.clj#L49[Clojure original])

```typescript
function asyncFetchAllPosts(destination: Channel<Post>) {
  go {
    try {
      let href = "/v2/blog/holyjak.tumblr.com/posts?npf=true"
      while (href) {
        const { posts, nextHref } = parseBody(fetchPostBatch(href))
        if (destination.closed()) return
        if (empty(posts)) return
        destination.insertAll(posts) // blocking
        href = nextHref
      }
    } finally {
      destination.close()
    }
  }
}
```

Many developers would be fine with this function because it is short and they are used to such code. But I have qualms about it because it does too much - there are three nested blocks (in Clojure four because `let` is also a block there), a loop, and three decision points. (Clojure makes it more messy because it doesn't have a premature `return`. This is aligned with its philosophy of making "bad" code more painful and I am thankful for it. In JS I wouldn't have noticed how bad it actually is.)

What I want it to say is this:

> Keep reading until the consumer lost interest or there is no more data, turning the pages into a flow of the individual posts.

Let's see whether we can express it more directly.

### After (https://github.com/holyjak/clj_tumblr_summarizer/blob/e03395a0cd22ad52130e22d7b550561c35250f14/src/clj_tumblr_summarizer/input.clj#L67[Clojure original])

```typescript
function fetchPostsAsync(destination: Channel<Post>, stopSignal: Channel<Any>) {
  const producerIn = new Channel()
  const producerOut = new Channel()
  const unrolledPostsChan = new Channel()
     .withTransformation(map(batch -> batch.posts))
     .withTransformation(concatenate)
  // I. Stop if the consumer lost interest:
  go {
    stopSignal.read()  // blocking
    producerIn.close()
  }
  // II. Keep reading while more data:
  startPostBatchProducer(producerIn, producerOut)     // <1>
  let outChan = asyncIterate(producerOut, producerIn, // <2>
    {nextHref: "/v2/blog/holyjak.tumblr.com/posts?npf=true"})
  // III. Turn the pages into individual posts:
  outChan = async.pipe(outChan, unrolledPostsChan)    // <3>
  async.pipe(outChan, destination)
}
```
<1> The Producer is an async process that keeps turning `{nextHref:N}` into
    `{nextHref:N+1, posts:[..]}`, see below
<2> `asyncIterate` keeps feeding the producer with its last output,
    also putting each onto the returned `outChan`
<3> Pipe through a transforming channel that will turn responses into posts

This function is linear, there is no branching, no decision points. It simply
connects a couple of processes and channels together. The only complication is
that it has an extra async block to listen for and propagate the stop signal.
That is a stark difference to the original function, which had three nested blocks,
including a loop, and three decision points (while being a simplified version of the
  original).

 The producer became slightly more complicated, as we had to turn a function of argument -> data into a _process_, reading `{nextHref:N}` from `producerIn` and writing `{nextHref:N+1, posts:[..]}` to `producerOut` as long as there is any more data and a consumer is asking for more.

 As mentioned earlier, the https://github.com/holyjak/clj_tumblr_summarizer/blob/e03395a0cd22ad52130e22d7b550561c35250f14/src/clj_tumblr_summarizer/async_utils.clj#L20[async-iterate] is a channels-based variant of the traditional `(iterate f x)` that returns x, f(x), f(f(x)), ... . Instead of taking the function `f`, it takes a _process_ in the form of its input and output channels and instead of running `f(x)`, it keeps writing the initial / previous x~n~ into its input and reading x~n+1~ from its output, while also putting it onto its own output channel for the consumer.

.Example: A scheduling system
[sidebar]
--
Let's look at an example that demonstrates how more (but not too much) generality makes code better.

Imagine you have been asked to design a scheduling system for a university. The system could be designed at any of the following levels of abstraction / generality:

1. Classrooms, labs, computer rooms, lecture halls + lectures, labs, group work => schedule
2. Resources with capabilities + requests with needs => schedules
3. A binary function providing a conflict-free mapping from a domain A to a domain B (excuse my lack of the proper mathematical terminology)

I would argue that the first one is too specific, making the design more complex by flooding it with irrelevant details. The third one, on the contrary, is too generic, too removed from the actual domain.
--

## Summary

*TODO*
