{:title "Fulcro Gotchas"
 :category nil
 :tags ["fulcro"]
 :date "20201-04-01"
 :draft? true}

Common misconceptions and pitfalls in Fulcro.

+++<!--more-->+++

== General

=== You query the *client DB*, not the server!

A common misconception is that the Root's `:query` is used to `load!` the app data, i.e. that something like
[.line-through]#`Root query -> load! -> Root props -> rendered UI`# is happening. It is not. What is happening is `Root query -> client DB -> Root props -> rendered UI`. You can use _a_ query to also load some data from the backend to _feed the client DB_ but this is up to you, has nothing to do with the just described cycle, and does not need to happen. Also, you essentially never `load!` the Root query. Instead, you load data for distinct UI subtrees, i.e. sub-queries. So these are two orthogonal, independent processes: rendering client data into the UI and feeding the client database.

=== A component's query is relative to its parent component, only Root can "see" keys at the root of the client DB*

(_* That is unless the componet uses a Link or Ident query._)

This will _not_ show any data:

```clojure
;; Given this client DB:
{:project/all-projects [{:project/name "Project 1"}]
 :component/id  {:Projects {}}
 :root/projects [:component/id :Projects]}

(defsc Projects [_ {all-projects :project/all-projects}]
  {:query [:project/all-projects]
   :ident (fn [] [:component/id :Projects])
   :initial-state {}}
  (div
    (h3 "My Projects")
    (pr-str all-projects)))

(defsc Root [_ {projects :root/projects}]
  {:query [{:root/projects (comp/get-query Projects)]
   :initial-state {:root/projects {}}}
  (ui-projects projects))
```

If you look at root query:

.Root query
```clojure
(comp/get-query Root)
;=> [{:root/projects [:project/all-projects]}]
```

and the de-normalized client DB (where the `[:component/id :Projects]` ident/"pointer" was replaced with the value):

.De-normalized client DB
```clojure
{:project/all-projects [{:project/name "Project 1"}]
 :root/projects {}}
```

you will se why. We are asking essentially for `(-> denormalized-db :root/projects :project/all-projects)` but there is no such thing.

The query of a child (here `Projects`) is relative to its parent (here `Root`) so the keys used in the query (`:project/all-projects`) need to be in the client DB _under the parent's ident_. Only the Root component itself can see and ask for keys directly at the root of the client DB. That is why correctly "targeting" data, i.e. adding "edges" or "pointers" from the parent component to the loaded data, is critical.

How to fix? We made a mistake when loading the data. We should not have put them in the root but should have targeted them to the Projects component by modifying the load thus: `(df/load! :project/all-projects Projects {:target (targeting/replace-at [:component/id :Projects :project/all-projects])})`.

---

Tasks:

1. load! data to feed a UI (1-2 subtrees) - Root > TodoPane > list of Todo | list of Project => two loads.
   1. Also write the resolver? Notice server property name can very well differ from the component's property; play with that.
2. Why is not data showing in UI? I have :todo/all-todos but my TodoPane is empty! B/c it is not Root, use data targeting.
3. De-normalize client DB
4. Given a tree of components, what would be the query? Denormalize the DB, fulfill the query.

*TOOL IDEA*: Run query against client DB, show where in the DB you expected to find a value but found none (such as at `:component/id  :Projects :project/all-projects` in the example above).
