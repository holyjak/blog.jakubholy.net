{:title "What is simplicity in programming and why does it matter?"
 :tags ["clojure"]
 :category "SW Development"
 :draft? true
 :date "2021-06-10"}

When I started with Clojure, I saw a language. Some people, when they look at it, they only see a weird syntax. It took me years to realize that *in truth Clojure is a philosophy*. The language embodies it, the ecosystem embraces it and grows from it, you the developer eventually soak it up.

The philosophy is *simplicity* - on a very profound level - and *ergonomics*. What do I mean by simplicity and ergonomics? Simplicity is about breaking things apart into their elementary constituents that are https://stackoverflow.com/questions/1527393/what-is-orthogonality[orthogonal] to each other. Ergonomics is about making it possible and convenient to combine these elements in arbitrary, powerful ways. You end up with simple things that have single responsibility and that you can combine freely to suit your unique needs. These elements are simple but also generic and thus applicable in many situations and usable in many ways.

## Examples

### Unix tools

The https://www.linuxtopia.org/online_books/gnu_linux_tools_guide/the-unix-tools-philosophy.html[Unix tools philosophy] is based on simplicity:

> The tools philosophy was to have small programs to accomplish a particular task instead of trying to develop large monolithic programs to do a large number of tasks. To accomplish more complex tasks, tools would simply be connected together, using pipes.

So you have small, single-purpose elements that share a simple, well-defined, generic interface (lines of text) and thus you can combine them in many ways to achieve many different goals. You can read an access log with `cat`, filter only requests from a particular IP with `grep`, extract just the response code with `cut`, sort it with `sort`, and get all the unique values with `uniq`. (The `|` interface is great for many purposes but actually too simple for others, which prompted the creation of the https://elv.sh/[Elvish Shell], whose pipes can carry structured data.)

### Clojure

Just a few examples.

Clojure gives you many of the same tools that you get in an OO language such as Java but contrary to these, you get each of them as a separate thing your are free to use and combine with others as you see fit. *Java tangles polymorphism with hierarchy and code sharing* (i.e. inheritance). Clojure has two forms of inheritance, the simpler protocols and the more powerful multimethods. https://clojure.org/reference/multimethods[Multimethods] dispatch based on an arbitrary value produced by the dispatch function you supply. You either need to make sure that the dispatch values are unique - or you can use Clojure's https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/derive[`derive`] to define the hierarchy you want. (I've never needed that because my needs were simple enough. Clojure allows me to use correspondingly simple concepts and write simple code while Java forces me to use its more complex concepts (because it does not have any simler ones).)

In Java, *implementing an interface* requires that you have control over the target class. Clojure has https://clojure.org/reference/protocols[protocols], which are quite similar to interfaces, but you can implement it for a class you do not control. That is very powerful and useful.

A key source of simplicity in Clojure is that all *data is represented by a few generic data structures* and the core library provides tens of powerful functions to work with these (and a few abstractions above them). In Java, everything has its own classes with its own, unique methods. The ≈ 100 Clojure collection sequence functions I get to use again and again, with every library and framework I ever use. And similarly I reuse the few key higher-order functions to express powerful transformations. In Java, I have to learn a new "API" for each library and write tons of bespoke glue code to get data to flow from one to another. I have ranted about this before in link:/clojure-vs-java-few-datastructures-over-many-objects/[Clojure vs Java: The benefit of Few Data Structures, Many Functions over Many Unique Classes] where I had to deal with data flowing from `HttpServletRequest` -> Apache `HttpUriRequest` and Apache `HttpResponse` -> `HttpServletResponse`. What does this have to do with simplicity? I have only a few parts, i.e. the 4 core collections, contrary to Java's infinite number of data representations and data access forms. And I get to process them with generic functions that are oblivious to the concrete domain, i.e. orthogonal to it, while in Java I am forced to write 100% domain-specific code.

### EDN > JSON, EQL > GraphQL

Extensible Data Notation is a Clojure parallel to JSON but it supports more data types (such as symbols, keywords, sets) and key types and, most importantly, it is extensible through "tagged literals", with some extensions included out of the box such as for dates (ex.: `#inst "2021-06-13`), which JSON is sorely missing, and regular expressions (`#"^Hello*"`).

https://graphql.org/[GraphQL] is a graph data query language with a unique syntax. It is typically embedded in JavaScript as a string. Its Clojure parallel is https://edn-query-language.org/[EDN Query Language]. The big difference is that EQL is expressed using ordinary EDN data structures - because EDN (contrary to JSON) is powerful enough. And thus, contrary to GraphQL, you do not need any special APIs to parse, transform, or programmatically generate these queries. You can simply use the old, good Clojure functions you already use million times a day. You do not need https://dgraph.io/docs/graphql/api/fragments/[anything special to define fragments] - just use data and functions.

## What do we know about simplicity?

### Simplicity ≠ convenience

### Simplicity ain't easy

## Conclusion

- Simplicity - few things, few interdependencies, "small" things
