{:title "PostgreSQL & JDBC: How to select rows matching pairs of values"
 :date "2023-12-15"
 :tags ["database","performance"]
 :category ["SW Development"]}

Given a _sequence_ of pairs of (id, version) in code, how do you _efficiently_ select all records in your DB that match? You can construct a long string with `SELECT ... WHERE (id = 'a' AND version = 1) OR (id = 'b' AND version = 20) OR ...` but that's not very efficient. If you only had a single value then, in PostgreSQL, you could use `id=ANY(?)` and pass in a char array. But what if you have multiple conditions/columns that must match? `Unnest` to the rescue!

+++<!-- more -->+++

Here is the complete solution:

```clojure
(let [id+ver-pairs [[\a,1], [\b,20], [\c,1]]
      ids (map first id+ver-pairs)
      versions (map last id+ver-pairs)]
   (next.jdbc/execute! conn
      ["select * from thing t join unnest(?,?) as x(id,version)
                              on (t.id = x.id and t.version = x.version)"
        (into-array ids) (into-array versions)]))
```

Bonus: Producing the SQL with https://github.com/seancorfield/honeysql[HoneySQL]:

````clojure
(honey/format
  (-> (hh/select :*)
      (hh/from [:thing :t])
      (hh/join [[:unnest
                 (into-array [\a \b \c])
                 (into-array [1 20 1])]
                [[:x :id :version]]]
               [:and [:= :t.id :x.id]
                [:= :t.version :x.version]]))
  {:quoted true})
````

## Bonus: Leverage composites for tuple matches with a subquery

A tip from my awesome colleague Fredrik RÃ¸tnes. In my case, the ids and versions come from the client app. But what if they come elsewhere from the DB? Here we can leverage composites:

```sql
SELECT * FROM thing WHERE ((id, version)) IN (SELECT DISTINCT other_id, other_version FROM other_table)
```

and in Honey:

```clojure
(honey/format
    (-> (hh/select :*)
        (hh/from :thing)
        (hh/where
          [:in
           (hh/columns :id :version)
           (-> (hh/select-distinct :other-id :other-version)
               (hh/from :other-table))])))
```
