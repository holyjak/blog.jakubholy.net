{:title "Holy Dev Newsletter Sep 2023"
 :hide-from-home? true
 :date "2023-09-30"
 :tags ["newsletter"]}

Welcome to the Holy Dev newsletter, which brings you gems I found on the web, updates from my blog, and a few scattered thoughts.
// (Also https://blog.jakubholy.net/2023/09-newsletter/[available online].)
You can get the next one into your mailbox if you link:/me/subscribe[subscribe].
// I am always eager to read your comments and ideas so do not hesitate to press the reply button!

== What is happening

As is often the case, the month didn't go as planned. But it was very productive, especially for Fulcro (see below). I planned to dig more into Rama, alas... .

For my tiny ERP, I have put in place the building blocks of the last key feature necessary for using in production, namely backups of data to a Google Sheet. This was inspired by a downtime I experienced with Fly.io's DNS that shut down access to the app for over a day. Since the ERP is supposed to be critical for manufacturing in a small company, which cannot afford big problems, it is essential that they can access their data no matter what happens to Fly.io. A frequent backup to a G. Sheet seemed a sufficient, low-cost solution. I have learned and written about https://blog.jakubholy.net/2023/accessing-google-api-from-clojure[accessing Google API with OAuth2 and a service account from Clojure] (without relying on Google SDK) and implemented a PoC of backing up key data from Datomic to a Sheet via the light-weight https://github.com/timothypratley/happygapi[happygapi] library. I still need to put in place the actual scheduled job and work on improving the feature with pushing key changes more frequently. I have also added uptime monitoring with the free plan of https://uptimerobot.com/[UptimeRobot].

I have discovered https://pagefind.app/[pagefind.app], a Rust CLI tool that can generate static JS search engine for a bunch of HTML files, and used it to finally https://github.com/holyjak/blog.jakubholy.net/commit/cc18a2c867234e5fce7b118abe6b8e475af5a28f[replace my custom Google search] for the blog.

=== The month of Fulcro

Users have prompted me to fix my https://github.com/holyjak/fulcro-intro-wshop[DIY Fulcro workshop] (which required updating dependencies for jack-in to work again in Calva), and to bring back to live https://github.com/fulcro-community/FulcroDemos[FulcroDemos] - a growing (?üôè) set of small examples, i.e. tiny Fulcro apps exploring various problems and capabilities. I have also upgraded https://github.com/holyjak/minimalist-fulcro-template-backendless[minimalist-fulcro-template-backendless], a minimalistic template for Fulcro apps with in-browser Pathom "`backend`", to the latest dependencies (https://github.com/babashka/neil[neil deps upgrade] FTW!) and to finally switch it over from Pathom 2 to Pathom 3. I have been also prompted to improve colors in and warnings from https://github.com/holyjak/fulcro-troubleshooting[fulcro-troubleshooting], a Fulcro "addon," which helps detect possible problems early, with in-app notifications.

The biggest unplanned work, and the one that gave me the most satisfaction, was making it possible to live-code Fulcro applications in your browser through the power of Michiel Borkent's SCI. You can read more about it and play with it in https://blog.jakubholy.net/2023/interactive-code-snippets-fulcro/[Include interactive Clojure/script code snippets in a web page with SCI & friends]. I believe it will be a boost to teaching and demonstrating Fulcro. Michiel has also asked me to help set up a static site with the editor and all the https://github.com/babashka/sci.configs/tree/main/src/sci/configs[libraries with SCI support]. I imagine we could hook it up with loading gists so that you could easily share editable, rendered Fulcro apps with others. I am indebted to Michiel, Tony Kay, and Thomas Heller for their invaluable help.

== Gems from the world wide web
++++
    <p><span class="link">üëì <a href="https://github.com/candera/causatum">candera/causatum: A Clojure library for
                generating streams of events based on stochastic state machines.</a> [clojure, library,
            testing]</span><br /><span>A Clojure library for generating streams of timed
            events based on stochastic state machines - i.e. like a Finite State Automaton (FSM), but each possible
            transition has a probability (and also delay, which I read as "cost ~ time to perform the transition"). The
            event-stream then gives you a stream of [current state, time counter, info about transition taken (weight,
            delay)]. You could use this e.g. to model user's behavior on a webpage. It gives you more control than randomly
            generating actions with test.check.</span><br /><span>(For test.check, there is
            also <a href="https://github.com/bsless/fsm-test-check">fsm-test-check</a>, described in the post <a
                href="http://blog.guillermowinkler.com/blog/2015/04/12/verifying-state-machine-behavior-using-test-dot-check/">Verifying
                State Machine Behavior Using test.check</a>).</span></p>
    <p><span class="link">üëì <a href="https://tree-sitter.github.io/tree-sitter/">Tree-sitterÔΩúIntroduction</a> [library,
            parsing]</span><br /><span>"Tree-sitter is a parser generator tool and an
            incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the
            syntax tree as the source file is edited." Intended, it seems, primarily for editors. Written in C++ but with
            Java and other bindings.</span></p>
    <p><span class="link">üëì <a href="https://github.com/xdrop/fuzzywuzzy">xdrop/fuzzywuzzy: Java fuzzy string matching
                implementation of the well known Python's fuzzywuzzy algorithm. Fuzzy...</a> [library, java,
            search]</span><br /><span>No dependencies fuzzy string matching for java based on
            the <a href="https://github.com/seatgeek/fuzzywuzzy">FuzzyWuzzy</a> Python algorithm, using a fast
            implementation of <a href="https://en.wikipedia.org/wiki/Levenshtein_distance">Levenshtein distance</a> to
            calculate similarity between strings. Simple to use, lightweight.</span><br /><span
           >Similar but heavier: <a
                href="http://yomguithereal.github.io/clj-fuzzy/">clj-fuzzy</a> (a native clj(s) implementation of a bunch of
            popular algorithms dealing with fuzzy strings and phonetics), <a
                href="https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/similarity/package-summary.html">org.apache.commons.text.similarity</a>.</span>
    </p>
    <p><span class="link">üëì <a href="https://rapidapi.com/">API Hub - Free Public & Open Rest APIs | Rapid</a> [SaaS,
            startup]</span><br /><span><a
                href="https://docs.rapidapi.com/docs/what-is-rapidapi#for-api-providers">API providers (such as startups)
                can leverage RapidAPI</a> to easily add auth*, billing, monitoring, test sandbox UI for users, etc. I have
            no experience with it but it could be useful to speed up building/testing you API-focused startup.</span></p>
    <p><span class="link">üëì <a href="https://github.com/carp-lang/Carp">carp-lang/Carp: A statically typed lisp, without a
                GC, for real-time applications.</a> [programming languages, learning]</span><br /><span
           >Carp - if Rust and Clojure had a baby :-) A Clojure-inspired, statically typed &
            compiled Lisp without garbage collection (but with ownership tracking instead). Interesting and already usable,
            though with a bunch of bugs. Marked as a research project and a warning not to use it for anything important
            just yet, v 0.5. Written in Haskell, started in 2016. </span></p>
    <p><span>üé• <a href="https://vimeo.com/861600197">A great talk by Christian Johansen, a Clojurist and highly experienced
                frontend dev (one time author of the üìò Test-Driven...</a></span><br /><span
           >A great talk by Christian Johansen, a Clojurist and highly experienced frontend
            dev (one time author of the üìò<a
                href="https://www.amazon.com/Test-Driven-JavaScript-Development-Developers-Library/dp/0321683919">
                Test-Driven JavaScript Developmen</a>t) about framework-agnostic best practice for building maintainable web
            applications (and a little about his<a href="https://github.com/cjohansen/portfolio"> Portfolio too</a>l). The
            main points? First, UI should be a "pure" function of data (what he calls data-driven UIs). I.e. components only
            get data from their parent - they do not fetch anything themselves with useEffect or a Re-frame subscription.
            Second, the UI is written in the language of the UI and does not use any domain terms - the incoming domain data
            passes first through a pure prepare function, which translates them into the UI domain. E.g. you don't have
            FacilitySelector with meter-name and street, but a Dropdown with a title and details - which you can reuse for
            displaying highly different kinds of data. The argument is that a frontend dev is in the domain of building UIs
            and not in the business domain of e.g. providing electricity to end consumers. And I trust Christian's
            experience on this point.</span></p>
    <p><span class="link">üëì <a href="https://www.teamten.com/lawrence/writings/norris-numbers.html">Norris Numbers</a>
            [opinion, productivity, software development]</span><br /><span>A great post,
            posing the hypothesis that applications at different scale (LoC) need (radically) different approaches to write.
            With a particular approach, you will eventually hit a wall of how much complexity you can manage - e.g. ¬± 2000,
            20k, 200k, ... . Just as running will eventually plateau and require you to switch to a car, then a plane, ... .
        </span><br /><span>
            <div class="indented" style="padding-left: 1em">What‚Äôs the key to breaking past that [the 20k limit]? For me, it
                was keeping things simple. Absolutely refuse to add any feature or line of code unless you need it <em>right
                    now</em>, and need it <em>badly</em>. I already touched on this in <a
                    href="https://www.teamten.com/lawrence/writings/every_line_is_a_potential_bug.html">Every Line Is a
                    Potential Bug</a> (and sophomorically before that in <a
                    href="https://www.teamten.com/lawrence/writings/plan03.html">Simple is Good</a>). </div>
        </span><br /><span>And (highlight mine):</span><br /><span
           >
            <div class="indented" style="padding-left: 1em">The real trick is knowing when a new feature adds <strong>linear
                    complexity</strong> (its own weight only) or <strong>geometric complexity</strong> (interacts with other
                features). Both should be avoided, but the latter requires extra-convincing justification.</div>
        </span><br /><span>The author also points out it is difficult to justify the 20k/200k
            techniques to somebody who has not experienced so large code bases, because they only make sense at
            scale.</span></p>
    <p><span class="link">üëì <a href="https://kitemaker.co/">Kitemaker</a> [SaaS, project management]</span><br /><span
           >"End-to-end product development from user feedback to shipping things people
            want." A new SaaS tool for managing project work. Contrary to Jira, it aims for the whole lifecycle, from
            specifying what to do, through individual work items, to user feedback. Having that in a single, integrated tool
            is attractive. I haven't tried it but would like to.</span></p>
    <p><span class="link">üëì <a href="https://www.tamizhvendan.in/blog/announcing-honeyeql-1.0/">Announcing HoneyEQL 1.0 -
                Tamizhvendan</a> [clojure, library, database] - <q>HoneyEQL is a Clojure library that enables you to query
                the database declaratively using the EDN Query Language(EQL). It aims to simplify th</q></span><br /><span
           >This library looks interesting for when you use a RDBMS with next.jdbc and use
            joins to fetch an entity with sub-entities. With HoneyEQL, you specify an <a
                href="https://github.com/edn-query-language/">EQL</a> query such as¬†<code>[:presentation/title
            {:presentation/slides [:slide/title ...]}}</code>¬†and HoneyEQL will generate the correct SQL with joins and then
            post-process the with group-by or something to turn the tables back to the tree you actually want:
            <code>{:presentation/title "Clj Rocks", :presentation/slides [{:slide/title "Into"},{:slide/title
            "Conclusion"}]}</code>.</span></p>
    <p><span>
            <blockquote>I work in gaming, so I cannot speak to your specific experiences. Entity Component Systems are
                extremely performant, really good science, and shipping in middlewares like Unity. However, in order to ship
                an ECS game, in my experience, you have to have already made your whole game first in a normal approach, in
                order to have everything be fully specified sufficiently that you can correctly create an ECS
                implementation. In practice, this means ECS is used to make first person shooters, which have decades of
                well specified traditions and behavior, and V2 of simulators, like for Cities Skylines 2 and Two Point
                Campus.
                - <a href="https://news.ycombinator.com/item?id=37140272">doctorpangloss at Hacker News</a></blockquote>
        </span><br /><span>I have heard about ECS before, and it is interesting to hear that
            you actually need to already have designed the game correctly to know how to re+design it with ECS, that you
            can't do ECS from scratch.</span></p>
    <p><span class="link">üëì <a href="https://cjohansen.no/stateless-data-driven-uis/">Stateless, data-driven UIs</a>
            [opinion, webdev, productivity]</span><br /><span>The article <em>Stateless,
                data-driven UIs</em> explores how to deal with the complexity of frontend development by separating UI from
            state management and event handling. Christian uses simple, generic components, and all the state management
            logic is in a pure, testable function. Event handling is also described with data, and thus testable. ‚ù§Ô∏è</span>
    </p>
    <p><span class="link">üëì <a href="https://polylith.gitbook.io/polylith/introduction/polylith-in-a-nutshell">Polylith in
                a Nutshell - Polylith</a> [clojure, tool, architecture]</span><br /><span>A
            new and great introduction page for Polylith. Just remember that "software architecture" in this context refers
            to how your code is structured into modules (which differs from how it is deployed). Polylith is an approach +
            tooling for structuring your code into small, separate modules that can easily use each other, and be combined
            in somewhat arbitrary ways to produce deployable artifacts. </span></p>
    <p><span class="link">üëì <a href="https://svelte.dev/blog/runes">Introducing runes</a> [webdev, framework,
            javascript]</span><br /><span>Interesting development in upcoming Svelte 5,
            introducing "<em>runes</em>, which unlock <em>universal, fine-grained reactivity</em>." Universal = not limited
            to .svelte files, more explicit (with $state(val) rather then (only) top-level let ...) and thus easier to
            control and understand, extending from compile-time detection of dependencies to also runtime. With the pre-5
            approach "<em>[..] code is hard to refactor, and understanding the intricacies of when Svelte chooses to update
                which values can become rather tricky beyond a certain level of complexity.</em>" All this is, under the
            hood, based on <a href="https://dev.to/this-is-learning/the-evolution-of-signals-in-javascript-8ob">Signals</a>,
            used e.g. by Knockout since 2010, and more recently <a href="https://www.youtube.com/watch?v=hw3Bx5vxKl0">by
                Solid</a>. Reportedly, "<em>Signals unlock fine-grained reactivity, meaning that (for example) changes to a
                value inside a large list needn't invalidate all the other members of the list.</em>"</span><br /><span
           >Reading the list of syntax/features that becomes obsolete with runes, it sounds
            as a great simplification. And once again shows that explicit is better than unreliably
            magical.</span><br /><span>There is also a 12 min <a
                href="https://youtu.be/RVnxF3j3N8U">intro video</a>, if you prefer.</span></p>
    <p><span class="link">üëì <a href="https://orbstack.dev/blog/orbstack-1.0">OrbStack 1.0: Fast, light, easy way to run
                Docker containers and Linux</a> [productivity, devops, tool]</span><br /><span
           >OrbStack 1 is here! This is great, although paid for commercial use ($8/month),
            replacement for Docker Desktop. We run our dev stack (some 8-10 containers) via Docker, and it used to eat quite
            a bug chunk of my CPU regularly, under Docker Desktop. Since I switched to OrbStack few months back, I had not
            noticed any such issues. It brands itself as "<em>the fast, light, and easy way to run Docker containers and
                Linux. Develop at lightspeed with our Docker Desktop alternative.</em>" You can read more on its <a
                href="https://docs.orbstack.dev/">what/ why page</a>. And it can also run Kubernetes, though I haven't tried
            that.</span></p>
    <p><span class="link">üëì <a href="https://pagefind.app/">Pagefind | Pagefind ‚Äî Static low-bandwidth search at scale</a>
            [tool, authoring]</span><br /><span>Pagefind is a single binary you run on your
            HTML files to produce an index and add a JS + CSS file, which enable you to search the content. I have used it
            <a href="https://blog.jakubholy.net/search/">on my blog's search</a> to replace Custom Google search, with its
            ads. <a href="https://pagefind.app/docs/">Pagefind is trivial to use</a> - you can just npx -y pagefind --site
            <your htmls> and a<a href="https://pagefind.app/docs/ui-usage/">dd their built-in search</a> UI to any page with
                a few lines of code. Or build your own UI with the JS API. Remember, all this is static, and the search runs
                fully in the browser. Pagefind is reportedly efficient and can search even large sites, downloading chunks
                of the index as needed. You can ev<a href="https://pagefind.app/docs/indexing/">en influence the
                    index</a>ing with few data- attributes, or they full control with their JS indexing API. You can check
                out the f<a
                    href="https://github.com/holyjak/blog.jakubholy.net/commit/cc18a2c867234e5fce7b118abe6b8e475af5a28f">ew
                    changes I had to do to adopt Pagef</a>ind. <a href="https://blog.jakubholy.net/search/">Or go to my
                    sea</a>rch and type e.g. "fulcro". (And of course it is written in Rust! It indexed my 575 pages / 25303
                words in ¬± 5s.)</span></p>
    <p><span class="link">üëì <a href="https://beta.tauri.app/blog/roadmap-to-tauri-2-0/">Roadmap to Tauri 2.0</a> [library,
            GUI, Rust, javascript]</span><br /><span><a href="https://tauri.app/">Tauri</a>
            is the attractive, secure-by-default and far more efficient alternative to <a
                href="https://www.electronjs.org/">Electron</a> for building cross-OS desktop apps. The key difference is
            that Tauri leverages OS's native WebView instead of bundling Chromium and Node, and its focus on security. You
            might want to check out this <a
                href="https://blog.logrocket.com/tauri-electron-comparison-migration-guide/">Electron vs Tauri
                comparison</a>. The upcoming v2 brings support for creating also mobile apps, much more powerful plugin
            system (dogfooding FTW!), and support for Swift and Kotlin plugins.</span></p>
    <p><span class="link">üëì <a href="https://corrode.dev/blog/async/">The State of Async Rust: Runtimes</a> [rust,
            criticism]</span><br /><span>An insightful article about the state of async in
            Rust, warts and all. Key point: Async is hard, especially multi-threaded, only use it if truly necessary. Often,
            multithreading without async has much better cost/benefit ratio. My highlights:</span><br /><span
           >Tokio is the absolutely most used async runtime. Async-std, the would-be async
            replacement for stdio, is effectively abandoned. But Tokio is much more than a runtime, with its extra modules
            for fs, io, net, etc. That makes it more of a framework for asynchronous programming than just a runtime. The
            author's main concern with Tokio is that it makes a lot of assumptions about how async code should be written
            and where it runs. Quote:</span><br /><span>
            <blocquote>The Original Sin of Rust async programming is making it multi-threaded by default. If premature
                optimization is the root of all evil, this is the mother of all premature optimizations, and it curses all
                your code with the unholy Send + 'static, or worse yet Send + Sync + 'static, which just kills all the joy
                of actually writing Rust.
                ‚Äî Maciej Hirsz</blocquote>
        </span><br /><span>Multi-threaded also means you need Arc / Mute for most state. The
            choice to use Arc or Mutex might be indicative of a design that hasn't fully embraced the ownership and
            borrowing principles that Rust emphasizes. It's worth reconsidering if the shared state is genuinely necessary
            or if there's an alternative design that could minimize or eliminate the need for shared mutable
            state.</span><br /><span>Going beyond Tokio, several other runtimes deserve more
            attention. These runtimes are important, as they explore alternative paths or open up new use cases for async
            Rust:</span>
    <ul>
        <li>smol: A small async runtime, which is easy to understand. </li>
        <li>embassy: An async runtime for embedded systems.</li>
        <li>glommio: An async runtime for I/O-bound workloads, built on top of io_uring and using a thread-per-core model.
        </li>
    </ul><span>Modern operating systems come with highly optimized schedulers that are
        excellent at multitasking and support async I/O through io_uring and splice. We should make better use of these
        capabilities.</span><br /><span>Async Rust might be more memory-efficient than
        threads, at the cost of complexity and worse ergonomics. (In a recent benchmark, async Rust was 2x faster than
        threads, but the absolute difference was only 10ms per request.)</span><br /><span
       >Thread-based frameworks, like the now-inactive iron, showcased the capability to
        effortlessly handle tens of thousands of requests per second. This is further complemented by the fact modern Linux
        systems can manage tens of thousands of threads.</span></p>
    <p><span class="link">üëì <a href="https://swatinem.de/blog/optimized-strings/">Choosing a more optimal `String` type</a>
            [rust, performance, experience]</span><br /><span>Intriguing post from a Sentry
            Rust SDK maintainer, exploring alternatives to String, that have performance characteristics better suited to
            their use case, i.e.: immutable, copied often, small, Option-al, etc. There is a bunch of alternatives to choose
            from, such as Arc<str> and smol_str. The author concludes that there is no free lunch, but <a
                    href="https://crates.io/crates/smol_str">smol_str</a> with its O(1) clone, small string optimization,
                wrapping in Option adding nothing to its size, and its heavy use in rust-analyzer seems to be the best
                candidate for them.</span><br /><span>A liked another observation
            there:</span><br /><span>
            <div class="indented" style="padding-left: 1em">[..] but all other protocol types have way too detailed typing,
                and are not extensible on the other hand. In a ton of situations we might be better served with just having
                the option to manually add arbitrary JSON properties.</div>
        </span><br /><span>I.e. types are more of an obstacle than help, and an open,
            extensible system is preferable when user-controlled data flows through your system (which doesn't care about
            their details). Something Clojure has been advocating for on a more general level.</span></p>
    <p><span>üé• <a href="https://www.youtube.com/watch?v=NccnidiRknA">A good 30 min overview of key developments in Java
                since v7, starting with syntax improvements (try with resources, var with...</a></span><br /><span
           >A good 30 min overview of key developments in Java since v7 (<a href="https://www.juxt.pro/slides/jms-modern-java-20230712.pdf">slides</a>), starting with syntax
            improvements (try with resources, var with derived type, records, sealed interfaces [i.e. only fixed number
            impls], switch as an expression - possibly on records, etc.) and concluding with virtual threads, <a
                href="https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/">problems
                with go-like concurrency</a> (which also applies to core.async) and avoiding them with "<a
                href="https://docs.oracle.com/en/java/javase/21/core/structured-concurrency.html#GUID-AA992944-AABA-4CBC-8039-DE5E17DE86DB">structured
                concurrency</a>". </span></p>
    <p><span><strong>Handle conflicting files when uberjar-ing in
                Leiningen</strong><br /></span><br /><span>Context: Groovy libraries may
            include /META-INF/groovy/org.codehaus.groovy.runtime.ExtensionModule to register some extensions to install into
            JDK. If you uberjar multiple such libraries, you will end up with just a single one of these (last wins). In our
            case, this is not acceptable and we want to filter out one we don't care about, and fail if there are still
            multiple. We use Leiningen, and (mis)use its :uberjar-merge-with for this. It takes a map of file pattern ->
            [fn1: stream->X, fn2: X+X->X, fn3: stream, X -> void].</span><br />
            <pre><code>
:uberjar-merge-with
{#"^META-INF/groovy/org\.codehaus\.groovy\.runtime\.ExtensionModule$"
 [slurp
  concat
  (fn [out contents]
    (if (> (count contents) 1)
      (throw (ex-info "More than 1 groovy extensions in uberjar! (see :uberjar-merge-with in project.clj)"
                      {:cnt (count contents)
                       :modules (mapv #(first (clojure.string/split-lines %)) contents)}))
      (spit out (first contents))))]}
            </code></pre><br /><span>I hope to never need this again.</span></p>
    <p><span class="link">üëì <a href="https://mswjs.io/">Mock Service Worker</a> [library, testing,
            javascript]</span><br /><span>We use this at work in frontend tests, to mock the
            REST backend. The nice thing is that it intercepts requests on the network level, so it doesn't care about which
            library or API you use to issue http requests.</span></p>
    <p><span class="link">üëì <a href="https://github.com/anteoas/broch">anteoas/broch: A library for handling numbers with
                units.</a> [clojure, library]</span><br /><span>A library for handling
            numbers with units - conversion between compatible units, comparison and arithmetic, data literals. Ex: (b/>
            #broch/quantity[1 "km"] (b/meters 999)) ;=> true</span></p>
    <p><span class="link">üëì <a href="https://biffweb.com/p/understanding-htmx/">Understanding htmx</a> [webdev, opinion,
            productivity, architecture]</span><br /><span>Intro to HTMX, why Biff uses it,
            when it is not suitable (lot of complex state as in Google Sheets or superfast response, as in G.
            Maps).</span><br /><span>Thomas Heller in <a
                href="https://code.thheller.com/blog/shadow-cljs/2023/07/13/the-lost-arts-of-cljs-frontend.html">his
                critique of HTMX</a> argues (I believe) that you can relatively easily roll your own htmx, thus gaining full
            control and making sure it will 100% fit your unique needs, while with HTMX you will run into the design walls,
            since it is made for general use, without knowledge of your needs. <a
                href="https://www.reddit.com/r/Clojure/comments/14ykgqk/comment/jrt97ln/?rdt=38435">Jacob and Thomas have a
                discussion about it here</a>, where Thomas asserts that the flexibility of your own solution is worth the
            trade-offs (mentioning "HTMX itself seems a bit too limited for most stuff I do, which often involves some more
            interactivity than HTMX is capable of."). Jacob reasonably proposes that htmx is superior for people who are
            still getting up to speed with Clojure web dev and aren't already familiar with CLJS / JS. Though Thomas objects
            that learning htmx + likely hyperscript is nontrivial, and it is better to spend the time to learn cljs + DOM
            properly. In Jacob's own apps, he did not run into htmx's limitations (and uses <a
                href="https://hyperscript.org/">Hyperscript</a> to get more interactivity where needed.) You might also want
            to check out htmx's own <a href="https://htmx.org/essays/when-to-use-hypermedia/">When Should You [not] Use
                Hypermedia?</a> (meaning htmx).</span></p>
    <p><span class="link">üëì <a href="https://phronmophobic.github.io/llama.clj/notebooks/intro.html">Intro to Running LLMs
                Locally</a> [learning, llm, ai]</span><br /><span>What, how, and why of
            running LLMs (Large Language Models - think ChatGPT & friends) locally, from Clojure. Reportedly, many models
            are available to download and run locally even with modest hardware. <em>Conclusion</em>: LLMs really only have
            one basic operation (~ given a seq of tokens, predict probabilities of tokens coming next) which makes them easy
            to learn and easy to use. Having direct access to LLMs provides flexibility in cost, capability, and
            usage.</span><br /><span>I only skimmed the article, it seems as something useful
            to have in hand for when I need it. </span></p>
++++

+++--+++

Thank you for reading!

// This newsletter is produced by Jakub Hol√Ω, a blogger and programming buddy / mentor for hire.
// If you don't want to receive it anymore, simple respond with "unsubscribe" in the subject
