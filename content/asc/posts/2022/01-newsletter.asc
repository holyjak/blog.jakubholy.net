{:title "Holy Dev Newsletter January 2022"
 :hide-from-home? true
 :date "2022-01-31"
 :tags ["newsletter"]}

Welcome to the very first issue of Holy Dev newsletter, which brings you gems I found on the web, updates from my blog, and a few scattered thoughts. You can get the next one into your mailbox if you link:/me/subscribe[subscribe].

What's going on: Two years ago I finished https://blog.jakubholy.net/2020/my-first-month-of-rust/[my first month of Rust] and now I am finally getting back to studying it, while also learning about security and hacking via the https://academy.kerkour.com/black-hat-rust[Black Hat Rust book]. I am enamored with Clojure yet I find it worthwile learning a language in a way opposite to it, regarding typing and low-level resource control, one applicable in domains where Clojure is not.

== Fulcro
I have started thinking about https://github.com/fulcro-community/guides/pull/10/files[how to help people model their domain with data entities and Fulcro components] but am somewhat stuck. If you know what folks struggle with, please let me know!

I am also considering doing "Fulcro Office Hour" once a month, where anyone can join and get help with their problems and questions. Either on a first comes, first served basis or using something like the http://leancoffee.org/[lean coffee] format. What do you think about that?

== Gems from the world wide web
++++
<p><span class="link">ðŸ‘“ <a href="https://www.gigsky.com/">GigSky - Simply, Mobile Data. Anywhere.</a> [app, mobile, travel]</span><br /><span style="white-space: pre-line;">Â GigSky app lets you grab a single data plan where and when you want â€“ at home or in any of our 190+ destinations. Select a plan from the app, download an eSIM, and youâ€™ll connect on the spot, no physical SIM card required.</span></p><p><span class="link">ðŸ‘“ <a href="https://avdi.codes/the-banana-stand/">Thereâ€™s Always Money in the Banana Stand - avdi.codes</a> [business]</span><br /><span style="white-space: pre-line;">Tips for running a teaching side-business as a software developer (series). On the importance of a "mailing list" of people interested in you, your opinions and creations, and how to build it eg. via a newsletter. </span></p><p><span class="link">ðŸ‘“ <a href="https://github.com/lilactown/cascade">lilactown/cascade: A library of continuation-passing, thunk-producing versions of many Clojure core functions.</a> [clojure, library, data processing]</span><br /><span style="white-space: pre-line;">Allow essentially unbounded recursion and mutual recursion of seq operations => write recursive algorithms that work on very nested data structures in Clojure(Script) using familiar operations.</span><br /><span style="white-space: pre-line;">Core provides the seq operations reduce, transduce, into, and common transducer-producing fns and other non-seq ones.</span><br /><span style="white-space: pre-line;">Hike is like clojure.walk, but defines walk in a way that supports walking very large, nested data structures without using the call stack.</span></p><p><span class="link">ðŸ‘“ <a href="https://github.com/atomisthq/jibbit">atomisthq/jibbit: Dockerless Clojure Image builds using deps.edn</a> [clojure, tool, docker, devops]</span><br /><span style="white-space: pre-line;">A <a href="https://clojure.org/reference/deps_and_cli#_using_named_tools">clj Tool</a> for building (Docker-compatible) containers (without using Docker) using jib from deps.edn-based projects, with dependencies in a separate layer. (Referring to those via Class-Path entry in Manifest.mf of the main .jar.)
Uses gcr.io/distroless/java by default.
</span></p><p><span class="link">ðŸ‘“ <a href="https://github.com/babashka/obb">babashka/obb: Ad-hoc ClojureScript scripting of Mac applications via Apple's Open Scripting Architecture.</a> [tool, automation, macos]</span><br /><span style="white-space: pre-line;">Script MacOS applications using ClojureScript. Example:</span><br /><span style="white-space: pre-line;">$ obb -e '(-> (js/Application "Safari") (.-documents) (aget 0) (.url))'
https://clojure.org/</span></p><p><span class="link">ðŸ‘“ <a href="https://lukas-domagala.de/blog/clojure-analysis-and-introspection.html">Clojure analysis and introspection</a> [clojure, deep dive, internals]</span><br /><span style="white-space: pre-line;">Finding out what functions a function calls via a static analysis or runtime magic. Some deep insights into the Clojure compiler and classloading. Not something you normally need, unless you are a tool author, but fascinating nonetheless.</span><br /><span style="white-space: pre-line;">It leverages the fact that a function is compiled into a class and has public static fields holding Vars of the functions it calls (excluding inlined fn calls and from within lambdas). To discover fns called from lambdas, and leverages the fact that lambdas are also compiled into classes whose name contains the parent function and searches the clojure Compiler's internal cache for classes (= fns) matching that pattern.</span></p><p><span class="link">ðŸ‘“ <a href="https://sirre.al/2021/02/12/volta-vs-nvm-for-managing-javascript-tooling/">Volta vs. nvm for JavaScript tooling</a> [javascript, tool] - <q>I work on several JavaScript projects that use nvm (Node Version Manager) for managing Node.js versions. Iâ€™ve recently started using Volta t</q></span><br /><span style="white-space: pre-line;">Why <a href="https://volta.sh/">Volta.sh</a> might be better than nvm for managing NodeJS versions. Key points: 1) It automatically switches to the correct Node version, as pinned in package.json; 2) It auto-installs the version, if missing; 3) uses project-local tool over a global one and pins global tool node version to the one it was installed with; 4) has support for typescript's tsc and likely more.</span><br /><span style="white-space: pre-line;">It works by installing shims for node, nvm etc. that check for and call the actual tool with the correct version</span></p><p><span class="link">ðŸ‘“ <a href="https://exploringjs.com/impatient-js/ch_new-javascript-features.html#new-in-es2022">New JavaScript features 2016-2022 â€¢ JavaScript for impatient programmers (ES2022 edition)</a> [javascript, learning]</span></p><p><span class="link">ðŸ‘“ <a href="https://fasterthanli.me/series/dont-shell-out/part-1">Truly headless draw.io exports</a> [blogging, tool, rust]</span><br /><span style="white-space: pre-line;">An interesting story, with tips for converting a PNG to webp and other great formats and draw.io to svg via pdf. Ends up running the draw.io JS library in a headless Chrome for export to PDF and converts that to svg via Inkscape/Poppler, the whole process controlled from Rust. (The detour through pdf is to ensure samme display on desktop, browser and to convert custom font to text paths to preserve it.)</span><br /><span style="white-space: pre-line;">A tool tip: svgo to optimizer svg size.</span></p><p><span class="link">ðŸ‘“ <a href="https://github.com/mozilla/DeepSpeech">mozilla/DeepSpeech: open source speech-to-text engine</a> [tool, AI, speach] - <q>DeepSpeech is an open source embedded (offline, on-device) speech-to-text engine which can run in real time on devices ranging from a Raspbe</q></span><br /><span style="white-space: pre-line;">DeepSpeech is an open source embedded (offline, on-device) speech-to-text engine which can run in real time on devices ranging from a Raspberry Pi 4 to high power GPU servers.</span></p><p><span class="link">ðŸ‘“ <a href="https://landscape.cncf.io/">CNCF Cloud Native Interactive Landscape</a> [cloud, devops]</span><br /><span style="white-space: pre-line;">An overview of CNCF projects, libraries, tools. </span></p><p><span class="link">ðŸ‘“ <a href="https://github.com/ieugen/calcite-clj">ieugen/calcite-clj: Calcite Clojure wrapper / integration</a> [clojure, library, data]</span><br /><span style="white-space: pre-line;">Small library to facilitate the implementation of calcite adapters in clojure.</span><br /><span style="white-space: pre-line;">Calcite allows you to expose any structured data as a SQL table and use SQL to query that data (relational algebra).</span></p><p><span class="link">ðŸ‘“ <a href="https://www.jooq.org/sakila">The Sakila Database</a> [database, test]</span><br /><span style="white-space: pre-line;">One of the best example databases out there is the <a href="https://dev.mysql.com/doc/sakila/en/">Sakila Database</a>, which was originally created by MySQL and has been open sourced under the terms of the <a href="https://opensource.org/licenses/bsd-license.php">BSD License</a>.</span></p><p><span class="link">ðŸ‘“ <a href="https://github.com/exoscale/lingo">exoscale/lingo: spec explain improved</a> [clojure, library]</span><br /><span style="white-space: pre-line;">User-friendly messages for Spec errors. Similar to Expound but more data-oriented, centered around explain-data, and with support for parameterized error messages / custom display of failed predicates. </span></p><p><span class="link">ðŸ‘“ <a href="https://github.com/engineerd/wasm-to-oci">engineerd/wasm-to-oci: Use OCI registries to distribute Wasm modules</a> [wasm, devops]</span><br /><span style="white-space: pre-line;">Distributed .wasm binaries via OCI registries  (normally used for Docker images) such as Google Container Registry or GitHub Package Registry. (Obviously the OCI spec allows publishing different kind of artifacts, not just OCI images.)</span><br /><span style="white-space: pre-line;">(Source: <a href="https://www.youtube.com/watch?v=o6qe4lw9-8c">Rust Linz, November 2021 - WebAssembly beyond the browse</a>r by Thorsten Hans.)</span></p><p><span class="link">ðŸ‘“ <a href="https://www.warp.dev/">Warpâ€”The blazingly fast, Rust-based terminal</a> [productivity, shell]</span><br /><span style="white-space: pre-line;">Warp is an interesting modern terminal (currently in closed beta) with features such as a command palette (popular from VS Code) making any action findable, visual menus for history and autocompletion (including docstring display <3), offering a more full-fledged editor including multiple cursors and the ability to move up "blocks" (command + its output) and performing operations on them. I appreciate somebody building a terminal for the 21st century.</span><br /><span style="white-space: pre-line;">(Source: <a href="https://www.youtube.com/watch?v=o6qe4lw9-8c">Rust Linz, November 2021 - WebAssembly beyond the browse</a>r by Thorsten Hans.)</span></p><p><span class="link">ðŸ‘“ <a href="https://www.nytimes.com/wirecutter/blog/how-to-disposable-email-phone-numbers-credit-cards/">How a Burner Identity Protects Your Inbox, Phone, and Cards | Wirecutter</a> [privacy]</span><br /><span style="white-space: pre-line;">Get an alternative or one-off email address, phone number, or credit card. A good overview of available services, apps, and their prices. </span></p><p><span class="link">ðŸ‘“ <a href="https://github.com/wagoodman/dive">wagoodman/dive: A tool for exploring each layer in a docker image</a> [devops, tool, docker]</span><br /><span style="white-space: pre-line;">See each Docker image layer, its size, what has changed, and an estimate of efficiency / wastefulness. </span></p><p><span class="link">ðŸ‘“ <a href="https://github.com/hlship/test-pipeline">hlship/test-pipeline: Break tests into reusable, composable steps</a> [clojure, library, testing]</span><br /><span style="white-space: pre-line;">A neat little library to simplify / beautify setup-heavy tests such as when you test your api layer and need to set up a Component system, fake authorisation etc. Makes it possible to replace nesting with a nice sequence of steps. </span></p><p><span class="link">ðŸ‘“ <a href="https://github.com/markus-wa/cq">markus-wa/cq: Clojure Command-line Data Processor for JSON, YAML, EDN, XML and more</a> [clojure, tool, shell]</span><br /><span style="white-space: pre-line;">CLI to query and transform data in many formats with Clojure and a few useful libraries such as Specter and Medley. Currently supports EDN, YAML, JSON, XML, MsgPack, CSV, Transit, Text. Packs a number of useful reader macros and syntax conveniences that simplify writing transformation pipelines on the command line without paredit. </span></p><p><span class="link">ðŸ‘“ <a href="https://openjdk.java.net/jeps/358">JEP 358: Helpful NullPointerExceptions</a> [java, productivity]</span><br /><span style="white-space: pre-line;">Since OpenJDK 14 you can set -XX:+ShowCodeDetailsInExceptionMessages for NullPointerException to show which variable was null.</span></p><p><span class="link">ðŸ‘“ <a href="https://platform.uno/blog/the-state-of-webassembly-2021-and-2022/">The State of WebAssembly â€“ 2021 and 2022</a> [wasm]</span><br /><span style="white-space: pre-line;">Over the past year we saw several WebAssembly features that can be used to improve performance like the SharedArrayBuffer for use with WebAssembly threads, Fixed-Width SIMD, and exception handling. WebAssembly support was improved in .NET 6 and both .NET and the Uno Platform added AOT performance improvements.</span><br /><span style="white-space: pre-line;">Hoped for in 2022: Tail Call optimisation, multiple memory blocks for a thread, progress on WASI and the Component Model. </span></p><p><span class="link">ðŸ‘“ <a href="https://web.dev/fugu-status/">Project Fugu - Web/native APIs - New capabilities status</a> [webdev, native]</span><br /><span style="white-space: pre-line;">TheÂ capabilities projectÂ is a cross-company effort with the objective of making it possible for web apps to do anything iOS/Android/desktop apps can, by exposing the capabilities of these platforms to the web platform, while maintaining user security, privacy, trust, and other core tenets of the web.</span></p><p><span class="link">ðŸ‘“ <a href="https://www.visidata.org/">Open-source data multitool | VisiData</a> [tool, terminal, data science]</span><br /><span style="white-space: pre-line;">"VisiData is an interactive multitool for tabular data. It combines the  clarity of a spreadsheet, the efficiency of the terminal, and the power  of Python, into a lightweight utility which can handle millions of rows  with ease."</span><br /><span style="white-space: pre-line;">Reportedly a quick and powerful way to explore and summarize even largish CSV, Excel and other data sets quickly and/or convert them to HTML/JSON/Markdwon/.... A <a href="https://jsvine.github.io/intro-to-visidata/">nice tutorial</a> by Jeremy S.-V.</span></p><p><span class="link">ðŸ‘“ <a href="https://www.data-is-plural.com/">Data Is Plural</a> [data science]</span><br /><span style="white-space: pre-line;">A weekly newsletter and an archive of useful/curious datasets. Useful if you need some data to play with :)</span><br /><span style="white-space: pre-line;">Examples: Local mortality and the 1918 pandemic, SARS-CoV-2 in local sewage, Europeâ€™s primary forests.</span></p><p><span class="link">ðŸ‘“ <a href="https://radekmie.github.io/blog/on-rust-in-webdev/">On Rust in Webdev Â· @radekmieâ€™s take on IT and stuff</a> [rust, opinion]</span><br /><span style="white-space: pre-line;">A good case for Rust. Short, well written. Despite the title, I don't feel it is all that web - specific.</span><br /><span style="white-space: pre-line;">Pros include but are not limited to : Great rolling - built in package management, build, tests, docs. </span><br /><span style="white-space: pre-line;">"I do like functional programming and everything that is common in these languages â€“Â algebraic data typesÂ (withÂ pattern matching),Â implicit returns,Â ifÂ expressionsÂ (plusÂ if letÂ andÂ while let), usingÂ OptionsÂ instead ofÂ nulls, andÂ ResultÂ instead ofÂ throw/catch. I find it easier to read and understand. Rust is an imperative language, but it reads like a functional one (mostly). If we combine it with the beforementioned tooling, excellent packages, and active development, we have everything that is needed for a perfect language. Additionally, the fact that we may useÂ macrosÂ to extend the language pushes the boundaries even further."</span><br /><span style="white-space: pre-line;">Retorted there is  75k Rust packages (compared to Python's 400k).</span></p><p><span style="white-space: pre-line;"><strong>Rust Quote of the Week</strong></span><br /><span style="white-space: pre-line;">Rust : We have a race condition bug in our standard filesystem library !</span><br /><span style="white-space: pre-line;">C++ : You guys have a concurrency safe standard filesystem library ?</span><br /><span style="white-space: pre-line;">C : You guys have a standard filesystem library ?</span><br /><span style="white-space: pre-line;">â€“Â <a href="https://np.reddit.com/r/cpp/comments/s8ok0h/possible_toctou_vulnerabilities_in">redditmodsareshits on /r/cpp</a></span></p><p><span class="link">ðŸ‘“ <a href="https://www.joelonsoftware.com/2022/01/27/making-the-web-better-with-blocks/">Making the web better. With blocks! â€“ Joel on Software</a> [webdev, standard, content] - <q>Youâ€™ve probably seen web editors based on the idea of blocks. Iâ€™m typing this in WordPress, which has a little + button that brings up a lon</q></span><br /><span style="white-space: pre-line;">Introducing the Block Protocol. All WYSIWYG editors for structured documents based on blocks (such as Heading, Paragraph, Table,...) that will implement it will be able to use the same blocks and thus have a richer selection. Block authors can create a new kind of block and get it working with all editors, and publish these in a global registry the Block Hub. Early stage.</span></p>
++++

+++--+++

Thank you for reading!
