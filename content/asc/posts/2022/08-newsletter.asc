{:title "Holy Dev Newsletter August 2022"
 :hide-from-home? true
 :date "2022-08-31"
 :tags ["newsletter"]}

Welcome to the Holy Dev newsletter, which brings you gems I found on the web, updates from my blog, and a few scattered thoughts. You can get the next one into your mailbox if you link:/me/subscribe[subscribe].

== What is happening
I spent most of August with my family and off computer, which was awesome. Obviously it made me eager to get back to coding so when I was asked to organize our summer pictures, I did what every sensible person would and have started writing my own image organizer gui. In Rust, a language I barely know. Of course not a single picture has been organized yet 😅. But after a few years of dabbling in Rust, I will perhaps finally learn it. And I might even end up with a tool that won't frustrate me to infinity when doing my picture duties.
Why Rust? Because performance is crucial here. I want to have thumbnails of sufficient size, I want to be able to browse quickly through hundreds of pictures, and I want to see them in max size without waiting forever. You can keep an eye on my (mis)adventures at https://github.com/holyjak/img-mg

== Gems from the world wide web
++++
<p><span style="white-space: pre-line;"><strong><a href="https://hub.docker.com/r/loomchild/volume-backup">loomchild/volume-backup</a> - docker volume backup & restore utility</strong><br /></span><br /><span style="white-space: pre-line;">Ex.: docker run -v some_volume:/volume --rm --log-driver none loomchild/volume-backup backup - > my-backup.tar.bz2</span><br /><span style="white-space: pre-line;">and</span><br /><span style="white-space: pre-line;">cat my-backup.tar.bz2 | docker run -i -v some_volume:/volume --rm loomchild/volume-backup restore -</span></p><p><span class="link">👓 <a href="https://github.com/lambdaisland/facai">lambdaisland/facai: Factories for fun and profit. 恭喜發財！</a> [clojure, library, documentation]</span><br /><span style="white-space: pre-line;">A unique library for generating realistic, human-friendly random(ish) data. These are great for your API examples or use in the REPL. It is also great for creating realistic data for example-based tests while only specifying the parts relevant for the test. While test.check tries to generate the weirdest possible data, these try to be normal and nice.</span><br /><span style="white-space: pre-line;">A key concept is a factory, which will produce a map, whose values can be static, generated by functions, or calling other factories. They also support "traits" or variants (such as published/unpublished and future/past article). Can be profitably combined with <a href="https://github.com/lambdaisland/faker">lambdaisland/faker</a> for generating nice values (names, emails, ...). Facai comes with a number of helpers such as `numbered` or `days-ago`.</span><br /><span style="white-space: pre-line;">Other useful features:</span><ul><li>Use selectors + rules to set deeply nested values when invoking a factory (useful for tests)</li><li>Unification - make sure that particular entity/value is the same in the whole generated tree</li><li>:after-build hook on a factory can modify the value being build</li><li>Database integration (currently next-jdbc, Datomic peer) - create a fn that generates data and persists it in the given (test) db (possibly enriching it based on the result, such as with db-generated IDs)</li></ul></p><p><span class="link">👓 <a href="https://git-scm.com/book/en/v2/Git-Tools-Rerere">Git - Rerere</a> [tool, productivity, git]</span><br /><span style="white-space: pre-line;">Tired of fixing the same merge conflict repeatedly during rebasing multiple commits? git config --global rerere.enabled to the rescue! The name stands for “reuse recorded resolution” and, as the name implies, it allows you to ask Git to remember how you’ve resolved a hunk conflict so that the next time it sees the same conflict, Git can resolve it for you automatically. During a conflict resolution you can run git rerere diff to see what have you previously resolved and how.</span></p><p><span class="link">👓 <a href="https://github.com/bevyengine/bevy/blob/main/CONTRIBUTING.md#how-were-organized">bevy/CONTRIBUTING.md at main · bevyengine/bevy</a> [community, open-source, project management]</span><br /><span style="white-space: pre-line;">This seems a good way to organize an OSS project. A large contributor base with rights to label and triage PRs, very few maintainers with merge rights (where a merge presumes approval from 2 matter experts) and a single final authority. PRs are clasified as trivial, uncontroversial and controversial with different processes. Labels are used heavily to mark PRs on multiple axis. The process is well documented.</span></p><p><span class="link">👓 <a href="https://github.com/containers/krunvm?ref=console.dev">containers/krunvm at console.dev</a> [tool, devops, terminal]</span><br /><span style="white-space: pre-line;">A lightweight, more limited alternative to Docker for running micro VMs based off OCI (Docker/Podman/...) images. Currently supports Linux and OSX.</span><br /><span style="white-space: pre-line;">Highlights: Minimal footprint. Fast boot time. Zero disk image maintenance. Zero network configuration. Support for mapping host volumes into the guest. Support for exposing guest ports to the host.</span><br /><span style="white-space: pre-line;">I guess it won't be enough of you use Docker networks to run groups of interconnected images but can be nice for simpler cases.</span></p><p><span class="link">👓 <a href="https://github.com/wg/wrk">wg/wrk: Modern HTTP benchmarking tool</a> [performance, testing, tool]</span><br /><span style="white-space: pre-line;">wrk is a modern HTTP benchmarking tool capable of generating significant load when run on a single multi-core CPU. It combines a multithreaded design with scalable event notification systems such as epoll and kqueue.</span><br /><span style="white-space: pre-line;">An optional LuaJIT script can perform HTTP request generation, response processing, and custom reporting.</span></p><p><span class="link">👓 <a href="https://www.scaleway.com/en/">The cloud of choice | Scaleway</a> [devops, cloud]</span><br /><span style="white-space: pre-line;">Running in Europe. From Serverless architecture to Elastic Metal and everything in between. Reportedly "the best price/performance ratio on the market". I haven't tried it so can't vouch for them. </span></p><p><span class="link">👓 <a href="https://www.smashingmagazine.com/2022/08/fluid-sizing-multiple-media-queries/">Fluid Sizing Instead Of Multiple Media Queries? — Smashing Magazine</a> [CSS, webdev] - <q>If you like math and CSS, you’ll love this one. We don’t need to use media queries to change the values of some CSS properties — *font-size*</q></span><br /><span style="white-space: pre-line;">Quoted: If you like math and CSS, you’ll love this one. We don’t need to use media queries to change the values of some CSS properties — font-size, padding, margin etc. — depending on the viewport width, with the CSS clamp function. But: we still need to use media queries for changing colors, borders, shadows and other CSS styles. </span></p><p><span class="link">👓 <a href="https://containers.dev/">Development containers</a> [devops, productivity, containers]</span><br /><span style="white-space: pre-line;">An open specification for enriching containers with development specific content and settings. It seeks to find ways to enrich existing formats with common development specific settings, tools, and configuration while still providing a simplified, un-orchestrated single container option – so that they can be used as coding environments or for continuous integration and testing. You can use it e.g. to specify editor-specific settings such as what plugins to activate. Currently it uses <a href="https://containers.dev/implementors/json_reference">devcontainer.json</a> but intends to find ways to embed the same information in other existing formats. Originated with VS Code, I believe.</span><br /><span style="white-space: pre-line;">This image explains it well:</span><br /><img alt="Development containers" srcset="https://64.media.tumblr.com/1186e02228403d5d4a44d9045becdb58/8b7f732fa5f658a0-10/s1280x1920/c251be60dadaa6889ebdf7a0b875bf53803353b5.png 1000,https://64.media.tumblr.com/1186e02228403d5d4a44d9045becdb58/8b7f732fa5f658a0-10/s640x960/1e7fa3c63b5c5e81de9c05bb76272ba1396ce789.png 640,https://64.media.tumblr.com/1186e02228403d5d4a44d9045becdb58/8b7f732fa5f658a0-10/s540x810/960c14a4ba347ec067d1e6fb41deb4272868cfe3.png 540,https://64.media.tumblr.com/1186e02228403d5d4a44d9045becdb58/8b7f732fa5f658a0-10/s500x750/e720979929b6a52eb702a87242123aeeb4598972.png 500,https://64.media.tumblr.com/1186e02228403d5d4a44d9045becdb58/8b7f732fa5f658a0-10/s400x600/1a127cd99a9b1f1153b989712473f48d6afd53fc.png 400,https://64.media.tumblr.com/1186e02228403d5d4a44d9045becdb58/8b7f732fa5f658a0-10/s250x400/88ea9e9ffe8d983356b2fea86b86647f1c64f52e.png 250,https://64.media.tumblr.com/1186e02228403d5d4a44d9045becdb58/8b7f732fa5f658a0-10/s100x200/65a31fdfbf91e77b5121339b41aeccb246739c8f.png 100,https://64.media.tumblr.com/1186e02228403d5d4a44d9045becdb58/8b7f732fa5f658a0-10/s75x75_c1/757bfe06ce737293b9c1c84a9d0087f1e3204852.png 75" /></p><p><span class="link">👓 <a href="https://www.sigstore.dev/">Sigstore - A new standard for signing, verifying and protecting software</a> [security, tool]</span><br /><span style="white-space: pre-line;">An open-source project to improve "supply chain" security, ie to sign published libraries and record info about their build env, sources etc., in a safe and easy to use manner. It can manage signing keys securely for you, where you use OpenId Connect to sign your artifacts. Cooperation between Google, Linux Foundation, GitHub etc. Soon to be adopted by npm.com. </span><br /><span style="white-space: pre-line;">"We’ve automated how you digitally sign and check components, for a safer chain of custody tracing software back to the source. We want to remove the effort, time and risk of error this usually comes with. And for anyone whose software depends on open source, future integrations can make it easier to check for authenticity, wherever it’s come from."</span></p><p><span class="link">👓 <a href="https://stellar.org/blog/project-jump-cannon-choosing-wasm?locale=en">Project Jump Cannon: Choosing WASM for the smart contracts stack - SDF Blog</a> [wasm, blockchain]</span><br /><span style="white-space: pre-line;">An exploration of options for a smart contracts stack (VM, blockchain integration, language, SDKs) and why <a href="https://stellar.org/">Stellar</a> chose WASM in the end.</span><br /><span style="white-space: pre-line;">Why not Etherum VM: However, its storage and execution models are expensive and challenging to parallelize.</span><br /><span style="white-space: pre-line;">Mentiones also Move, which had its own verification language and prover that were built alongside the language (but is fairly immature and slow).</span><br /><span style="white-space: pre-line;">Noteworthy: eBPF is a bytecode specification with multiple VM implementations. Originally created for running sandboxed programs in an OS kernel. For smart contracts it is substantially similar to WASM but the support is worse and the maintenance burden is higher.</span><br /><span style="white-space: pre-line;">WASM is designed for security and presents the widest set of possible source languages, toolchains, interpreters and JITs, and presents the best performance and lowest degree of coupling to a specific blockchain’s semantics. </span></p><p><span class="link">👓 <a href="https://blog.ledger.com/fault-injection-simulation/">Integrating fault injection in development workflows</a> [security, rust]</span><br /><span style="white-space: pre-line;">An interesting reading about hacking code via fault injection - skipping an instruction or resetting a register to 0 or 1 (which often also means false/true). The authors present a tool for checking these vulnerabilities easily in Rust code and also mention some protections - such as executing checks twice and using a custom, multi-bit type for booleans where true and false are not simple opposites (ie flipping a bit won't turn one into the other). </span></p><p><span class="link">👓 <a href="https://github.com/chimbori/crux/">chimbori/crux: a flexible plugin-based API & implementation to extract interesting information from Web pages</a> [library]</span><br /><span style="white-space: pre-line;">A Kolín library for extracting the interesting parts of a web page, eg. the metadata and (formatted) body of an article.</span></p><p><span class="link">👓 <a href="https://gource.io/">Gource - a software version control visualization tool</a> [tool, coding, fun]</span><br /><span style="white-space: pre-line;">An interesting way to visualize the history of a git/... repo. Not sure whether it is useful in any way but it is interesting to watch. Software projects are displayed by Gource as an animated tree with the root directory of the project at its centre. Directories appear as branches with files as leaves. Developers can be seen working on the tree at the times they contributed to the project.</span></p><p><span class="link">👓 <a href="https://www.crunchydata.com/blog/learn-postgres-at-the-playground">Learn Postgres at the Playground</a> [wasm, database]</span><br /><span style="white-space: pre-line;">This is mindbending. PostgreSQL compiled to WASM so that you can run it in the  browser in a learning playground. With canned datasets you can load. Guided tutorials to follow along to learn about the power of Postgres. </span></p><p><span style="white-space: pre-line;"><em>Tota11y! - visualize the most common web accessibility errors </em><br /></span><br /><span class="link">👓 <a href="https://tota11y.babylontech.co.uk/">Tota11y! - visualize the most common web accessibility errors</a> [webdev, tool, testing]</span><br /><span style="white-space: pre-line;">A browser utility to visualize the most common web accessibility errors on a site in a clear, understandable way</span></p><p><span class="link">👓 <a href="https://raphlinus.github.io/rust/gui/2022/07/15/next-dozen-guis.html">Advice for the next dozen Rust GUIs | Raph Levien’s blog</a> [rust, desktop] - <q>A few times a week, someone asks on the #gui-and-ui channel on the Rust Discord, “what is the best UI toolkit for my application?” Unfortuna</q></span><br /><span style="white-space: pre-line;">A little about the state of GUI toolkits in Rust (primarily egui and Iced) and problems with creating cross-OS solutions (especially regarding using the system compositor and text rendering or not). There are obviously many difficult tradeoffs. </span></p>
++++

+++--+++

Thank you for reading!
