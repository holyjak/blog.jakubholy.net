{:title "Holy Dev Newsletter September 2022"
 :hide-from-home? true
 :date "2022-09-30"
 :tags ["newsletter"]}

Welcome to the Holy Dev newsletter, which brings you gems I found on the web, updates from my blog, and a few scattered thoughts. You can get the next one into your mailbox if you link:/me/subscribe[subscribe].

== What is happening
Fulcro: I have https://github.com/fulcrologic/fulcro/pull/519[contributed a tiny change] to Fulcro that will stop begginners from scratching their heads and wondering where did their data disappear when they return a lazy list from a Pathom resolver instead of a vector. Surprisingly many have run into this lately. I have also finally created the bigger brother of my https://github.com/holyjak/minimalist-fulcro-template-backendless[minimalist-fulcro-template-backendless], the full-stack https://github.com/holyjak/minimalist-fulcro-template[minimalist-fulcro-template], this one built on Pathom 3.

Other: I held two workshops at https://ndcoslo.com/[NDC Oslo] - https://ndcoslo.com/agenda/workshop-web-development-from-the-future-part-1-2/8c26a8c841a3[Web development from the future], which shares lessons from the awesome desing of Fulcro with a non-Clojure audience, and https://ndcoslo.com/agenda/workshop-experience-interactive-development-while-creating-a-rest-service-without-a-single-restart-part-1-2/38f2896160d6[Experience interactive development while creating a REST service without a single restart], which introduces REPL-driven developement to non-clojurians. I had tiny but engaged audienced and was pleasantly surprised that anyone showed up :-). I have also started preparing an internal conference here at https://www.ardoq.com/[Ardoq], which will be fun. I had to pause my work on my rust https://github.com/holyjak/img-mg[img-mg] to do other stuff (such as prepare my workshops and fix user data in production) but hope to get back soon.

== Gems from the world wide web
++++
<p><span class="link">ðŸ‘“ <a href="https://blog.torproject.org/arti_100_released/">Arti 1.0.0 is released: Our Rust Tor implementation is ready for production use. | The Tor Project</a> [rust, experience]</span><br /><span style="white-space: pre-line;">Interesting reading it the experience of rewriting Tor from C to Rust. Selected highlights: At every stage, we've encountered way fewer bugs than during comparable C development. The bugs that weÂ <em>have</em>Â encountered have almost all been semantic/algorithmic mistakes (real programming issues),... . Development of comparable features has gone way faster, even considering that we're building most things for the second time. Some of the speed improvement is due to Rust's more expressive semantics and more usable library ecosystemâ€”but a great deal is due to the confidence Rust's safety brings. Better portability. One downside is that the binary size is bigger, party because C has the advantage of its core libraries already present and dynamicly linked rather than bundled. </span></p><p><span class="link">ðŸ‘“ <a href="https://www.clojuriststogether.org/news/q3-2022-funding-announcement/">Q3 2022 Funding Announcement</a> [clojure, community]</span><br /><span style="white-space: pre-line;">It's awesome to see the community supporting some really interesting projects, such as ClojureDart, Maria.cloud, Clojure Data Cookbook, Clojupedia etc.</span></p><p><span class="link">ðŸ‘“ <a href="https://icons.radix-ui.com/">Radix Icons - 15x15 SVG icons</a> [webdev, look&feel]</span><br /><span style="white-space: pre-line;">MIT license. Web the WorkOS team. Also React wrappers. </span></p><p><span class="link">ðŸ‘“ <a href="https://mirrord.dev/">mirrord - run local process as if in the cloud</a> [devops, productivity, cloud]</span><br /><span style="white-space: pre-line;">Run your service in the context of your cloud environment, with access to other services, filesystem, and network traffic - but from your local machine. Mirrord is an open source tool in two parts - an agent running in the cloud and a local binary that wraps your process. It works by intercepting FS and network syscalls to forward inputs and outputs between the two and by copying remote env vars to local. Network traffic incoming to the agent can be "stolen" or duplicated to the local process. I haven't tried it but it looks fascinating.</span></p><p><span class="link">ðŸ‘“ <a href="https://bytecodealliance.org/articles/wasmtime-1-0-fast-safe-and-production-ready">Wasmtime 1.0</a> [wasm, performance]</span><br /><span style="white-space: pre-line;">Fascinating reading about how wasmtime is made to start in 5 *micro*seconds (mostly thanks to deferring initialization until necessary), run fast (multiple users saw 50% improvements compared to other runtimes), and be secure (deps review, fuzzing, formal verification). Also a good list of where you might want to use it - microservices, 3rd party plugins, user-defined functions in DBs, etc.</span></p><p><span class="link">ðŸ‘“ <a href="https://webhook.site/">Webhook.site - Test, process and transform emails and HTTP requests</a> [tool, service, troubleshooting] - <q>Instantly generate a free, unique URL and email address to test, inspect, and automate (with a visual workflow editor and scripts) incoming </q></span><br /><span style="white-space: pre-line;">Use this as a POST endpoint to troubleshoot anything that expects a webhook - you will get your own HTTP/email endpoint and whatever is posted to it shows up in the web page.</span></p><p><span class="link">ðŸ‘“ <a href="https://mock.codes/">mock.codes</a> [troubleshooting, service, tool]</span><br /><span style="white-space: pre-line;">Has an url for most of HTTP statuses, returning JSON - useful for quick testing of your http client error handling. Supports GET, PUT, POST and more. See e.g. https://mock.codes/500</span></p><p><span class="link">ðŸ‘“ <a href="https://github.com/TheAlgorithms?q=Rust&amp;type=all&amp;language=&amp;sort=">The Algorithms Â· GitHub</a> [learning, programming languages]</span><br /><span style="white-space: pre-line;">Good way to learn a language - study its repo under this org, which has "all" the algos (that somebody contributed so far) - seearch, graph, math, dynamic programming, data structures,... </span></p><p><span class="link">ðŸ‘“ <a href="https://blog.cloudflare.com/workerd-open-source-workers-runtime/?ref=console.dev">Introducing workerd: the Open Source Workers runtime</a> [wasm]</span><br /><span style="white-space: pre-line;">Cloudflare open-sourced their custom wasm/JS runtime that powers their edge computing Workers. Contrary to other runtimes or isn't general purpose. It is a web server designed to run 100s - 1000s isolated "nanoservices" that call each other with the overhead of local invocation. Implements many web APIs. They make a great argument for running your app as a bunch of nanoservices - all present at each node - instead of as microservices, with their communication and operations overhead and complexity. </span></p><p><span class="link">ðŸ‘“ <a href="https://www.builder.io/blog/qwik-and-qwik-city-have-reached-beta?ref=console.dev">Qwik and Qwik City have reached beta! ðŸŽ‰</a> [webdev, framework, performance]</span><br /><span style="white-space: pre-line;">QwikÂ is a new framework aiming to let developers build instant-on web applications in a familiar React-like component mental model. Qwik achieves this by focusing on server-side-rendering andÂ forgoing hydration in favor of resumability. The results are web applications withÂ O(1) scalabilityÂ that perform great even on slow networks or mobile devices. Qwik City is an accompanying meta-framework for building Qwik sites. Qwik City provides directory base routing, data fetching, bundle optimization, prefetching, streaming, and interoperability with edge function providers. </span><br /><span style="white-space: pre-line;">Because Qwik is vertically integrated, it owns rendering, style splitting, SSR, bundle optimization, prefetching, data serialization, and resumability. By owning the whole problem space, Qwik can optimize better, frequently delivering close to zero JavaScript on site startup and seamlessly transitioning to a fully interactive app.Â </span></p>
++++

+++--+++

Thank you for reading!
