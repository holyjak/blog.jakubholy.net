{:title "Holy Dev Newsletter November 2022"
 :hide-from-home? true
 :date "2022-11-30"
 :tags ["newsletter"]}

Welcome to the Holy Dev newsletter, which brings you gems I found on the web, updates from my blog, and a few scattered thoughts. You can get the next one into your mailbox if you link:/me/subscribe[subscribe].

== What is happening
I have helped recently on a large JavaScript and React frontend and have been shocked by its complexity. So I am trying to understand how to make frontends simple (which is not easy :)). It lead so far to my study of "A simple front-end architecture that works" (presented below). Stay tuned! On a related note, I am reading the http://www.vpri.org/pdf/tr2012001_steps.pdf[2012 report from the STEPS] project, which postulates that our codebases are 100, 1000 times larger than they need to be (oh yes!) and explores ways to improve that. Their approach is to use small, purpose-built languages and it produces very promising results.

== Gems from the world wide web
++++
<p><span>ðŸŽ¥ <a href="https://www.youtube.com/watch?v=8Ab3ArE8W3s">A very good and entertaining criticism of today's state of software developement that has on the strait jacket of historical...</a></span><br /><span style="white-space: pre-line;">A very good and entertaining criticism of today's state of software developement that has on the strait jacket of historical burden, with demonstrations of some of the possibilites, including f.ex. interactive programming, visual tools for exploring program's state and code, Lisp-style recoverable errors, Erlang OTP's evolvable, killable, observable processes. The conclusion: we should use languages and tooling that is at least as good as Smalltalk's and Lisp's.</span><br /><span style="white-space: pre-line;">"[W]e're still digging ourselves into a kind of a pit by continuing to preserve practices that have no rational basis beyond being historical." - and make our job unnecessarily hard. The 80 char limit comes from the width of punch cards. Vi keybindings were optimized for a particular keyboard of the time. We still use fixed-width text as the primary/only medium, ignoring our powerful visual cortext. We still create programs as static artefacts that run from start to finish. (Long-lived serivces, anyone?) Little thought is typically given to evolving state over time.</span><br /><span style="white-space: pre-line;">Programming is a design discipline, i.e. you find out what youâ€™re building as you build. Moreover, "the spec is always wrong" - it is always incomplete and it will change. So debuggability and evolvability are much more important that being "correct by construction," i.e. the (unproven) promise of static typing. We should embrace interactive development, have great tools for inspecting the running program, ones that leverage what we excel at including visual processing (here, the <a href="https://gtoolkit.com/">Glamorous toolkit</a> looks as a step in the right direction). Our languages should empower us to express the business logic rather than drown in ceremony.</span><br /><span style="white-space: pre-line;"><a href="https://jackrusher.com/strange-loop-2022/">Transcript here</a>.</span></p><p><span class="link">ðŸ‘“ <a href="https://github.com/lilactown/pyramid">lilactown/pyramid: A library for storing and querying graph data in Clojure</a> [clojure, library, data]</span><br /><span style="white-space: pre-line;">A fast, more limited, in-memory "graph database" composed of Clojure maps and queried via EQL. When the power/performance tradeoff of Datascript is not worth it. Also supports transforming data as it is being retrieved. </span></p><p><span class="link">ðŸ‘“ <a href="https://www.goatcounter.com/?ref=console.dev">GoatCounter â€“ open source web analytics</a> [SaaS, open-source, analytics]</span><br /><span style="white-space: pre-line;">Â Very lightweight stats for your website: visitors, top pages, referrers, etc. Includes automatic bot detection and campaign stats. Tracking JS is very small (3.5 kB) and has the option to use a pixel, trigger from server middleware or import raw logs. Doesnâ€™t track users with IDs. Open source and can be self-hosted (written in Go and uses either SQLite or Postgres.</span><br /><span style="white-space: pre-line;">Via console.dev</span></p><p><span class="link">ðŸ‘“ <a href="https://github.com/epiccastle/bbssh">epiccastle/bbssh: Babashka pod for SSH support.</a> [tool, devops, automation]</span><br /><span style="white-space: pre-line;">Babashka pod that enables you to script ssh - establish a connection, send commands etc.</span></p><p><span class="link">ðŸ‘“ <a href="https://metatags.io/">Meta Tags â€” Preview, Edit and Generate</a> [writing, tool]</span><br /><span style="white-space: pre-line;">Great site to preview how social sites see your blog etc., to make sure previews will work as intended.</span></p><p><span class="link">ðŸ‘“ <a href="https://www.techradar.com/best/best-security-key">Best security key in 2022: hardware keys for top online protection</a> [security]</span><br /><span style="white-space: pre-line;">A 2022 overview of security keys - physical devices you plug into your PC and use for MFA, keeping your passwords really secure, etc. Features multiple variants of YubiKey, Thetis Fido U2F Security Key, CryptoTrust OnlyKey, uQontrol Qkey Password Vault, and HyperFido K18.</span></p><p><span class="link">ðŸ‘“ <a href="https://github.com/drduh/YubiKey-Guide">drduh/YubiKey-Guide: Guide to using YubiKey for GPG and SSH</a> [security]</span><br /><span style="white-space: pre-line;">Guide to using YubiKey for GPG and SSH, with a master key used for creating sub-keys that are then used for signing/encruption/authentication. You can also only use it for SSH with the key type <em>ed25519-sk</em> without bothering with GPG - you will touch your yubikey during creation and then anytime you want to use that ssh key.</span></p><p><span class="link">ðŸ‘“ <a href="https://github.com/marketplace/actions/debugging-with-tmate">Debugging with tmate - GitHub Marketplace</a> [productivity]</span><br /><span style="white-space: pre-line;">Get an interactive terminal into a GitHub Actions workflow for troubleshooting, f.ex. automatically when it failed. Uses the tmux fork tmate and connection proxying via tmate.io or your own tmate server. You can limit access to your own GH ssh key only.</span></p><p><span class="link">ðŸ‘“ <a href="https://dhall-lang.org/">The Dhall configuration language</a> [programming languages, productivity, devops]</span><br /><span style="white-space: pre-line;">"Dhall is a programmable configuration language that you can think of as: JSON + functions + types + imports". It is designed to solve the problems that template/configuration languages - such as the one used by Terraform or Kubernetes - have with limited reusability, verbosity, lacking/limited parametrization etc. It has integrations with a number of languages (e.g. Clojure, Go, Rust) and bindings for a bunch of configuration systems such as Ansible, CloudFormation, and Kubernetes (and you can always make your own).</span></p><p><span class="link">ðŸ‘“ <a href="https://github.com/Netflix/concurrency-limits">Netflix/concurrency-limits</a> [library, java, performance]</span><br /><span style="white-space: pre-line;">The successur to the famous Netflix' Hystrix resillience library, born of the realization that fixed limits are impractical in complex, dynamic systems. This lib implements and integrates concepts from TCP congestion control to auto-detect concurrency limits for services in order to achieve optimal throughput with optimal latency.</span><br /><span style="white-space: pre-line;">Envoy has similarly working <a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/adaptive_concurrency_filter">Adaptive Concurrency filter</a>, which "dynamically adjusts the allowed number of requests that can be outstanding (concurrency) to all hosts in a given cluster at any time. Concurrency values are calculated using latency sampling of completed requests and comparing the measured samples in a time window against the expected latency for hosts in the cluster." </span></p><p><span class="link">ðŸ‘“ <a href="https://github.com/mpenet/flex/">mpenet/flex: Using TCP congestion control methods to find/set real limits of a system over time</a> [clojure, library, performance, devops]</span><br /><span style="white-space: pre-line;">A Clojure library inspired by Netflix' <a href="https://github.com/Netflix/concurrency-limits">concurrency-limits</a> and the talk <a href="https://www.youtube.com/watch?v=m64SWl9bfvk">"Stop Rate Limiting! Capacity Management Done Right" by Jon Moore</a>. - using TCP congestion control methods to find/set real limits of a system over time.</span></p><p><span class="link">ðŸ‘“ <a href="https://www.conventionalcommits.org/en/v1.0.0/">Conventional Commits</a> [software development, productivity]</span><br /><span style="white-space: pre-line;">The Conventional Commits specification is a lightweight convention on top of commit messages. It provides an easy set of rules for creating an explicit commit history; which makes it easier to write automated tools on top of. Title line: <em><type>[optional scope]: <description></em></span><br /><span style="white-space: pre-line;">Key types are feat and fix but you can use others, such as chore, docs, ci, refactor, perf, test, and others.</span><br /><span style="white-space: pre-line;">Examples:</span><br /><span style="white-space: pre-line;">feat: allow provided config object to extend other configs

BREAKING CHANGE: `extends` key in config file is now used for extending other config files</span><br /><span style="white-space: pre-line;"><em></em><br /></span><br /><span style="white-space: pre-line;">feat(api)!: send an email to the customer when a product is shipped</span></p><p><span class="link">ðŸ‘“ <a href="https://www.swyx.io/preemptive-pluralization">Preemptive Pluralization is (Probably) Not Evil</a> [thoughts, design] - <q>What if we just assumed we might have two of everything?</q></span><br /><span style="white-space: pre-line;">"<strong>Before you write any code â€” ask if you could ever possibly want multiple kinds of the thing you are coding.</strong> If yes, just do it. Now, not later."</span></p><p><span>ðŸŽ¥ <a href="https://www.youtube.com/watch?v=ewcoEYS85Co&amp;list=PL0vfts4VzfNjnCv7U_Y3QbJ6Y3z3b83Dx&amp;index=1">Great 15 min intro into RxJS, the popular JS lib for reactive streams that I am forced to use.</a></span><br /><span style="white-space: pre-line;">Great 15 min intro into RxJS, the popular JS lib for reactive streams that I am forced to use.</span></p><p><span style="white-space: pre-line;"><strong>A simple front-end architecture that works</strong><br /></span><br /><span style="white-space: pre-line;">A great, short article, auto-translated acceptably from Norwegian (the link preview below is not translated but the page it leads to is):</span><br /><span class="link">ðŸ‘“ <a href="https://www-kodemaker-no.translate.goog/blogg/2020-01-enkel-arkitektur/?_x_tr_sl=no&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">A simple front-end architecture that works</a> [webapp, architecture] - <q>Det er mange store stilaser Ã¥ velge blant for din frontendarkitektur, men
trenger du all leamikken? Her er en enkel arkitektur som jeg har h</q></span><br /><span style="white-space: pre-line;">The key points: All the data needed by the app is kept at a single place as a monolithic state object (a cljs atom or JS object). The state is mapped to exactly the data the UI needs and then sent down to the root component and its children etc. Finally, the UI is built from generic, design-based components that are ignorant of any domain concepts.</span><br /><span style="white-space: pre-line;">The "single monolithic state" is known from re-frame and Redux. But contrary to these frameworks, the components here are passive and simply receive their props from their parent instead of pulling it in themselves via subscribe or Redux.connect. There is only one-way data flow from the root to the leaves.</span><br /><span style="white-space: pre-line;">A key factor that the data is fitted - "prepared" - to the UI before being handed over to the root component, i.e. the data is exactly in the form and shape the UI needs it. Thus there is little need for any logic in the components. Every parent component simply destructures its props and passes each one to the respective child.</span><br /><span style="white-space: pre-line;">Equally revolutionary is the insistence on generic, reusable components based on the design and ignorant of the domain (e.g. PrimaryButton instead of SignInButton, or DataTable instead of StudentList). Such design components are quite stable, while what should be displayed where and how changes often. Personally I think you might want some domain-oriented "layout" components that essentially only delegate to appropriate design components to display parts of a (UI-fitted) data entity. The generic components would imply that the prepare-d data also produces their generic props, for example not 'universityClasses' but 'rows'.</span><br /><span style="white-space: pre-line;">The original Norwegian article:</span><br /><span class="link">ðŸ‘“ <a href="https://www.kodemaker.no/blogg/2020-01-enkel-arkitektur/">A simple front-end architecture that works</a> [webapp, architecture] - <q>Det er mange store stilaser Ã¥ velge blant for din frontendarkitektur, men
trenger du all leamikken? Her er en enkel arkitektur som jeg har h</q></span></p>
++++

+++--+++

Thank you for reading!
