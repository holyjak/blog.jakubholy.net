{:title "Beware the performance cost of async_hooks (Node 8)",
 :date "2018-11-01",
 :layout :post,
 :tags ["performance" "nodejs"],
 :tags-orig ["nodejs" "performance"],
 :categories ["Languages"],
 :extra-css
 #{"https://github.githubassets.com/assets/gist-embed-123720f37c57ce9a8f29de081c38ed61.css"}}

++++
I was excited about <a href="https://nodejs.org/api/async_hooks.html">async_hooks</a> having finally landed in Node.js 8, as it would enable me to share important troubleshooting information with all code involved in handling a particular request. However it turned out to have terrible impact of our CPU usage (YMMV):<br><br><img title="Production CPU usage spikes after async_hook deployment" src="https://lh3.googleusercontent.com/3jnASSSx-wRJwWyFI6yxYklPZInqHJKuXcKJlIP-UoozB9sHi1bUW_pC5A2_XLWYWzg1AdKQqwGUXaZN9VvTZs8fij-JsefZ4jGWzvUzQA64brNTY0lB4Wp5C497hxP0Da55C6k4qcOmlPTwBr8B4mumQyXhmuYc2Op_Ng2zA1nPqf3ZdcjmhGerqYRTfHiLr5aS7_nB6D2upWAZ3phZm5KgWF4E7VsuRZs5PFuk_NaFjDNIKLx2mkRFee1VbqLxYYlPKaLuTk0_jX7yw0UGHZrCtnk5S5J66IaxT-eAuDG7HEtHe5qtY9N6odD5xaghzKcAGJBAHJHPBdxT8UiEFEEOmo6ES20_KjsJAocFlYir1rLkgbRRBXl96t8gphbo4u1CTxRsYkOcQateop9q1lMgRM3vzBtIkaTi306ey0-wmVMr6nwZKjrqvlOiNVExJCqvCtA8ny3O8gBr57LCEqbsVpd8uDiDarL8xv8jKwqYPlH6w_4Ib-5FsCejrpbxDYWuatW1z43OEHg5gAQbcH8G4e0cckYVS9568HLlwZY-3yzY3bN3bYuU2GqcACjgjWcMN_uoTivgK9_w55fKsW4DmJ6fS6XNsIGAH2JQthCi_pQQBS-_Gw3ZkvaDFeRgGpCqcFu-2_Qi3PzyhXLBVOFj=w524-h221-no" /><br><br>This was quite extreme and is likely related to the way how our application works and uses Promises. Do your own testing to measure the actual impact in your app.<br><br>However I am not the only one who has seen some performance hit from async_hooks - see <a href="https://github.com/bmeurer/async-hooks-performance-impact">https://github.com/bmeurer/async-hooks-performance-impact</a>, in particular:<br><br>Here the results of running the Promise micro benchmarks with and without <code>async_hooks</code> enabled:<br><br><table>
<thead>
<tr>
<th align="right">Benchmark</th>
<th align="right">Node 8.9.4</th>
<th align="right">Node 9.4.0</th>
</tr>
</thead>
<tbody>
<tr>
<td align="right">Bluebird-doxbee (regular)</td>
<td align="right">226 ms</td>
<td align="right">189 ms</td>
</tr>
<tr>
<td align="right">Bluebird-doxbee (init hook)</td>
<td align="right">383 ms</td>
<td align="right">341 ms</td>
</tr>
<tr>
<td align="right">Bluebird-doxbee (all hooks)</td>
<td align="right">440 ms</td>
<td align="right">411 ms</td>
</tr>
<tr>
<td align="right">Bluebird-parallel (regular)</td>
<td align="right">924 ms</td>
<td align="right">696 ms</td>
</tr>
<tr>
<td align="right">Bluebird-parallel (init hook)</td>
<td align="right">1380 ms</td>
<td align="right">1050 ms</td>
</tr>
<tr>
<td align="right">Bluebird-parallel (all hooks)</td>
<td align="right">1488 ms</td>
<td align="right">1220 ms</td>
</tr>
<tr>
<td align="right">Wikipedia (regular)</td>
<td align="right">993 ms</td>
<td align="right">804 ms</td>
</tr>
<tr>
<td align="right">Wikipedia (init hook)</td>
<td align="right">2025 ms</td>
<td align="right">1893 ms</td>
</tr>
<tr>
<td align="right">Wikipedia (all hooks)</td>
<td align="right">2109 ms</td>
<td align="right">2124 ms</td>
</tr>
</tbody>
</table><br><br>To confirm the impact of async_hook on our app, I have performed 3 performance tests:<br><br><h5>CPU usage without async_hooks (Node 8)</h5><br><br>It is difficult to see but the mean CPU usage is perhaps around 60% here.<br><br><img title="Usage without async hooks" src="https://lh3.googleusercontent.com/tKVlaTA7MfGOz-vW6DzzkcIgnCg4ufGHX0ozpWo85446LatJ8boXGzQc0qY6hcqep63nS6T38u4oLrZtKi_tlnHgWKzzSHuSjDKYhJfDpOcmbPKNIUIadO7U1QysgrTIJhDtGAr-A3m6MNBxfQeJNe7Yj1mvfqZZg1Rb9i34115Ag_8Ww8A8NU_P5pmuA_5-9oeN5CcANW7A2oVZeSwdEIHJlsAU7360Aqb4pH1Ngk-3X5-lDNlcTe0lm_pMHyvsSlDwPt4uLqZfGeKGKdhQy7y4VKLrJgIZnHkkjk3iDqmAL5CvE6Qf9Au3KwDwqWDcO8r9nBREOaUFyIXcKBr1ujP1rqFmrYk2V-p6Ni2ma2hFZoPprTrsnqdRrmk-8nv9xNFEUBfJx0YmPLp38q2Kg6NldrdaIarrVaTO7wAg7c43XYu1ae79iMmo_rs0PCBgcxSaHB2s0VO-E55EWxF53Us1h4Dm1IC2ktIu14QKRAgYmOjwRLl80hswHLm4NfBWn1VGcNAY1exFvtHwMZMp0N-ELYgcZaF3XgkD-Xu6YLZVAi-kAdZh7ZTZXlXfikdK94mh4OBW8NjnCWrbcuIFockhuLQaDe-h95awlCExdW3TNL3bLDYgViiXAn24w7t0yOVtL8Odk6hQYzirIfLgkDIE=w500-h378-no" /><br><br><h5>CPU usage with "no-op" async_hooks (Node 8)</h5><br><br>Here the CPU jumped to 100%.<br><br><img title="CPU usage with async hooks (that did nothing)" src="https://lh3.googleusercontent.com/l_QPdAzalw-dGZpTVVFUgSRE9elcnrP1f3yloVU9tnN182H08p1Wg7WSEjQkOBnKm327XW3IIISUALa84W4pBihWKh6c8-u_az852lrudy6zH3FhAQJKIC6FuUNRPgYC_oNq7VqIHcAfxmkomvY6zH1Dlp2MxS6cMkJo5tE1_mntia-grVlcNezg0DabrefrvTkdzrMZzPDMRxZjF0JxmlfLTKlmiBBdu9mMaBYpmMq0mg8ZCwCV_BngqlHtuGp8N2ZwJjqqOnZe1HzeA_d2FzdKoYBcBaGpO3dX7uEQgZvtZTYucV4G44iwihfLfnDjV6YyiDPTHw2GXIDi-iOLaOasCjkZ0o3TXySnv3hv7z3mWiJDBdCZnKDFJwuWa_w234EChDuMsoG9wxH-1hOdgUkC4SKu06XsUCVPiIZ7_OsbQbPb1q4km8IlaoJ3Rnb6q6HcuKySMij6WAm2oApkHjY42cnZowyi0QthYiJ3FcJx9lgcClHRYIyDxxLtKbIbV85DtbNDR0zjei4acDklZb5x8z12BsjqqCy92JWo_lEgepqVatYGhZiYSwdFGEDQM52sSqgjqrNQr12NLyB1Hsdyj_KzMv4eolHhqvYWXABBS-jFEfJNbmZsW9poau1ZiaAogkQXZaE08rzkUql2DFyr=w500-h378-no" /><br><br><h5>CPU usage with "no-op" async_hooks (Node 11)</h5><br><br>The same as above, but using Node 11 for comparison. I recorded it for just a few minutes but the CPU usage is still around 100%:<br><br><img title="Async hooks on Node 11" src="https://lh3.googleusercontent.com/_5FI-y2oCB9eNmG9f6VhCMJNQW6JeF--H1Qe-gLppBll2E32agzyxBhpp8odQM1-WhSyatvL-StQ-iC4YGfWsPkikzBe19p6g7Hr6toJ5C2zU3dlc-XJJBb14Gpx6JMwQyvXYvjah_rtJT_c0pYnTnJmFypfuRneVi62xHk3W7S39TDqv4FMVY2JNg593alspr8ErCEEDLfAe1I0Kph-TX79i3yMTVzrJyp0Bj6bOutMmNsKnXsimR2PR1LRZD9l2v6sBkcZAebpaXHIz_VmJq6_14Hp8bgoYBPHkGsB74Nj0IPBQ2tHKC8yASOsrHfvZCRssy2FD6AYJHzD2dMlCNGUQODMfmhgp-FyRxQH9HZC1OJ29d7Z8h0o5ksl5wclxlVJacjZ8GD4l-yKVWm_5PMaObz1tYT1-4T3WctSzo6BBDql7Vd8EW4LF1hzuZI93fQQ6ydK20rM4l5RABwP7bQ2Dj72ONqhHMtS24TVTF8kOR1UiKYgMA9xvtZr4qCHr5a9vk4Zh9zQRoaaHCE5YYQXWllC1xDJqYwtDOLrJB6lIFTOtQ_KhEAbMCdTEuhJjZ27NUH2tlej-aRFMsbzYQ0DILHKdwYXCyyV1fRnfCJLHYAr-nykKlk5CLdvp-52TVD94KVdWYLlKC5-NYx6WkEH=w500-h378-no" /><br><br><h3>The code</h3><br><br>This is the relevant code:<div id="gist92787927" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-async-context-js" class="file">
    

  <div itemprop="text" class="Box-body p-0 blob-wrapper data type-javascript ">
      
<table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-async-context-js-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-async-context-js-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-k">const</span> <span class="pl-c1">asyncHooks</span> <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>async_hooks<span class="pl-pds">&#39;</span></span>); <span class="pl-c"><span class="pl-c">//</span> Node 8.9+</span></td>
      </tr>
      <tr>
        <td id="file-async-context-js-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-async-context-js-LC2" class="blob-code blob-code-inner js-file-line"><span class="pl-k">const</span> <span class="pl-c1">querystring</span> <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>querystring<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="file-async-context-js-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-async-context-js-LC3" class="blob-code blob-code-inner js-file-line"><span class="pl-k">const</span> <span class="pl-c1">crypto</span> <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>crypto<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="file-async-context-js-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-async-context-js-LC4" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-async-context-js-L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="file-async-context-js-LC5" class="blob-code blob-code-inner js-file-line"><span class="pl-k">const</span> <span class="pl-c1">context</span> <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="file-async-context-js-L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="file-async-context-js-LC6" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-async-context-js-L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="file-async-context-js-LC7" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">createHooks</span>() {</td>
      </tr>
      <tr>
        <td id="file-async-context-js-L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="file-async-context-js-LC8" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">function</span> <span class="pl-en">init</span>(<span class="pl-smi">asyncId</span>, <span class="pl-smi">type</span>, <span class="pl-smi">triggerId</span>, <span class="pl-smi">resource</span>) {</td>
      </tr>
      <tr>
        <td id="file-async-context-js-L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="file-async-context-js-LC9" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> if (context[triggerId]) {</span></td>
      </tr>
      <tr>
        <td id="file-async-context-js-L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="file-async-context-js-LC10" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>     context[asyncId] = context[triggerId];</span></td>
      </tr>
      <tr>
        <td id="file-async-context-js-L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="file-async-context-js-LC11" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> }</span></td>
      </tr>
      <tr>
        <td id="file-async-context-js-L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="file-async-context-js-LC12" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file-async-context-js-L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="file-async-context-js-LC13" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-async-context-js-L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="file-async-context-js-LC14" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">function</span> <span class="pl-en">destroy</span>(<span class="pl-smi">asyncId</span>) {</td>
      </tr>
      <tr>
        <td id="file-async-context-js-L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="file-async-context-js-LC15" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> delete context[asyncId];</span></td>
      </tr>
      <tr>
        <td id="file-async-context-js-L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="file-async-context-js-LC16" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file-async-context-js-L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="file-async-context-js-LC17" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-async-context-js-L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="file-async-context-js-LC18" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-c1">asyncHook</span> <span class="pl-k">=</span> <span class="pl-smi">asyncHooks</span>.<span class="pl-en">createHook</span>({ init, destroy });</td>
      </tr>
      <tr>
        <td id="file-async-context-js-L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="file-async-context-js-LC19" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-async-context-js-L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="file-async-context-js-LC20" class="blob-code blob-code-inner js-file-line">    <span class="pl-smi">asyncHook</span>.<span class="pl-en">enable</span>();</td>
      </tr>
      <tr>
        <td id="file-async-context-js-L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="file-async-context-js-LC21" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file-async-context-js-L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="file-async-context-js-LC22" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-async-context-js-L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="file-async-context-js-LC23" class="blob-code blob-code-inner js-file-line"><span class="pl-en">createHooks</span>()</td>
      </tr>
</table>


  </div>

  </div>
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/holyjak/bd5060bfb16cd1431f306761656b55d7/raw/d480ff9a5f51f962034a80c3c3afb71458c49ecb/async-context.js" style="float:right">view raw</a>
        <a href="https://gist.github.com/holyjak/bd5060bfb16cd1431f306761656b55d7#file-async-context-js">async-context.js</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

++++
