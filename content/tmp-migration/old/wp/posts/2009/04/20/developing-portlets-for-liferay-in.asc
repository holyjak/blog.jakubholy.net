{:title "Developing portlets for Liferay in Eclipse",
 :date "2009-04-20",
 :layout :post,
 :tags ["library"],
 :tags-orig ["jsr168" "jsr286" "Liferay" "portlet"],
 :categories ["eclipse" "Portlets"],
 :extra-css #{}
}

++++
In this blog I'd like to tell you how to use Eclipse with Liferay to develop portlets with the ability to change a class or a JSP in Eclipse and have that immediatelly reflected on the server (hot deployment).
<h2>Environment</h2>
<ul>
	<li>Liferay Portal 5.2.2 running on Tomcat 5.5.27.</li>
	<li>Eclipse IDE for Java EE Developers, version Ganymede 3.4.1.</li>
	<li>(optional) Eclipse Maven plugin m2eclipse 0.9.6.</li>
</ul>
<h2>A note about Eclipse and Maven projects</h2>
My web project is actually also a Maven project because we use Maven for building our projects. That means that it has a specific directory structure (src/main/webapp, target/classes, etc.) and that it includes a pom.xml that defines its dependencies on other artifacts, usually JAR libraries. Thanks to the m2eclipse plugin, Eclipse is aware of these dependencies and makes them available to the project during development and deployment.<br><br>With the m2eclipse plugin you get the nice feature that if your web application project depends on an artifact produced from another Eclipse project then if you change something in this project you depend upon, Eclipse detect it and pushes the change to the web application deployed on a server.<br><br>Normally with maven alone you would need to run mvn install or mvn package on the library project and either copy the produced .jar manually to the deployed webapp's WEB-INF/lib or do a full rebuild (mvn package) and redeploy of the web app.
<h2>Preparing the portlet project for hot deployment to Liferay</h2>
Normally you deploy a WAR with portlets by putting them in the Liferay's hot deploy directory (&lt;liferay&gt;/deploy). It notices that, processes the WAR, and deploys it to Tomcat. However since Eclipse knows nothing about Liferay and can only deploy to Tomcat itself in the normal way, that means by copying the exploded WAR to &lt;liferay&gt;/tomcat-5.5.27/webapps/, we need to do the Liferay's modifications by ourselves and also modify the way that Eclipse does the deployment. Liferay does monitor Tomcat's webapps/ directory and will detect a change to an application and redeploy it however this deployment doesn't include all the operations that are performed when deploying via its hot deploy directory.
<h3>Configuring Eclipse</h3>
<h4>1. Define a Server Runtime Environment for Liferay</h4>
<ol>
	<li>Window &gt; Preferences &gt; Server &gt; Runtime Environments &gt; Add... .</li>
	<li>Select Apache Tomcat 5.5.</li>
	<li>For the Tomcat installation directory browse to or type &lt;liferay&gt;/tomcat-5.5.27 (replace &lt;liferay&gt; with you liferay installation directory, of course).</li>
	<li>Name it e.g. "Liferay 5.2.2@Tomcat 5.5.27".</li>
</ol>
<h4>2. Define a Server instance for Liferay</h4>
<ol>
	<li>Window &gt; Show View &gt; Other... &gt; Server &gt; Servers.</li>
	<li>Right-click somewhere in the view Servers &gt; New &gt; Server:
<ul>
	<li>Server type Tomcat v5.5 Server.</li>
	<li>Server runtime environment: select the one defined in the previous step (Liferay 5.2.2@Tomcat 5.5.27).</li>
</ul>
</li>
</ol>
<h4>3. Adjust the server's configuration</h4>
In the view Servers, double-click on the newly created server, which will open its configuration. Do the following modifications:
<ul>
	<li>In Server Locations change "<span style="text-decoration:line-through;">Use workspace metadata</span>" to "Use Tomcat installation".
<ul>
	<li>Notice: If you have any projects deployed to the server, this section is greyed-out and cannot be edited. Remove all projects from the server, publish, perhaps restart and you should be able to modify this settings.</li>
</ul>
</li>
	<li>In Server Locations change Deploy path from <span style="text-decoration:line-through;">wtpwebapps</span> to webapps. (Maybe this isn't necessary but I wanted to be sure I won't create any troubles for the Liferay's monitoring.)</li>
	<li>In Timeouts perhaps increase the Start timeout to some period long enough, e.g. 300 s. (My Liferay usually starts in ~ 70s but once it took over 200 s.)</li>
	<li>During server startup, if you get<br><br>Exception in thread "main" java.lang.OutOfMemoryError: PermGen space<br><br>then click Open launch configuration in the server's configuration and add something like <kbd>-XX:MaxPermSize=128m</kbd> to Arguments &gt; VM arguments.</li>
</ul>
Now you should be able to run the server, deploy your portlet webapp to it (view Servers &gt; right-clik the server &gt; Add and Remove Projects ...) and see your portlets in the Liferay portal (login, Add application &gt; find it under the category you've defined in your liferay-display.xml &gt; add it to a page).<br><br>When you deployed the application to the server, you should have been able to see in the log (i.e. in the Eclipse's Console view) that Liferay has detected it and deployed the portlets. There should be a line like<br><br>INFO [PortletHotDeployListener:303] 1 portlets for &lt;your webapp's name&gt; are available for use<br><br>telling you that your portlet is deployed and ready to use.
<h3>Adjusting the portlet project</h3>
When you add you portlet to a portal page, you will be most likely surprised to see there
The requested resource (/example-portlet/MyPortlet/invoke) is not available.
instead of the expected portlet content. (Of course it will differ if your project/webapp context root isn't example-portlet and the portlet's name isn't MyPortlet.)<br><br>Google won't reveal any solution but I'll will :-). Try to deploy the application first from Eclipse (which you've just done) and then in the regular way by exporting it as a WAR file from Eclipse and putting it into &lt;liferay&gt;/deploy/ and waiting for Liferay to pick it up and deploy it to Tomcat. Then compare the two resulting directories from Tomcat's webapps/ folder. Thus you will learn what you will need to modify. Or simply keep on reading :).
<h4>Adjust web.xml</h4>
Liferay needs to have a servlet defined for each portlet. The error above (<em>The requested resource (/example-portlet/MyPortlet/invoke) is not available.</em>) indicates that a servlet MyPortlet is missing. So we will add it together with the proper servlet mapping:<br><br><strong>web.xml modification:</strong>
<pre>&lt;servlet&gt;
        &lt;servlet-name&gt;MyPortlet&lt;/servlet-name&gt;
        &lt;servlet-class&gt;com.liferay.portal.kernel.servlet.PortletServlet&lt;/servlet-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;portlet-class&lt;/param-name&gt;
            &lt;param-value&gt;eu.ibacz.example.MyPortlet&lt;/param-value&gt; &lt;!--replace with your portlet class --&gt;
        &lt;/init-param&gt;
        &lt;load-on-startup&gt;0&lt;/load-on-startup&gt;
    &lt;/servlet&gt;
        ....
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;MyPortlet&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/MyPortlet/*&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
</pre>
<h4>Add portlet TLD</h4>
We will likely (though I'm not 100% sure about this) need to replicate yet another change done by Liferay and that is adding it's TLD for portlet 2.0 and a link for it to web.xml. Liferay adds taglibs also for all its other taglibs but I suppose you don't need them. (I suppose you develop a JSR 286 portlet but you could do the same for a JSR 168 portlet by using its specific uri and tld file.)<br><br>1. Copy liferay-portlet.tld to WEB-INF/tld/liferay-portlet.tld. Get it from the Liferay-deployed WAR or find in somewhere under &lt;liferay&gt;.<br><br>2. Add a taglib declaration to <strong>web.xml</strong>:
<pre>        &lt;taglib&gt;
            &lt;taglib-uri&gt;http://java.sun.com/portlet_2_0&lt;/taglib-uri&gt;
            &lt;taglib-location&gt;/WEB-INF/tld/liferay-portlet.tld&lt;/taglib-location&gt;
        &lt;/taglib&gt;</pre>
<h4>Adding Liferay libs</h4>
You will likely need to add at least the Liferay library
&lt;liferay&gt;/tomcat-6.0.18/webapps/ROOT/WEB-INF/lib/util-taglib.jar
to your projet's WEB-INF/lib. If you ommit that you may, when accessing the portlet, get for example one of the following errors:
<pre> <span style="font-size:small;"><span style="color:#000000;">javax.portlet.PortletException: javax.servlet.ServletException: java.lang.NoClassDefFoundError: com/liferay/taglib/portlet/DefineObjectsTag</span></span></pre>
<pre>JasperException: Impossible de charger ou d'instancier la classe TagExtraInfo: com.liferay.taglib.portlet.ActionURLTei</pre>
<h4>That's all, folks!</h4>
That's all! Your portlet should work now (tough Eclipse may require Tomcat restart for that). Enjoy!
<h2>About the portlet project</h2>
Selected files of the project's WAR:
<ul>
	<li>WEB-INF/
<ul>
	<li>lib/
<ul>
	<li>util-taglib.jar</li>
</ul>
</li>
	<li>tld/
<ul>
	<li>liferay-portlet.tld</li>
</ul>
</li>
	<li>classes/
<ul>
	<li>eu.ibacz.example.MyPortlet.class</li>
</ul>
</li>
	<li>liferay-display.xml</li>
	<li>liferay-plugin-package.properties</li>
	<li>liferay-portlet.xml</li>
	<li>portlet.xml</li>
	<li>web.xml</li>
</ul>
</li>
	<li>myPortlet_view.jsp</li>
</ul>
<strong>eu/ibacz/example/MyPortlet.java</strong>:
<pre><code>
package eu.ibacz.example;<br><br>import java.io.IOException;
import javax.portlet.*;<br><br>public class MyPortlet extends GenericPortlet {
	
	@Override
	protected void doView(RenderRequest request, RenderResponse response)
			throws PortletException, IOException {		<br><br>		PortletRequestDispatcher dispatcher = getPortletConfig().getPortletContext().getRequestDispatcher(
				&quot;/myPortlet_view.jsp&quot;);
		if (dispatcher != null) {
			//dispatcher.forward(request, response); // this displays an empty page instead of the JSP?!
			dispatcher.include(request, response);	// this works
		} else {
			throw new IllegalStateException(&quot;Failed to get a PortletRequestDispatcher, can't forward to the JSP&quot;);
		}
	}
}
</code></pre>
<strong>liferay-display.xml</strong>:
<pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE display PUBLIC "-//Liferay//DTD Display 5.2.0//EN" "http://www.liferay.com/dtd/liferay-display_5_2_0.dtd"&gt;
&lt;display&gt;
  &lt;category name="My Experiments"&gt;
    &lt;portlet id="MyPortlet"&gt;My Test Portlet&lt;/portlet&gt;
  &lt;/category&gt;
&lt;/display&gt;</pre>
<strong>liferay-plugin-package.properties</strong> (I suppose this actually isn't need or could be empty):
<pre>portal.dependency.jars=commons-logging.jartags=portlet</pre>
<strong>liferay-portlet.xml</strong>:
<pre>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE liferay-portlet-app PUBLIC &quot;-//Liferay//DTD Portlet Application 5.2.0//EN&quot; &quot;http://www.liferay.com/dtd/liferay-portlet-app_5_2_0.dtd&quot;&gt;
&lt;liferay-portlet-app&gt;
       
    &lt;portlet&gt;
        &lt;portlet-name&gt;MyPortlet&lt;/portlet-name&gt;
        &lt;instanceable&gt;true&lt;/instanceable&gt;
    &lt;/portlet&gt;
    
    &lt;role-mapper&gt;
        &lt;role-name&gt;administrator&lt;/role-name&gt;
        &lt;role-link&gt;Administrator&lt;/role-link&gt;
    &lt;/role-mapper&gt;
    &lt;role-mapper&gt;
        &lt;role-name&gt;guest&lt;/role-name&gt;
        &lt;role-link&gt;Guest&lt;/role-link&gt;
    &lt;/role-mapper&gt;
    &lt;role-mapper&gt;
        &lt;role-name&gt;power-user&lt;/role-name&gt;
        &lt;role-link&gt;Power User&lt;/role-link&gt;
    &lt;/role-mapper&gt;
    &lt;role-mapper&gt;
        &lt;role-name&gt;user&lt;/role-name&gt;
        &lt;role-link&gt;User&lt;/role-link&gt;
    &lt;/role-mapper&gt;
    
&lt;/liferay-portlet-app&gt;</pre>
<strong>portlet.xml</strong>:
<pre>&lt;?xml version='1.0' encoding='UTF-8' ?&gt;
&lt;portlet-app xmlns='http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation='http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd' version='2.0'&gt;    
    
    &lt;portlet&gt;
        &lt;description&gt;&lt;/description&gt;
        &lt;portlet-name&gt;MyPortlet&lt;/portlet-name&gt;
        &lt;display-name&gt;MyPortlet&lt;/display-name&gt;
        &lt;portlet-class&gt;eu.ibacz.example.MyPortlet&lt;/portlet-class&gt;        
        &lt;expiration-cache&gt;0&lt;/expiration-cache&gt;
        &lt;supports&gt;
            &lt;mime-type&gt;text/html&lt;/mime-type&gt;
            &lt;portlet-mode&gt;VIEW&lt;/portlet-mode&gt;
        &lt;/supports&gt;
        &lt;portlet-info&gt;
            &lt;title&gt;MyPortlet&lt;/title&gt;
            &lt;short-title&gt;MyPortlet&lt;/short-title&gt;
        &lt;/portlet-info&gt;
    &lt;/portlet&gt;
    
&lt;/portlet-app&gt;</pre>
<strong>web.xml</strong>:
<pre>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br><br>&lt;web-app id=&quot;WebApp_ID&quot; version=&quot;2.4&quot; xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;&gt;
    &lt;display-name&gt;My Test Portlet Webapp&lt;/display-name&gt;
    &lt;description/&gt;
    <br><br>    &lt;servlet&gt;
        &lt;servlet-name&gt;JHPokusy&lt;/servlet-name&gt;
        &lt;servlet-class&gt;com.liferay.portal.kernel.servlet.PortletServlet&lt;/servlet-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;portlet-class&lt;/param-name&gt;
            &lt;param-value&gt;eu.ibacz.studna.PokusnyPortlet&lt;/param-value&gt;
        &lt;/init-param&gt;
        &lt;load-on-startup&gt;0&lt;/load-on-startup&gt;
    &lt;/servlet&gt;
        
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;JHPokusy&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/JHPokusy/*&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
    
    &lt;session-config&gt;
        &lt;session-timeout&gt;30&lt;/session-timeout&gt;
    &lt;/session-config&gt;
    &lt;welcome-file-list&gt;
        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;
    &lt;/welcome-file-list&gt;<br><br>    &lt;jsp-config&gt;                
        &lt;taglib&gt;
            &lt;taglib-uri&gt;http://java.sun.com/portlet_2_0&lt;/taglib-uri&gt;
            &lt;taglib-location&gt;/WEB-INF/tld/liferay-portlet.tld&lt;/taglib-location&gt;
        &lt;/taglib&gt;
   &lt;/jsp-config&gt;<br><br>&lt;/web-app&gt;</pre>
<strong>myPortlet_view.jsp</strong>:
<pre>&lt;%@ page language="java" contentType="text/html; charset=UTF-8"    pageEncoding="UTF-8"%&gt;<br><br>&lt;h1&gt;MyPortlet is alive!&lt;/h1&gt;</pre>
<h2>Known issues</h2>
<h3>Omission of .properties during deploy</h3>
Sometimes Eclipse omits to copy .properties files to the server. I don't know whether it's Eclipse problem or my Eclipse Maven plugin problem. I don't know why because .settings/org.eclipse.wst.common.component does contain &lt;wb-resource deploy-path="/WEB-INF/classes" source-path="/src/main/resources"/&gt;. I've open the bug report <a href="https://jira.codehaus.org/browse/MECLIPSE-556">MECLIPSE-556</a> regarding this.
<h3>Enforcing a particular JDK version</h3>
If you use the maven enforcer plugin to enforce a particular version of Java, like this:
<pre>&lt;plugin&gt;
		&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
		&lt;artifactId&gt;maven-enforcer-plugin&lt;/artifactId&gt;
		&lt;configuration&gt;
				&lt;rules&gt;                                                
						&lt;requireJavaVersion&gt;
								&lt;version&gt;[1.5,1.6)&lt;/version&gt;
								&lt;message&gt;...&lt;/message&gt;
						&lt;/requireJavaVersion&gt;
				&lt;/rules&gt;
		&lt;/configuration&gt;
		&lt;executions&gt;
				&lt;execution&gt;
						&lt;id&gt;enforce-versions&lt;/id&gt;
						&lt;goals&gt;
								&lt;goal&gt;enforce&lt;/goal&gt;
						&lt;/goals&gt;
				&lt;/execution&gt;
		&lt;/executions&gt;
&lt;/plugin&gt;</pre>
then you may have troubles building your Maven project with Eclipse if running Eclipse under another JVM version. For example my default system JVM used also for Eclipse is 1.6 but for a particular project I need 1.5. When you try to build the project, it will fail with
<pre>Build errors for jpivot-portlet-liferay-classes; org.apache.maven.lifecycle.LifecycleExecutionException:
 Internal error in the plugin manager executing goal 'org.apache.maven.plugins:maven-enforcer-plugin:1.0-beta-1:enforce':
 Mojo execution failed.</pre>
I've tried the following to force Maven to use JVM 1.5 for building the project:
<ol>
	<li>Set the JRE System Library in Project - Properties - Java Build Path - Libraries.</li>
	<li>Set the Eclipse's command line option -vm to point to the desired JVM in eclipse.ini:
<pre>-vm /usr/lib/jvm/java-1.5.0-sun</pre>
</li>
	<li>Set JAVA_HOME to point to the desired JVM prior to starting Eclipse:
<pre>bash$ export JAVA_HOME="/usr/lib/jvm/java-1.5.0-sun/jre"bash$ ./eclipse</pre>
</li>
	<li><strong>Setting PATH to point to 1.5 JVM prior to startin Eclipse</strong>:
<pre>bash$ export PATH="/usr/lib/jvm/java-1.5.0-sun/bin:$PATH"bash$ ./eclipse</pre>
</li>
</ol>
Of those only nr. 4, setting the PATH, had the desired effect of running Eclipse and thus also the Maven build under the required JVM 1.5. The conclusion is that you must run Eclipse using the same JVM you want to use for Maven builds.<br><br>There is the bug report <a href="https://jira.codehaus.org/browse/MNGECLIPSE-1091">MNGECLIPSE-1091</a> regarding this problem with many votes but no resolution or workaround.
<h3>Why not to use m2eclipse</h3>
A nice post (6/2009) lists some <a href="https://twasink.net/blog/2009/06/m2eclipse-plugin-is-not-for-me/">reasons why not to use m2eclipse</a> for Maven-Eclipse integration:
<ol>
	<li>No real support for separate output folder.</li>
	<li>It uses the Maven Embedder, which is not Maven but more of an experiment.</li>
	<li>It wants to use the JDK associated with the JRE that launched Eclipse.</li>
</ol>
According to Brian Fox, the upcoming M2e 0.9.9 should address this issues.<br><br>Another reader , Benedikt, recommends solutions:
<ol>
	<li>Of course you can change the output-folder by modifying your pom.xml to have separate output-folders for your class-files.</li>
	<li>You can tell the plugin which maven installation it should use and it doesn’t break anything if you do so.</li>
	<li>If you don’t use the internal maven builder then maven will use the JRE configured under “Installed JREs”.</li>
</ol>
So maybe its usable after all? Or you may also give try to <a href="https://eclipse.org/iam">Eclipse IAM</a> (former Q4E), the new Maven-Eclipse integration, currently v. 0.1.0. It seems to be yet no as mature as m2eclipse, see a <a href="https://docs.codehaus.org/display/MAVENUSER/Eclipse+Integration">comparison</a>.
<h2>Additional notes</h2>
<strong> </strong>You may want to follow the instructions on Liferay site and <a href="https://www.liferay.com/web/guest/community/wiki/-/wiki/Main/Liferay+Developer+Mode">use Liferay in a development mode</a> by using special portal.properties that prevent some caching etc. (Add -Dexternal-properties=$CATALINA_BASE/webapps/ROOT/WEB-INF/classes/portal-developer.properties to &lt;liferay&gt;/tomcat-5.5.27/bin/catalina.sh.)<br><br>You may also want to try to install JBoss Tools into your Eclipse and use its Servers view, which also supports Tomcat and may be better than the standard one.<br><br>Another interesting SW - <a href="https://eclipse-portalpack.dev.java.net/">Eclipse Portal Pack</a> for developing JSR168 and JSR286 portlets with Eclipse, currently v2.0M1.
<h2>An alternative: the Liferay way</h2>
The upcoming book <a href="https://www.manning.com/sezov/">Liferay in Action</a> by R. Sezov describes how to set up portlet development environment for Liferay 6 using either Eclipse or NetBeans in its chapter two. He recommands to create and deploy a portlet using the Ant-based Liferay Plugins SDK and use an IDE only to import and develop the portlet while invoking ant deploy for the deployment. I don't know wheter that supports hot deployment of only changed files (provided that it matters at all) and of course it has a completely different structer than Maven assumes, complicating if not rendering it impossible to use Maven.
++++
