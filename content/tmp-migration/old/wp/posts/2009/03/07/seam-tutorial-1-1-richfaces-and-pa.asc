{:title "Seam Tutorial 1.1: RichFaces and paged table (datascroller)",
 :date "2009-03-07",
 :layout :post,
 :tags ["library"],
 :tags-orig ["jsf" "jsr168" "jsr286" "portlet" "RichFaces" "seam"],
 :categories ["Portlets"],
 :extra-css #{}
}

++++
	In this two-part tutorial you will
learn how to get started with the development of <a href="https://www.seamframework.org/">Seam</a> applications
with RichFaces using Eclipse with JBoss Tools. In <a href="/2009/03/23/seam-tutorial-1-2-richfaces-and-pa/">the 2<sup>nd</sup>
part</a> we will create a simple page with a table presenting data on
multiple pages using Ajax and its model stored as a POJO Component in
the Seam Conversation scope. I assume that you already have some
basic knowledge of Seam and JSF, for instance that you know what a
Component or the Conversation scope are.<br><br><p style="margin-bottom:0;">My aim in this tutorial series is to
create a Seam portlet displaying data in a paged (and ideally also
sortable and filterable, but let's be realistic) table running in the
Liferay portal. The tutorial will follow my steps with all the dead ends and mistakes so that you too can learn from them.<br /></p><h5 class="western">Why Seam?</h5>
<p>In my opinion, Seam is one of the best application frameworks for
Java web application development. It's not the best one because none
is and it always depends on the task at hand what solution/tool is the most
suitable one. I like Seam because it integrates so well some of the most
popular and standard or de facto standard technologies (all of them
are optional in a Seam application) including JSF, EJB 3.0, JPA, and
Hibernate. Not only does it integrate them but also fixes their
shortcomings (especially in JSF) and adds invaluable features you've
been looking for for ages, like the conversation scope, eventing, or
runtime component injection.</p>
<h5 class="western">Why RichFaces?</h5>
<p>The answer is simple: go to <a href="https://livedemo.exadel.com/richfaces-demo/richfaces/extendedDataTable.jsf?c=extendedDataTable&amp;tab=usage">see
the RichFaces demo</a> :-). RichFaces is a library of good-looking,
dynamic (Ajax) JSF components and support for ajaxifying just about
anything. With RichFaces you can easily create Web 2.0 applications
with a professional look and feel that let users forget that they're
working in a browser with a remote server. You can use context menus,
modal dialogs, sortable, filterable, and pageable tables, rich text
editor, cool visual effects, and more.</p>
<p>RichFaces isn't the only such library, another popular one is
ICEfaces, which has been embraced by Sun. But RichFaces is supported
by JBoss and works well with its server, portal, and Seam. Remember I
told you Seam is an integration framework?</p>
<h5 class="western">Why Liferay portal?</h5>
<p>Though developing portlet applications is considerably more
difficult than plain old web applications as has been <a href="https://www.jroller.com/holy/entry/are_portlets_dead_jsr168_and">discussed
recently</a> and as we will certainly yet see, there are also the
benefits of content integration, unified front-end to applications
etc. that sometimes outweigh the problems.</p>
<p>I use Liferay because that's the portal chosen (for the majority
that can't afford WebSphere Portal) by the bright guys in the portal
group of my company, <a href="https://www.ibacz.eu/-English-">IBA CZ</a>.
And also because, as a user, I find it more appealing than JBoss
Portal.</p>
<h2 class="western">Environment setup</h2>
<p>You will need the software listed below. Make
sure to have the same versions or&nbsp; unexpected problems may happen (examples
later).</p>
<ul><li><p><a href="https://downloads.sourceforge.net/jboss/jboss-portal-2.7.1.zip?modtime=1232471311&amp;big_mirror=1">JBoss Portal 2.7.1</a>
 (with bundled JBoss AS 4.2.3)</p>
	</li><li><p><a href="https://java.sun.com/javase/downloads/index_jdk5.jsp">JDK 1.5</a> (mine is jdk1.5.0_17 )
</p>
	</li><li><p align="left"><a href="https://sourceforge.net/project/showfiles.php?group_id=22866&amp;package_id=163777&amp;release_id=602455">Seam 2.0.2 SP1</a> (I've preferred this to the latest 2.1.1 GA as it works better with JBoss Tools)It's already bundled with RichFaces, no separate download of them needed.</p><ul><li>Check the unpacked folder - there most interesting things are the documentation example applications.<br /></li></ul></li><li>Eclipse Ganymede for Java EE v. <a href="https://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/ganymedesr1">3.4.1</a> (SR1) though you can prefer to try your luck with the <a href="https://www.eclipse.org/downloads/packages/">latest one</a> (3.4.2 as of today).<br /></li><li><p>JBoss Tools as of 2008-12-19  - Seam Tools and JBoss Tools RichFaces 3.0.0
	CR1-R200, JBossAS Tools 2.0.0 CR1-R200, JBoss Portlet 1.0.0 CR1-R200, plus some others. I've installed them via Eclipse Update Manager (Help &gt; Software Updates) from the update site http://download.jboss.org/jbosstools/updates/development/ Today it contains an updated version CR2 from 2009-01-28. You can install an older version after unchecking &quot;Show only the latest versions ...&quot;<br /></p></li></ul>
<p>For the sake of completeness I should say that I'm developing
under Linux, namely Ubuntu 8.04 Hardy.</p>
<p>I won't describe how to install Eclipse and JBoss Tools, you'll
surely manage that :-). The other items you can just download and
unpack somewhere. for example to /tmp/tutorial/.</p>
<h2 class="western">Eclipse preparation</h2>
<p>After having installed Eclipse and its JBoss Tools plugins:</p>
<ol><li><p>Let Eclipse know about the JDK 1.5: Window &gt; Preferences &gt;
	Java &gt; Installed JREs &gt; Add... &gt; Standard VM &gt; enter
	path to the unpacked JDK etc. <br />Name it “<i>jholy-jdk1.5.0_17</i>”<span> (sorry, I was lazy to rename mine for this tutorial).</span></p>
	</li><li><p>Let Eclipse know about the JBoss server: Window &gt;
	Preferences &gt; Server &gt; Runtime Environments &gt; Add... &gt;
	select JBoss, a division of Red-Hat – JBoss 4.2 runtime, ...,
	browse to/enter the directory where you unpacked JBoss to
	(/tmp/tutorial/jboss-portal-2.7.1/), and make sure select the previously defined
	JRE (JDK) 1.5. &quot;jholy-jdk1.5.0_17&quot;.<br />Name it “<i>JBoss 4.2.3 Runtime and Portal
	2.7.1</i>”.</p>
</li></ol>
<h2 class="western">Creating the project</h2>
<p>Create the project: <i>File &gt; New &gt; Project &gt; Seam &gt; Seam
Web Project</i></p><br><br><ul><li><p>Project name: <i>seamTutorial1<br /></i><span style="font-style:normal;">Note:
	Seam requires the project name to start with a lower-case letter.</span></p>
	</li><li><p>Target Runtime: <i>JBoss 4.2.3 Runtime and Portal 2.7.1</i>
	</p>
	</li><li><p>Dynamic Web Module Version: 2.5</p>
	</li><li><p>Target Server: click New &gt; select JBoss AS 4.2, enter
	Server name <i>JBoss_4.2.3</i>, select the recently defined Server runtime environment
	<i>JBoss 4.2.3 Runtime and Portal 2.7.1</i>, click Next &gt;, enter
	Name <i>JBoss_4.2.3</i>, Next, Finish.</p>
	</li><li><p>Configuration: select <i>Dynamic Web Project with Seam 2.0</i>
	(and not the default 1.2). <br /></p>
</li></ul>
<p><img vspace="0" hspace="0" border="0" align="baseline" alt="Screenshot - NewSeamProject 1 (Seam Web Project)" src="https://jroller.com/holy/resource/seamTutorial1/Screenshot-NewSeamProject1.png" /></p>
<p>Click Next, don't modify anything</p>
<p><img vspace="0" hspace="0" border="0" align="baseline" alt="Screenshot - NewSeamProject 2 (Web Module)" src="https://jroller.com/holy/resource/seamTutorial1/Screenshot-NewSeamProject2.png" /></p>
<p>Click Next, don't modify anything</p>
<p><img vspace="0" hspace="0" border="0" align="baseline" alt="Screenshot - NewSeamProject 1 (JSF Capabilities)" src="https://jroller.com/holy/resource/seamTutorial1/Screenshot-NewSeamProject3.png" /></p><br><br><p>Click Next to get to the Seam Facet page:</p>
<ul><li><p>Seam Runtime: click Add..., browse to the directory where you
	unpacked Seam to (/tmp/tutorial/jboss-seam-2.0.2.SP1/), give it the
	name jboss-seam-2.0.2.SP1 and set version to 2.0.</p>
	</li><li><p>Deploy as: WAR</p>
	</li><li><p>Database</p>
	<ul><li><p>Database Type: Derby</p>
		</li><li><p>Connection profile: click New... &gt; select Derby, enter
		Name <i>SeamTutorial1Derby</i>, Next &gt;, from Drivers select
		“Derby Embedded JDBC Driver 10.2 Default” (if you haven't it
		there, download it and add it via the small (+) icon), enter a
		non-existent folder as the Database location (e.g.
		/tmp/tutorial/SeamTutorial1Derby), User name <i>sa</i>, leave the password
		empty</p>
		<ul><li><p>Test Connection. This will fail if the database location
			folder already exists otherwise it says Ping succeeded!</p>
			</li><li><p>Finish the connection profile creation.<br /></p>
		</li></ul>
	</li></ul>
	</li><li><p>Leave the other fields as they are and click Finish to finish the new Seam project wizard.<br /></p>
</li>
</ul><br><br><p><img vspace="0" hspace="0" border="0" align="baseline" alt="Screenshot - NewSeamProject 4 (Seam Facet)" src="https://jroller.com/holy/resource/seamTutorial1/Screenshot-NewSeamProject4.png" /></p><br><br><p>Two new projects are created: seamTutorial1 and
seamTutorial1-test. The project seamTutorial1 contains quite a
handful of files:</p><br><br><p><img vspace="0" hspace="0" border="0" align="baseline" alt="Screenshot - Package Explorer view of the project seamTutorial1" src="https://jroller.com/holy/resource/seamTutorial1/Screenshot-NewSeamTutorial1-PackageExplorer.png" /></p><br><br><p>Open the Seam perspective: <i>Window &gt; Open &gt; Other... &gt;
Seam</i>. This gives you some useful views, including Seam Components (shows name, scope) and (for page development) JBoss Tools Palette. I'd recommend you to open also JBoss Server View to view and manage your JBoss and Tomcat servers.<br /></p><h2 class="western">Running the generated application</h2>
<p>Attempt 1:</p>
<ul><li><p>Right-click on the file  seamTutorial1/WebContent/home.xhtml &gt; Run As &gt; Run on Server &gt; select Choose an
	existing server and select the previously defined JBoss_4.2.3.</p>
	</li><li><p>Click Next, you should see the page Add and Remove Projects
	with the Configured projects
	seamTutorial1/resources/seamTutorial1-ds.xml and seamTutorial1,
	click Finish.</p>
	</li><li><p>There may be the warning “The connection was refused when
	attempting to contact localhost:8080”. That's nothing to worry
	about, the browser is just faster than the server.</p>
	</li><li><p>A Console view should pop up where you can see the log of the
	starting JBoss application server.</p>
	<ul><li><p>If you see there errors similar
		to<br /><font color="#000000"><font face="Monospace"><font size="2">UnsupportedOperationException:
		setProperty must be overridden by all subclasses of
		SOAPMessage.</font></font></font><br />then you haven't been attentive<span style="background:rgb(255,255,0) none repeat scroll 0 0;"></span> enough and are
		running the server with Java 1.6 instead of 1.5. Either switch to
		1.5 or read the release notes of JBoss to learn how to fix this.</p>
		</li><li><p>You may see there <br /><font color="#000000"><font face="Monospace"><font size="2">IllegalArgumentException:
		Exception setting property org.jboss.seam.core.init.jndiPattern on
		component org.jboss.seam.core.init. Expression @jndiPattern@
		evaluated to null.</font></font></font></p>
		<ul><li><p style="margin-bottom:0;">Seam applications are prepared for
			being deployed by Ant, which would replace the token @jndiPattern@ in
			components.xml with a correct value. Unfortunately this version of
			JBoss Tools forgets to do it so you must do it manually.</p>
			</li><li><p style="margin-bottom:0;">Replace the token @jndiPattern@
			in components.xml with a valid expression, for example #{ejbName}/local.
			See Seam reference, chapter <a href="https://docs.jboss.com/seam/2.0.2.SP1/reference/en-US/html/configuration.html#d0e15261"><i>26.1.5. Integrating Seam with your
			EJB container</i></a>.<br />Or better change the project's build path to WebContent/WEB-INF/classes to get this token replaced with a valid value automatically, see the update from 2009-03-23 at the end of this post.<br />
</p>
		</li></ul>
	</li></ul>
</li></ul>
<p>Attempt 2:</p>
<ul><li><p>Start the application as before. It may take over 7 minutes,
	get a cup of tee. You might notice in the Console view that Seam
	prints name, scope, and type of each installed component. The
	interesting lines there are:<br /><font color="#000000"><font face="Monospace"><font size="2">INFO
	 [Server] JBoss (MX MicroKernel) [4.2.3.GA (build:
	SVNTag=JBoss_4_2_3_GA date=200807181417)] Started in
	4m:45s:459ms<br />...<br />INFO  [TomcatDeployer] deploy,
	ctxPath=/seamTutorial1, warUrl=...<br />INFO  [ServletContextListener]
	Welcome to Seam 2.0.2.SP1<br />...<br />INFO  [SeamFilter] Initializing
	filter: org.jboss.seam.debug.hotDeployFilter</font></font></font> (the last line)<br /></p>
	</li><li><p style="margin-bottom:0;">Enter the address
	<a href="https://localhost:8080/seamTutorial1">http://localhost:8080/seamTutorial1</a>
	to your browser. It may take a couple of minutes to load.</p>
</li></ul><br><br><p><img vspace="0" hspace="0" border="0" align="baseline" alt="Screenshot -  seamTutorial1's home.xhtml running in Firefox" src="https://jroller.com/holy/resource/seamTutorial1/Screenshot-seamTutorial1_home-Firefox.png" /></p><br><br><h2 class="western">Request for feedback</h2><p class="western">If you find anything inaccurate or not enough clear in this tutorial or if you encounter some other problems that you would like to share with others to help them avoid these, please let me know. Make the continuous improvement through collaboration possible :-).<br /></p><h2 class="western">Summary</h2>
<p>We have set up a Seam development environment, overcame some
problems, and managed to get a simple application running.</p>
<p>In the next part we will develop our own conversation-scope
Component and a page with a RichFaces paged table.</p><h3>Update 2009-03-23 <br /></h3><h4>Replacing&nbsp;<font color="#000000"><font face="Monospace"><font size="2"> <font size="3">@jndiPattern@ </font></font></font></font>with a valid value in the correct way</h4><p>During the first deploy we've got the following error:</p><p><font color="#000000"><font face="Monospace"><font size="2">IllegalArgumentException:
		Exception setting property org.jboss.seam.core.init.jndiPattern on
		component org.jboss.seam.core.init. Expression @jndiPattern@
		evaluated to null.</font></font></font> <br /></p><p>As Dan Allen has pointed out, the token @jndiPattern@ should be replaced by Seam in runtime using the property jndiPatter from components.properties. And actually this property is defined in the project's src/main/components.properties as jndiPattern=\#{ejbName}/local ('\' tells the properties that the # isn't a comment start). So why it doesn't replace the token? It turns out that the project has its compile path set incorrectly and a likely side effect is that this file isn't deployed to the server. </p><p>To fix it, In Project &gt; Properties &gt; Java Build Path &gt; Source change the Default output folder from seamTutorial1/build/classes to seamTutorial1/WebContent/WEB-INF/classes. After a redeployment, everything is suddenly working.<br /></p><p> By the way I really recommend you reading Allen's article about <a href="https://www.jsfcentral.com/articles/speed_up_your_jsf_app_1.html">improving Seam application performance</a>.<br /></p><h4><br /></h4>
++++
