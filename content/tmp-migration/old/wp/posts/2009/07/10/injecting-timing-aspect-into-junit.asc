{:title
 "Injecting timing aspect into JUnit test in Eclipse using AspectJ, AJDT",
 :date "2009-07-10",
 :layout :post,
 :tags ["testing" "java" "library" "tool"],
 :tags-orig ["ajdt" "AOP" "AspectJ" "eclipse" "java" "junit"],
 :categories ["Languages"],
 :extra-css #{}
}

++++
<h2>Introduction</h2>
This blog describes my experience with using <a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming">AOP</a>, namely AspectJ, to measure the individual execution times and their average of a particular low-level method invoked many times during a JUnit test run from within Eclipse. It concentrates on creating the aspect and integrating (weaving) it into the JUnit test execution in the Eclipse environment.<br><br>Of course it would be easier to use e.g. profiler but I wanted to play with AOP/AspectJ to learn it better because it's an incredibly useful tool for a number of problems and you can use it even if you don't have access to the application's source code and/or cannot control the runtime environment (such as running it in a profiler).
<h3>Why AspectJ?</h3>
There are also other AOP tools for Java but it seems that AspectJ is the most wide-spread one, especially since its merge with AspectWerkz. I used to dislike it because it required a special extended Java syntax and compiler but this isn't true anymnore (more on that later).
<h2>Disclaimer</h2>
I'm only learning AspectJ, so the solution may be not and likely isn't the best one. I appreciate improvement suggestions.
<h2>Preparing the environment</h2>
I use <a href="https://www.poweredbypulse.com/">Pulse</a> to set up my Eclipse environment. For this I'll use:
<ul>
	<li>Eclipse 3.4 for Java EE (Pulse doesn't yet support 3.5)</li>
	<li>AJDT 2.0.0</li>
	<li>AspectJ 1.6.5</li>
	<li>JUnit 4</li>
	<li>JDK 1.5.0.18 (the test fails with 1.6 due to xml libs incompatibility) and Java 5.0 syntax</li>
</ul>
<h2>Implementing the timing aspect</h2>
My goal is to create an aspect invoked around the method in question that will measure the time it takes for the method to execute, log it, and compute and log the average execution time.<br><br>Since AspectJ 5 we have two options - either using the older custom AspectJ syntax with AspectJ compiler or using annotations. I'll explore both possibilities.
<h3>Project structure</h3>
First, we have a Java project with the junit test that we want to run with the timing aspect. It depends on another project with the actual class and method whose performance we want to measure.<br><br><strong>MyLibraryProject</strong>
<ul>
	<li>/src/main/java/com/tonbeller/jpivot/xmla/XMLA_SOAP.java</li>
</ul>
<strong>MyTestProject</strong>
<ul>
	<li>/src/main/java/
<ul>
	<li>eu/ibacz/studna/jpivot/OLAPModelStructure.java
- calls (indirectly) XMLA_SOAP.discoverMem during its execution</li>
</ul>
</li>
	<li>/src/test/java/
<ul>
	<li>eu/ibacz/studna/jpivot/OLAPModelStructurePerformanceTest.java
- standard JUnit4 test case</li>
</ul>
</li>
</ul>
We create another project to hold our new shiny aspect: File &gt; New &gt; Other... &gt; AspectJ &gt; AspectJ Project =&gt;<br><br><strong>MyAspectProject</strong>
<ul>
	<li>/src/
<ul>
	<li>eu/ibacz/pbns/util/aspect/TimingAspect.aj (solution 1)</li>
	<li>eu/ibacz/pbns/util/aspect/TimingAnnotatedAspect.java (solution 2)</li>
</ul>
</li>
</ul>
<h3>Solution 1: using custom ApectJ syntax</h3>
Before AspectJ 5 this was the only option and it is still more powerful and has better support of AJDT (according to the <a href="https://www.eclipse.org/aspectj/doc/released/faq.php#q:codeversusannotationstyles">FAQ</a>). Basically you write the aspect in an extended Java syntax in an .aj file and compile it with a special AspectJ compiler - though this is done behind the scene for you thanks to having created an AspectJ project, which also provides you with a special AspectJ/Java editor for .aj and .java aspect files.<br><br>Enough talking, let's see the aspect:<br><br>File<strong> eu/ibacz/pbns/util/aspect/TimingAspect.aj:</strong><br><br><pre><code>
package eu.ibacz.pbns.util.aspect;<br><br>import ...<br><br>public aspect TimingAspect {<br><br>    // instance/class field ...<br><br>    public TimingAspect() {
        formatter = NumberFormat.getIntegerInstance();
        formatter.setMinimumIntegerDigits(3);
        System.out.println(getClass() + &quot; instantiated!&quot;);
    }<br><br>//  before(): execution(public * com.tonbeller.jpivot..XMLA_SOAP.*(..) ) {
//      System.err.println(&quot;About to call &quot; + thisJoinPoint.getSignature().toShortString() + &quot;, args:&quot; + Arrays.toString(thisJoinPoint.getArgs()) );
//  }<br><br>    Object around() : execution( * com.tonbeller.jpivot..XMLA_SOAP.discoverMem(..) ) {<br><br>        final long startTimeCpuMs = getCurrentTimeMs();
        final long startTimeMs = System.currentTimeMillis();<br><br>        Object result = proceed();<br><br>        final long endTimeMs = System.currentTimeMillis();
        final long endTimeCpuMs = getCurrentTimeMs();<br><br>        final long execTimeMs = endTimeMs - startTimeMs;
        final long execTimeCpuMs = endTimeCpuMs - startTimeCpuMs;<br><br>        ++totalExecutionCount;
        totalExecutionTimeMs += execTimeMs;
        totalCpuExecutionTimeMs += execTimeCpuMs;<br><br>        final String msg = &quot;executing discoverMem #&quot; + formatter.format(totalExecutionCount) +
                &quot; took &quot; + execTimeCpuMs + &quot;ms of CPU, &quot; +
                execTimeMs + &quot;ms real; current average is [ms/call]: &quot; +
                totalCpuExecutionTimeMs / totalExecutionCount + &quot; for CPU, &quot; +
                totalExecutionTimeMs / totalExecutionCount + &quot; real time.&quot;;
        System.out.println(getClass().getName() + &quot;: &quot; + msg);<br><br>        return result;
    }<br><br>}
</code></pre><br><br>(I've ommited the fields and some methods for brevity.)<br><br>PS: You can use the commented-out before adivce to print all methods called on XMLA_SOAP including their name and arguments. This is useful to find out whether the method you're trying to measure is actually called at all.
<h3>Solution 2: using annotation (@AspectJ)</h3>
Since AspectJ 5 we can use a normal Java class with special annotations to define an aspect. It's less powerful (see above) but more familiar to a Java developer and more comfortable to use since it doesn't need any special compiler (the annotations are processed by AspectJ during weaving).<br><br>File <strong>eu/ibacz/pbns/util/aspect/TimingAnnotatedAspect.java</strong>:<br><br><pre><code>
package eu.ibacz.pbns.util.aspect;<br><br>import ...<br><br>public class TimingAnnotatedAspect {<br><br>    // instance/class field ...<br><br>    public TimingAspect() {
        formatter = NumberFormat.getIntegerInstance();
        formatter.setMinimumIntegerDigits(3);
        System.out.println(getClass() + &quot; instantiated!&quot;);
    }<br><br>    @Around(&quot;execution( * com.tonbeller.jpivot..XMLA_SOAP.discoverMem(..) )&quot;)
    public Object around(ProceedingJointPoint pjp) {<br><br>        final long startTimeCpuMs = getCurrentTimeMs();
        final long startTimeMs = System.currentTimeMillis();<br><br>        Object result = pjp.proceed();<br><br>        final long endTimeMs = System.currentTimeMillis();
        final long endTimeCpuMs = getCurrentTimeMs();<br><br>        final long execTimeMs = endTimeMs - startTimeMs;
        final long execTimeCpuMs = endTimeCpuMs - startTimeCpuMs;<br><br>        ++totalExecutionCount;
        totalExecutionTimeMs += execTimeMs;
        totalCpuExecutionTimeMs += execTimeCpuMs;<br><br>        final String msg = &quot;executing discoverMem #&quot; + formatter.format(totalExecutionCount) +
                &quot; took &quot; + execTimeCpuMs + &quot;ms of CPU, &quot; +
                execTimeMs + &quot;ms real; current average is [ms/call]: &quot; +
                totalCpuExecutionTimeMs / totalExecutionCount + &quot; for CPU, &quot; +
                totalExecutionTimeMs / totalExecutionCount + &quot; real time.&quot;;
        System.out.println(getClass().getName() + &quot;: &quot; + msg);<br><br>        return result;
    }<br><br>}</code></pre><br><br>As you can see, we've replaced the special AspectJ syntactical elements with annotationes @Aspect and @Around (there is also @Pointcut and others).<br><br>(I've ommited the fields and some methods for brevity.)
<h3>Conclusion: Annotations vs. custom syntax</h3>
When deciding
whether to use the the old custom AspectJ syntax and .aj files with an
AspectJ compiler or the new annotation-based aspects in standard .java
files you have to take into account that the annotation-based aspects
are less powerful (regarding what all can be weaved) and have weaker
support of the AJDT tooling so that your aspects may not display in its
views etc.
<h3>Common project info</h3>
For both projects we need to have the class to modify with the aspect, in our case XMLA_SOAP, on the classpath, to get some special support from AJDT (see below).<br><br>The good thing when using AJDT is that if a pointcut definition (such as the execution(...) above) doesn't match an existing class/method, you will be warned about it - in Eclipse there will be the standard warning marker with text like "<em>no match for this type name: XMLA_SOAP [Xlint:invalidAbsoluteTypeName]</em>". This works both for .aj and .java files though it may not discover all issues.<br><br>The common code, if you're interested:<br><br><pre><code>
    private ThreadMXBean threadMxb;<br><br>    /**
     * Return the current time in miliseconds, if possible, return only the current thread's CPU time, if not,
     * return system time.
     * &lt;p&gt;
     * thread's CPU time is usually few times less than the absolute time between
     * its start and end due to the fact that it has to share the CPU with other processes/threads.
     */
    private long getCurrentTimeMs() {
        return getThreadMxBean().isCurrentThreadCpuTimeSupported()?
                threadMxb.getCurrentThreadCpuTime() / 1000000 : System.currentTimeMillis();<br><br>    }<br><br>    /** Lazy-init getter. */
    private ThreadMXBean getThreadMxBean() {
        if (threadMxb == null) {
            threadMxb = ManagementFactory.getThreadMXBean();<br><br>            if (threadMxb.isThreadCpuTimeSupported()) {
                LOG.info(&quot;Thread user/cpu time monitoring supported.&quot;);
                if (threadMxb.isThreadCpuTimeSupported() &amp;amp;&amp;amp; threadMxb.isThreadCpuTimeEnabled()) {
                        LOG.info(&quot;Thread user/cpu time monitoring supported&amp;amp;enabled.&quot;); // TODO do only once
                } else {
                    LOG.warn(&quot;Thread user/cpu time monitoring supported but disabled.&quot;);
                }
            } else {
                LOG.warn(&quot;Thread user/cpu time monitoring NOT supported.&quot;);
            } // supported thr. time
        }<br><br>        return threadMxb;
    } /* getThreadMxBean */
</code></pre>
<h2>Integrating the aspect into the JUnit test</h2>
Our tracing aspect is ready and we want to apply it to XMLA_SOAP.discoverMem when running our JUnit test OLAPModelStructurePerformanceTest. Unfortunately AJDT doesn't provide any support for running JUnit tests with AspectJ support though it does that for normal java programs via the additional Run As... &gt; AspectJ/Java Application menu item therefore we will need to do it manually. Maybe there is a better way but this is what I did:
<ol>
	<li>Get aspectjweaver.jar - it includes complete AspectJ runtime plus Java 5 agent lib.</li>
	<li>Modify the Run configuration of the JUnit test (Run &gt; Run Configurations) as follows:
<ol>
	<li>On the tab Arguments, add the VM argument
-javaagent:/path/to/aspectjweaver.jar</li>
	<li>On the tab Classpath, click on User Entries and add there the project MyAspectProject so that it can see the aspect.</li>
</ol>
</li>
	<li>In the project MyTestProject create under /src/test/java/ (or any other source folder) META-INF/aop.xml with the content shown below.</li>
</ol>
File <strong>aop.xml</strong> :<br><br><pre><code>
&lt;aspectj&gt;
    &lt;aspects&gt;
        &lt;!-- aspect name=&quot;eu.ibacz.pbns.util.aspect.TimingAspect&quot;/--&gt; &lt;!--  fails if not found --&gt;
        &lt;aspect name=&quot;eu.ibacz.pbns.util.aspect.TimingAnnotatedAspect&quot;/&gt;
    &lt;/aspects&gt;
&lt;/aspectj&gt;
</code></pre><br><br>This file tells AspectJ's Load-Time Weaver what aspects to introduce into the existing classes. Without it no instrumentation would occur. You can configure here which of the 2 aspects to use. You can also "specify
the set of types that should be woven. If no include elements are specified
then all types visible to the weaver will be woven". See the <a href="https://www.eclipse.org/aspectj/doc/next/devguide/ltw-configuration.html">documentation on aop.xml</a> and Load-Time Weaving configuration for more info.
<h2>Troubleshooting load-time weaving</h2>
If you need to learn more about what AspectJ does during the weaving and whether it does modify the target class or not (e.g. due to wrong pointcut match pattern or classpath order) you may enable some logging using either some properties on the command-line or by specifying this in the aop.xml:<br><br><pre><code>
&lt;aspectj&gt;
    &lt;aspects&gt;
        &lt;!-- aspect name=&quot;eu.ibacz.pbns.util.aspect.TimingAspect&quot;/--&gt; &lt;!--  fails if not found --&gt;
        &lt;aspect name=&quot;eu.ibacz.pbns.util.aspect.TimingAnnotatedAspect&quot;/&gt;
    &lt;/aspects&gt;
    &lt;weaver options=&quot;-verbose -showWeaveInfo &quot;&gt; &lt;!-- add -debug to print every class [not] woven  --&gt;
        &lt;include within=&quot;com.tonbeller.jpivot.xmla..*&quot;/&gt; &lt;!-- Notice the 2 dots to include also subpackages --&gt;
        &lt;include within=&quot;eu.ibacz..*&quot;/&gt;
    &lt;/weaver&gt;
&lt;/aspectj&gt;
</code></pre><br><br>If the weaving proceeds as expected, this should produce an output similar to the one below:
<pre>[AppClassLoader@1858610] info AspectJ Weaver Version DEVELOPMENT built on Friday Aug 29, 2008 at 00:25:33 GMT
[AppClassLoader@1858610] info register classloader sun.misc.Launcher$AppClassLoader@1858610
[AppClassLoader@1858610] info using configuration /home/jholy/devel/MyTestProject/target/classes/META-INF/aop.xml
[AppClassLoader@1858610] info register aspect eu.ibacz.pbns.util.aspect.TimingAspect
[AppClassLoader@1858610] info processing reweavable type com.tonbeller.jpivot.xmla.XMLA_Model: com/tonbeller/jpivot/xmla/XMLA_Model.java
[AppClassLoader@1858610] info successfully verified type eu.ibacz.pbns.util.aspect.TimingAspect exists.
  Originates from eu/ibacz/pbns/util/aspect//home/jholy/devel/MyAspectProject/src/eu/ibacz/pbns/util/aspect/TimingAspect.aj
[AppClassLoader@1858610] weaveinfo Join point 'method-execution(void com.tonbeller.jpivot.xmla.XMLA_Model.retrieveMemberChildren(com.tonbeller.jpivot.xmla.XMLA_Member))'
 in Type 'com.tonbeller.jpivot.xmla.XMLA_Model' (XMLA_Model.java:1094) advised by around advice from 'eu.ibacz.pbns.util.aspect.TimingAspect' (TimingAspect.aj:56)</pre>
The line '<em>info register aspect eu.ibacz.pbns.util.aspect.TimingAspect</em>' tells us that AspectJ has found the aspect referenced from aop.xml. If the aspect class didn't exist then it would print an error message. The information about registered aspects, configuration aop.xml and AspectJ version is displayed thanks to the option -verbose.<br><br>The line '<em>weaveinfo Join point ...</em>' tells us that AspectJ has actually found and modified the target and is enabled with the -showWeaveInfo flag.<br><br>If you enabled -debug in aop.xml, AspectJ would print the list of classes that it has processed (whether there was an aspect to apply or not) - this can help you to verify that it doesn't ignore your target class.<br><br>Note: all weaver messages are prefixed with the classloader the weaver instance is attached to, e.g. in a web server you'd have multiple instances.
<h2>Conclusion</h2>
It works! :-)
<h3>Limitations of aop.xml</h3>
AspectJ is extremely powerful, especially because it isn't limited to "advicing" or intercepting method calls but can also intercept field access, add fields, inject interface implementation into classes and much more.<br><br>What I find quite limiting is that in aop.xml you cannot specify very much what should or should not be woven, only the classes to include in/exclude from the process. If you want to limit to what methods etc. your apect applies, you have to change that in its source code and recompile it :-)
<h2>Resources and links</h2>
<ul>
	<li><a href="https://www.eclipse.org/aspectj/doc/released/quick5.pdf">AspectJ Quick Reference</a> - pdf, 4 pages.</li>
	<li><a href="https://www.eclipse.org/aspectj/doc/released/progguide/semantics-pointcuts.html">AspectJ: Semantics of pointcuts</a> - we need the Type patterns described close to the very end</li>
</ul>
Other
<ul>
	<li><a href="https://www.irisa.fr/triskell/Softwares/protos/advicetracer/">AdviceTracer</a> - JUnit extension for testing that advices get applied where they're expected to. An <a href="https://selab.csie.ntut.edu.tw/silder/81.pdf">introductory presentation</a>.</li>
</ul>
++++
