{:title
 "Hack: Quickly Verify That All Your Mocha/Chai Tests Have Valid Assertions",
 :date "2015-05-06",
 :layout :post,
 :tags ["JavaScript"],
 :tags-orig ["JavaScript"],
 :categories ["Testing"],
 :extra-css #{}
}

++++
<a href="https://chaijs.com/">Chai</a> is a popular Node/browser assertion library. However - as everything - it has its flaws. <a href="https://github.com/moll/js-must#asserting-on-property-access">An important flaw is that it performs checks on property access</a> - and if you e.g. misspell the name of an assertion, it will be just ignored (for there is no way for Chai to know that you tried to access a non-existent property). This may be <a href="https://github.com/chaijs/chai/issues/407">fixed in the future with ES6 proxies</a> but so far you risk having tests that actually do not test anything. Though you should of course always develop your tests so that they initially fail and thus you know they actually assert something :-).<br><br>Anyway, there is a neat quick way to verify that all your tests have at least one valid assertion - simply replace <code>expect</code> with <code>expect.not</code>.
<!--more--><br><br>If you use <a href="https://mochajs.org/">Mocha</a> and its <code>mocha.opts</code> to have a single file (<code>common.js</code> in my case) that imports Chai and exposes it to all tests then you have a single place do do this:<br><br><pre><code>
// file: test/mocha.opts
--require test/common
--recursive
// file: test/common.js
// Before: global.expect = require(&quot;chai&quot;).expect;
var expect = require(&quot;chai&quot;).expect;
global.expect = function(target) {
    return expect(target).not;
}
</code></pre><br><br>When this change is in place, you expect all your tests to fail. If any one is passing then it has no valid assertions.<br><br>Enjoy.
++++
