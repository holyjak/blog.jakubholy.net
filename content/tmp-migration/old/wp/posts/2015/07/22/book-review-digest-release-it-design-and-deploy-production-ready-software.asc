{:title
 "Book Review & Digest: Release It! Design and Deploy Production-Ready Software",
 :date "2015-07-22",
 :layout :post,
 :tags ["book" "architecture" "DevOps" "performance"],
 :tags-orig ["architecture" "book" "ops" "performance"],
 :categories ["[Dev]Ops"],
 :extra-css #{}
}

++++
By Michael T. Nygard, 2007, ISBN: 978-0-9787-3921-8<br><br>My digest and review of the book.<br><br><h1>Review</h1><br><br>Of the books I have read, <a href="https://pragprog.com/book/mnee/release-it">Release It!</a> is the one I would require all "senior" developers to read (together with something like <a href="https://eu.wiley.com/WileyCDA/WileyTitle/productCd-0470856122.html">Architecting Enterprise Solutions: Patterns for High-Capability Internet-based Systems</a>). Especially the first part on stability with its patterns and anti-patterns is a must read. Without knowing and applying them, we create systems that react to problems like a dry savannah to a burning match. I found also to next to last chapter, #17 Transparency, very valuable, especially the metrics and design of the OpsDB and observation practices.<br><br>One thing I have left out of the digest which is really worth reading are the war stories that introduce each section, they are really interesting, inspiring, and educational.<br><br><h1>Extra Links</h1><br><br><ul>
<li>Release It! slides: http://gotocon.com/dl/jaoo-sydney-2009/slides/MichaelT.Nygard_FailureComesInFlavoursPart2.pdf</li>
<li>https://github.com/Netflix/Hystrix/</li>
<li>Netflix's Dependency Command talks about using circuit breakers and a thread pool limit http://techblog.netflix.com/2012/02/fault-tolerance-in-high-volume.html</li>
<li><a href="https://msdn.microsoft.com/en-us/library/dn600223.aspx">MSDN Guidance for Cloud Applications: Design Patterns</a> - Circuit Breaker and many more highly useful patterns</li>
</ul><br><br><h1>Stability</h1><br><br>Stability x longevity bugs<br><br><img class="wp-image-4449 size-large" src="/images/2015/07/releaseit-patterns.jpg?w=660" alt="ReleaseIt-patterns" width="660" height="465" /> Selected (anti)patterns<br><br><h2>Stability antipatterns</h2><br><br><h3>Integration points</h3><br><br>Integration point = call to a DB, WS, ... . Stability risk #1.<br><br><!--more--><br><br><ul>
<li>Every will eventually fail</li>
<li>Many possible errors: network, application, ...</li>
<li>Symptomps: protocol violation, slow response, hang, abruptedly closed connections, ...</li>
<li>Be defensive to prevent cascading failures when the remote system is having problems - Circuit Breaker, Timeouts, Decoupling Middleware, Handshaking; use Test Harness to test</li>
<li>Ex.: connections refused (catch: it can take a <em>long</em> time to find out that you cannot connect, f.ex. when it is listening but unable to process requests or when ACKs do not arrive and it keeps on retrying); a firewall may throw away an old connection without telling anyone, silently dropping packets</li>
</ul><br><br><h3>Chain Reactions</h3><br><br>Load-balanced application with a defect (typically resource leak or load-related crash). If the defect is triggered in one instance and it fails, the remaining ones are the more likely to fail (increased load, ...). Bulkheads can help by splitting nodes into separate sets with separate, smaller chain reactions occuring hopefully at different times. Can lead to a cascading failure in a calling layer.<br><br><ul>
<li>One server down jeopardizes the rest</li>
<li>Hunt for resource leaks</li>
<li>Hunt for obscure timing bugs - traffic can trigger obscure race conditions; if a deadlock kills a server then increased load on the remaining ones is more likely to trigger it as well</li>
<li>Defend with Bulkheads, use Circuit Breaker on the caller's side</li>
</ul><br><br><h3>Cascading Failures</h3><br><br>= problems in one layer cause problems in callers - often due to drained resource pools<br><br><ul>
<li>Be paranoid about Integration Points</li>
<li>C.F. often results from a resource pool that gets exhausted when threads check out the resource and get blocked because their call never returns and other threads wait for the resource. A safe resource pool should always limit the time a thread can wait to check out a resource.</li>
<li>A Circuit Breaker protects your system by avoiding calls out to the troubled Integration Point, using Timeouts ensures that you can come back from a call out to the troubled one</li>
</ul><br><br><h3>Users</h3><br><br><ul>
<li>Users consume memory =&gt; minimize session size, use session only for caching so that you can purge its content if memory gets tight (and re-create when needed again). F.ex. in Java use SoftReferences. Beware that session lives until last interaction + timeout, which defaults to 30 min (multiply that by too many users ...)</li>
<li>Users do weird, random things, don't expect them to behave as you expect; if there is a weak spot, they'll find it</li>
<li>Malicious users are out there - keep up-to-date, prevent SQL injection etc.</li>
<li>Sometimes users come in really, really big mobs =&gt; hangs, deadlocks, obscure race conditions; run special stress tests to hammer deep links or hot URLs</li>
<li>Beware artificial users such as bots and indexing spiders - they do many requests in no time, may ignore cookies (=&gt; each one results in a new session)</li>
</ul><br><br><h3>Blocked Threads</h3><br><br><ul>
<li>f.ex. When checking out resources from a connection pool, dealing with caches or object registries, making calls to external systems,or synchronizing threads</li>
<li>The Blocked Threads pattern is the proximate cause of most failures; the lead to Chain Reactions and Cascading Failures</li>
<li>Scrutinize resource pools – threads often blocked on them; f.ex. a deadlock in a DB or incorrect exception handling (and thus a failure to release a connection)</li>
<li>Use proven primitives for concurrency instead of creating your own (see <code>java.util.concurrent</code>)</li>
<li>Defend with Timeouts so that no deadlock lasts forever – always use them</li>
<li>Beware the code you cannot see – f.ex. in libraries</li>
</ul><br><br><h3>Attacks of Self-Denial</h3><br><br>Ex.: An email from marketing to a selected user group with a special deal – which they will share further and suddenly the page if flooded by users. All servers waiting to acquire a lock to update the same, popular item (=&gt; prefer shared-nothing architecture or at least apply decoupling middleware or make the shared resource itself horizontally scalable through redundancy and a synchronization protocol).<br><br><ul>
<li>Be informed – make sure that if there is a marketing campaign, you know about it. Make sure it doesn't use deep links (bypassing your caching proxy), watch our for embedded session Ids in URLs. Create a static “landing zone” pages for the first click from these offers.</li>
<li>Protect shared resources in the case of traffic surges. Watch out for increased front-end load causing exponentially increasing back-end processing.</li>
<li>Expect rapid redistribution (i.e. spreading wide and far) of any cool or valuable offer – there is no such thing as distribution to a limited user set</li>
</ul><br><br><h3>Scaling Effects</h3><br><br>Something that worked in small scale leads to problem when the system is scaled up. Whenever we have a many-to-one or many-to-few relationship, we might run into problems when the “more” side increases, f.ex. the DB may crash when going from 2 AS – 1 DB to 10 AS – 1 DB. A common problem is point-to-point communication.<br><br><ul>
<li>Examine scale differences between production and QA environments to spot Scaling Effects – patterns that work fine in small environments or one-to-one environments might slow down or fail completely when you move to production sizes</li>
<li>Watch out for point-to-point communication – it scales badly since # connections increases as the square of participants</li>
<li>Watch out for shared resources – they can be a bottleneck, a capacity constraint, and a threat to stability. If you have one, stress test it heavily. Make sure its clients will keep working if it gets slow or locks up.</li>
</ul><br><br><h3>Unbalanced Capacities</h3><br><br>U.C. is a special case of Scaling Effects: one side of a relationship scales up much more than the other side. Ex.: Many web servers that typically serve mostly static content and only few dynamic pages provided by back-end servers; if the traffic pattern (workload) suddenly changes, i.e. many users coming to the dynamic functionality, the front-end servers will flood the few back-end ones. It might be impractical to match their capacities for rare spikes so build them both to be resilient in the face of a tsunami of requests. For the front-end, Circuit Breaker will help by relieving the pressure on the back-end when responses get slow or connections get refused. For the back-end, use Handshaking to inform the front-end to throttle back on the requests. Also consider Bulkheads to reserve capacity on the back-end for other transaction types.<br><br><ul>
<li>Examine, compare server and thread counts, especially in Prod vs. QA</li>
<li>Observe near scaling effects and users</li>
<li>Stress both sides of the interface; if you hammer the back-end with 10* more requests than historical max on its most expensive transaction, does it fail or slow down and eventually recover? What does the front-end do when the back-end stops responding or gets very slow?</li>
</ul><br><br><h3>Slow Responses</h3><br><br>Generating a slow response is worse than refusing a connection or returning and error as it ties up resources in both caller and callee. They usually result from excessive demand or due to an underlying problem, f.ex. memory leaks and the resulting garbage collection, network congestion.<br><br><ul>
<li>Slow Responses triggers Cascading Failures, the upstream system will too slow down and become vulnerable to stability problems</li>
<li>For websites, Slow Responses causes more traffic as users hit "reload"</li>
<li>Consider Fail Fast - f.ex. if your SLA requires response in 100ms and a moving average over the last 20 calls exceeds it, you can start refusing requests (the upstream system must be prepared for that)</li>
<li>Hunt for memory leaks or resource contention (f.ex. too few DB connections)</li>
</ul><br><br><h3>SLA Inversion</h3><br><br>SLA Inversion = a system that must meet a high-availability SLA depends on systems of lower availability. But the best SLA you can provide is the one of your dependency with the worst SLA.<br><br>Solution: 1) Decouple from the lower SLA systems so that your app can continue functioning without them, degrade gracefully. Decoupling middleware is excellent for this. At least employ circuit breakers to protect from your dependencies. 2) Determine a realistic SLA and, instead of the whole system, focus on the availability of specific functions/features w.r.t. their dependencies.<br><br>Ex.: Allow customers to continue purchasing even when delivery scheduling isn't available.<br><br><ul>
<li>For every service, your system depends on transport layer availability, naming services (DNS), and application-level protocols and any of these can fail.</li>
<li>If built naively, the probability of failure of your system is the joint probability of a failure in any component or service so P(up) = (1 - P(internal failure)) * P(dependency 1 up) * ... * P(dependency N up). So for five dependencies with 99.9% availability we can get at most 99.5%.</li>
</ul><br><br><h3>Unbounded Result Sets</h3><br><br>"Design with skepticism, and you will achieve. Ask, 'What can system X do to hurt me?' and then design a way to dodge, duck, dip, dive, and dodge whatever wrench your supposed ally throws." p95 One of those systems is your DB - what if it suddenly returns 5M rows instead of the usual hundreds?<br><br><ul>
<li>Use realistic, production-sized data volumes in testing/dev</li>
<li>Don't rely on the data producers to create a limited amount of data</li>
<li>Put limits into other application-level protocols: WS calls, RMI, XML-RPC, ... are all vulnerable to returning huge collections of objects, thereby consuming too much memory (and keeping on working long after the user has lost interest)</li>
<li>Unbounded result sets are a common cause of Slow Responses; they can result from violation of Steady State</li>
</ul><br><br><h2>Stability patterns</h2><br><br><h3>Use Timeouts</h3><br><br>Rarely you want to wait forever (or many minutes).<br><br><ul>
<li>Apply to Integration Points, Blocked Threads, and Slow Responses; they prevent calls to I.Points from becoming Blocked T. and thus avert Cascading Failure.</li>
<li>Combine with Circuit Breaker (trigger when too many) and Fail Fast (to inform your callers you are not able to process requests).</li>
<li>Apply to recover from unexpected failures - when an operation is taking too long, we sometimes do not care why, we just need to give up and keep moving</li>
<li>Consider delayed retries - the network or remote system problems causing them won't be resolved right away so immediate retries make it only worse and make the user wait even longer for the inevitable failure response.</li>
</ul><br><br>HttpClient example: <code>RequestConfig.custom()
.setConnectionRequestTimeout(1000).setConnectTimeout(1000).setSocketTimeout(1000).build();</code><br><br><h3>Circuit Breaker</h3><br><br>A Circuit Breaker wraps an Integration Point and works like a fuse, "melting" (opening) when a number of calls to the system fail or time out in a row, thus making subsequent request fail fast without consuming too much resources and easying load on the remote systems. Occassionally it lets a call through to check whether the system hasn't become responsive again.<br><br>It works great with graceful degradation, i.e. offering limited yet still useful functionality to users when a subsystem becomes unavailable.<br><br><ul>
<li>Don't do it if it hurts - C.B. is the fundamental pattern for protecting your system from all manner of Integration Points problems. When there is a difficulty with them , stop calling them!</li>
<li>Use together with Timeouts</li>
<li>Expose, track, and report its state changes to Ops</li>
</ul><br><br><a href="https://msdn.microsoft.com/en-us/library/dn589784.aspx">MSDN's Circuit Breaker Pattern</a> page is pretty good. <a href="https://martinfowler.com/bliki/CircuitBreaker.html">Martin Fowler's introduction of Circuit Breaker</a> with a simple example implementation in Ruby and useful links.<br><br>Impl. in Java with Spring AOP and JMX: https://code.google.com/p/jianwikis/wiki/CircuitBreakerDesignPattern, <a href="https://github.com/krukow/clojure-circuit-breaker">Clojure implementation</a>.<br><br><h3>Bulkheads</h3><br><br>Bulkheads are water-tight compartments in a ship; when there is a hole, water floods only one compartment, saving the ship from sinking. Similarly you may partition your resources (servers etc.) and assign the partitions to particular clients/functions so that a failure doesn't affect all and/or more important functionality/clients are protected from failures triggered by less important ones. Physical redundancy is the most common form, protecting from HW failures. A small-scale example is binding a process to only a subset of CPUs. Inside of a process, you might create separate thread groups dedicated to different functions - f.ex. separate request-handling thread pool for administrative functionality. Ex.: A failure in flight status functionality won't stop check-in from working.<br><br><ul>
<li>The Bulkheads pattern partitions capacity to preserve partial functionality when bad things happen</li>
<li>The partitioning leads to less efficient use of capacity (but virtualization might mitigate that into an extent - move VMs between the partitions on demand)</li>
<li>Pick a useful granularity - thread pools inside an app, CPUs in a server, or servers in a cluster</li>
<li>Very important with shared services model, when many systems depend in your application; you don't want to bring them all down when Chain Reactions happen</li>
</ul><br><br><h3>Steady State</h3><br><br>For every mechanism that accumulates a resource (data in a DB, log files, memory consumed by a cache), some other mechanism must recycle that resource.<br><br><ul>
<li>Avoid fiddling - manual human intervention leads to problems; eliminate the need for recurring human intervention (disk cleanups, nightly restarts) through
automation</li>
<li>Purge data with application logic - an application knows better than DBA how to purge old data while preserving consistency and its sanity (f.ex. w.r.t. ORM)</li>
<li>Limit the amount of memory a cache can consume so that it doesn't cause problems</li>
<li>Roll the logs - don't keep an unlimited amount of log files, configure log file rotation based on size</li>
</ul><br><br><h3>Fail Fast</h3><br><br>If a system can determine in advance that it will fail in an operation, it's better to fail fast.<br><br><ul>
<li>Avoid Slow Responses and Fail Fast - if you system cannot meet its SLA, inform the callers quickly without waiting for an error or timeout (&lt;&gt; Circuit Breaker)</li>
<li>Reserve resources, verify Integration Points early - e.g. fail at once if a crucial CircuitBreaker is open</li>
<li>Use for input validation - do basic user input validation even before you reserve resources not to waste them if f.ex. a required attribute is missing</li>
<li>Ex.: Refuse a connection at once if there are already too many users in the system (=&gt; throttling to a manageable level so that we keep a reasonable level of service for the users already there)</li>
</ul><br><br><h3>Handshaking</h3><br><br><ul>
<li>signaling between devices that regulate communication between them; it protects the server by allowing it to throttle its own workload. Sadly, HTTP and RMI doesn't handshake well.</p></li>
<li><p>Create cooperative demand control - use client-server handshaking for demand throttling to serviceable levels; both must be built to support it</p></li>
<li>Conside health checks as an application-level workaround for the lack of H., use where the cost of an additional call is much less than the cost of calling and failing</li>
<li>Build H. into your own low-level protocols</li>
</ul><br><br><h3>Test Harness</h3><br><br><p>A test harness emulates the remote system of an Integration Point and can simulate many errors (network, protocol, application-level) to test most/all of the failure modes. "A good test harness should be devious. It should be as nasty and vicious are real-world system will be." [126] "The test harness should act like a little hacker, trying all kinds of bad behavior to break callers." [128]<br><br><ul>
<li>A socket connection can be refused, sit in a listen queue until the caller times out, the remote end my reply with a SYN/ACK and then never send any data, it can send nothing but RESET packets, it may report a full receive window and never drain the data, the connection can be established, but the remote end never sends a byte of data, the conn.can be established but packets lost causing retransmit delays, conn.est. but the remote never ACK receiving a packet, causing endless retransmits, the service can accept a request, send response headers (supposing HTTP), and never send the response body; the srv can send 1 byte of the response every 30 sec; it can send HTML instead of the expected XML; it may send MB when kB of data expected; it can refuse all auth. credentials.</li>
<li>Emulate out-of-spec failures</li>
<li>Stress test caller - slow/no/garbage responses, ..</li>
</ul><br><br><h3>Decoupling Middleware</h3><br><br>A well-done middleware integrates (by passing data and events) and decouples (by hiding specific knowledge, calls to other systems) systems.<br><br>Scale:<br><br>Same host, time, process<br><br><ul>
<li>In-process method calls</li>
<li>Interprocess communication (shared mem, pipes, semaphores, ..)</li>
<li>RPC (RMI, HTTP, ..) // same time, diff. host and process</li>
<li>Message Oriented Middleware (MQ, SMTP, SMS, ..)</li>
<li>Tuple Spaces (Java/Giga/T Spaces)</li>
</ul><br><br>Different time, host, process<br><br><ul>
<li>Decide at the last responsible moment; this is an architecture decision that is expensive to change</li>
<li>Avoid many failure modes though total decoupling (of servers, layers, applications)</li>
<li>Learn many architectures, and choose among them</li>
</ul><br><br><hr /><br><br>Quiz - what is wrong here:<br><br><pre><code>
try { ... }
finally {
if (stmt != null) stmt.close();
if (conn != null) conn.close();
}
</code></pre><br><br><ul>
<li>stmt may rarely throw an exception and the conn will thus never be closed, leading to connection pool exhaustion</li>
</ul><br><br><h1>Capacity</h1><br><br>User sessions are the Achilles heel - they consume memory, and, if replication enabled, CPU and bandwidth.<br><br>Load testing: real world isn't polite to the site. Search engine spiders may ignore cookies create a new session on each request (while generating many requests). Scrapers and shopbots do the same.<br><br>=&gt; don't test the system just the way it is meant to be used<br><br>Useful tools<br><br><ul>
<li>If every request creates a session, verify the client handles cookies properly and send those who don't to a "how to enable cookies" page</li>
<li>Capability to cap the number of requests to the system so that we can keep sessions below the crash limit</li>
<li>Detect and block IPs, subnets etc. that create evil traffic</li>
</ul><br><br><h2>Capacity</h2><br><br><ul>
<li>Performance: how fast the sys processes a single transaction</li>
<li>Throughput: # tx / a time span</li>
<li>Scalability: 1) throughput as f(load); 2) how the systems can be scaled up by adding capacity</li>
<li>Capacity: the max throughput the sys can sustain, for a given workload, while maintaining an acceptable response time for each individual tx (the workload may change radically e.g. when users are interested in different services during a particular season)</li>
<li>Constraint: There is always one (current) constraint &lt;&gt; theory of constraints</li>
</ul><br><br>Capacity myths: CPU, bandwidth, and storage are cheap.<br><br><h2>Capacity antipatterns</h2><br><br><h3>9.1 Resource Pool Contention</h3><br><br>"Used well, [DB] connection pools, like all resource pools, can improve capacity by improving throughput. Left untended, however, resource pools can quickly become the biggest bottleneck in an application." [167] - when there is contention for the resource , i.e. less than needed available; the requesting thread is then blocked indefinitely. Also, each connection - even whine idle - consumes resources on the remote system.<br><br><ul>
<li>Eliminate Contention under normal load</li>
<li>If possible, size resource pools to the request thread pool</li>
<li>Prevent vicious cycles: contention =&gt; tx take longer =&gt; more contention</li>
<li>Watch for the Blocked Threads pattern (capacity =&gt; stability issues)</li>
</ul><br><br><h3>Excessive JSP fragments</h3><br><br><h3>AJAX Overkill</h3><br><br>Ajax = many more requests coming from the browser to the server, more rapidly. The req and resp will typically be smaller. Used poorly, it will place more burden on the web an app servers.<br><br>Session thrashing - ensure session affinity so AJAX req go to the server having the user's session. Make sure you don't create a new session for each req.<br><br><h3>Overstaying Sessions</h3><br><br>How long a session stays in mem after the last req (as we have now way of knowing the user went away for good) - defaul(ed) to 30min in Java. Look at your data to determine session timeout: e.g. avg + 1 std dev. In practice it will be ~ 10 min for a retail site, 5 min for a media gateway, up to 25 for travel-industry sites. Even better is to make sessions unnecessary. F.ex. in-mem copy of persistent data may be dropped and recreated at any time (keep keys, not whole objects).<br><br><h3>Wasted space in HTML</h3><br><br>Every byte consumes bandwidth, memory, processing resources on different networking equipment and the servers. Omit needless characters, remove whitespace, replace HTML tables with CSS layout.<br><br><h3>The Reload button</h3><br><br>If the site is slow, users may start hitting Reload in hope of getting a presumabely stuck response, thus increasing the load even more. (The app server doesn't know it should stop processing the previous one.) Make your site fast so that users never think of doing this.<br><br><h3>Handcrafted SQL</h3><br><br>ORM =&gt; predictable, repetitive SQL. Predictable access patterns of SQL are good for capacity, b/c a competent DBA can tune the DB for them. OO developers suck at relational queries and create expensive queries inconsistent with the tuning for the rest of the app.<br><br>Common problems: joins on non-indexed columns, joining too many tables, .. .<br><br>=&gt; minimize, check with a DBA, verify gains against real data.<br><br><h3>DB Eutrophication</h3><br><br><ul>
<li>slow buildup of sludge that eventually kills it</p></li>
<li><p>Create indexes</p></li>
<li>Purge sludge = old data (mv from prod servers elsewhere, ...)</li>
<li>Keep reports out of Prod</li>
</ul><br><br><h3>Integration Point Latency</h3><br><br><p>Calling a remote point takes time + its processing time, don't ignore that. A performance issue at first may become capacity issue of the whole system. Avoid chatty remote protocols.<br><br><h3>Cookie Monsters</h3><br><br>=&gt; keep cookies small; they're sent with every request.<br><br><h2>Capacity Patterns</h2><br><br><h3>Pool Connections</h3><br><br>Use &amp; remember to protect callers from blocking forever. Size them for max throughput.<br><br><h3>Use Caching Carefully</h3><br><br>Limit cache sizes. Build a flush mechanism. Don't cache trivila objects. Compare access and change frequency.<br><br><h3>Precompute content</h3><br><br>Not everything needs to be dynamic and even not all the dynamic stuff changes equally often.<br><br><h3>Tune the garbage collector</h3><br><br>"In Java applications, garbage collection tuning is the quickest, and easiest way to see some capacity improvements. An untuned application running at production volumes and traffic will probably spend 10% of its time collecting garbage. That should be reduced to 2% or less." [205] (Remember this was written in 2007.)<br><br><h1>PART IV General Design Issues</h1><br><br><h1>11. Networking</h1><br><br>Topics: Multihomed servers, getting routing right, virtual IP addresses.<br><br><h1>12. Security</h1><br><br>Topics: The Principle of Least Privilege (separate user/app, ...), Configured Passwords (separately in encrypted files, ...).<br><br><h1>13. Availability</h1><br><br>Gathering and documenting requirements (refer to these whenever responsible for defining availability!), load balancing, reverse proxying, clustering .<br><br><h1>14. Administration</h1><br><br><h2>Does QA match production?</h2><br><br>Keeps app separated if sep. in prod to prevent hidden dependencies. Zero, One, Many - if having many nodes in prod, have 2 in QA. Just buy the gear: "I've seen hours of downtime result from presence of firewalls or load balancers in production that did not exist in QA." [238]<br><br><h3>14.s Start-up and Shutdown</h3><br><br>Build a clear start-up sequence into the app so that everything starts in the right order and must complete before requests are served. Init. at least some conn for each conn. pool (Fail Fast).<br><br>Clean shutdown: have a mode where existing tx are completed (remember a timeout) but new request not accepted.<br><br>CLI interfaces for administration are best (&lt;&gt; scripting) x GUIs.<br><br><h1>PART IV Operations</h1><br><br><h2>17 Transparency</h2><br><br>= qualities allowing personnel to gain insight into the system's historical trends, present conditions, instantaneous state, and future projections.<br><br><h3>Perspectives</h3><br><br><ul>
<li>Historical Trending - system and biz level metrics in the OpsDB =&gt; trends</li>
<li>Predicting the future (how many users can we handle, ..)</li>
<li>Present status - the state of each app and HW - mem, garbage coll. (frequency ,..), threads for each pool, DB conn pools, traffic stats for each request channel, biz tx for each type, users (demographics, #, usage patterns, errors encountered, ...), Integration points, circuit breakers</li>
<li>instantaneous behavior a.k.a. what the *** is going on? &lt;&gt; monitoring systems, thread dumps, stack traces, errors in log files, ...</li>
</ul><br><br><h3>Designing for Transparency</h3><br><br>Start early. You need visibility into the whole system to avoid local optimization.<br><br><h3>Enabling Technologies</h3><br><br><h3>Logging</h3><br><br><ul>
<li>Configurable location (=&gt; a different drive)</li>
<li>Levels: only log as error/sever what requires attention from Ops; not every exception is an error</li>
<li>Catalog of messages (asked for by ops) - use the internationalization tool in your IDE to produce it easily; include keys for easy lookup - e.g. the created i8n keys =&gt; unique, easy to lookup</li>
<li>Human factor: convey clear, accurate, actionable information so that humans under stress can interpret it correctly; make it readable for humans and their pattern-matching ability</li>
<li>Include ID of the transaction to track it across components</li>
</ul><br><br><h3>Monitoring systems</h3><br><br>Standards<br><br><ul>
<li>SNMP - widely supported, old; supporting a custom SW is laborious</li>
<li>CIM (1996, successor to SNMP) - more dynamic, superior; not too widespread</li>
<li>JMX - great for JVM-based apps</li>
</ul><br><br>What to expose<br><br><ul>
<li>Traffic indicators: page requests [total], tx counts, concurrent sessions</li>
<li>Resource pool health: enabled state, total resources, r. checked out, high-water mark, # r. created/destroyed, # times checked out, # threads blocked waiting for r., # times a thread has blocked</li>
<li>DB connection health: # SQL exceptions, # queries, avg response time to q.</li>
<li>Integration point health: state of circuit breaker, # timeouts, # requests, avg response time, # good responses, # network/protocol/app errors, IP address of the remote endpoint, current # concurrent requests, concurrent req. high-water mark</li>
<li>Cache health: items in c., memory used by c., cache hit rate, items flushed by garbage collector, configured upper limit, time spent creating items</li>
</ul><br><br><h3>Operations Database (OpsDB)</h3><br><br>Logging &amp; monitoring expose the immediate behavior/status but unsuitable for the historical/future perspective =&gt; accumulate status, metrics in a (ops) DB.<br><br>OpsDB high-level structure<br><br><pre><code>
*|-|*
/-1-Node-*-(needs)*-Feature
*|
Observation-*-1-Observation Type
|
- one of Measurement, Event, Status
</code></pre><br><br><ul>
<li><em>Feature</em> - a unit of biz-significant functionality (related to avail SLAs); typically implemented across multiple hosts (web, app, DB, ..), network equipment such as FW, switch etc. - <em>Node</em> represents any of these active nodes (typically it suffices to represent hosts and apps). Optionally track what nodes use other nodes.</li>
<li><em>Observations</em>: <em>Measurements</em> are mostly periodic performance stats; <em>Statuses</em> are state transitions (c.breaker on/off, ...). <em>ObservationType</em> defines the name and concrete subtype of the Obs.</li>
</ul><br><br>Eventually we add:<br><br><pre><code>
/-1-ObservationType
1|
Expectation-*-1-ExpectationType
|
- one of NominalRange, ExpectedTime, ExpectedStatus
</code></pre><br><br><em>Expectation</em> = an allowed range for a metric, a time frame in which an event must [not] occur, an allowed status; violation =&gt; alert. Set based on historical data. (Beware false positives = crying the wolf!). Eventually the expectation values may become functions of the business rhythm (day/night, special seasons, ...)<br><br><h3>Supporting processes</h3><br><br>Build an effective feedback process, i.e. only share meaningful data that is act on responsively . See Plan-Do-Check-Act, Boyd's OODA etc.<br><br><h4>Keys to Observation</h4><br><br>Watch for both trends and outliers. Include continuous improvement.<br><br><ul>
<li>Every week, review the past w. problems, look for recurring ones and most time consuming ones, for particular troublesome subsystems/3rd party/integr.point.</li>
<li>Every month, look at the total volume of problems, consider the distribution of pr. types. The trends should be decrease in severity and volume.</li>
<li>Daily or weekly look for exceptions, stack traces in logs =&gt; find most common sources, consider whether they indicate serious problems or gaps in error handling.</li>
<li>Review help desk calls for common issues =&gt; UI improvements, more robustness</li>
<li>If there are too many problems to review, look for top categories and sample them randomly</li>
<li>Every 4-6 months, recheck that old correlations still hold true</li>
<li>At least monthly look at data volumes and query stats</li>
<li>Check the DB for the most expensive queries; have their q. plans changed? Is there a new €€€ query? &lt;=&gt; accumulation of data somewhere. Check for table scans =&gt; missing indices.</li>
<li>Look at the daily and weekly envelope of demand and sys metrics; are traffic patterns changing? if a popular time is dropping in popularity, the sys is probably too slow at those times; if there is a plateau then perhaps there is a limiting factor, e.g. responsiveness of the system.</li>
</ul><br><br>The emphasis shifts from reactive to predictive. Old metrics/reports loose value.<br><br>For each metric being reviewed: How does it compare to the historical norms? If the trend continues, what happens to the correlated metric (# users x responsiveness); how long can it continue before hitting a limiting factor and what will happen then? =&gt; interpretation &amp; decisions<br><br><h2>18. Adaptation</h2><br><br>Topics: Adaptatable SW design, dependency injection, object design, XP coding practices, agile DBs, adaptable enterprise architecture, dependencies within a system, d. between systems: protocols/DBs, releases shouldn't hurt (0 downtime deployments, ...)
++++
