{:title
 "Example: Functional Reactive Programming decisively beats Imperative on simplicity, length",
 :date "2015-06-17",
 :layout :post,
 :tags [],
 :tags-orig ["elm" "functional"],
 :categories ["Languages"],
 :extra-css #{}
}

++++
<a href="https://twitter.com/theburningmonk">@theburningmonk</a> Yan Cui has a <a href="https://www.slideshare.net/theburningmonk/tour-of-language-landscape">nice example demonstrating how Functional Reactive Programming</a> [slides 185 - 206] (with <a href="https://elm-lang.org/guide/reactivity">Elm's Signals</a>) yields a much shorter and easier to understand (one you know FRP) code than an imperative code with mutations spread all over the code base.<br><br><h2>The game</h2><br><br>Use the Up and Down keys to move the platforms and thus bounce the ball from left to right and back:<br><br><a href="/images/2015/06/screenshot-game.png"><img class="alignnone size-medium wp-image-4390" src="/images/2015/06/screenshot-game.png?w=300" alt="screenshot-game" width="300" height="300" /></a><br><br><h2>The imperative solution</h2><br><br><!--more--><br><br><pre><code>
private var arrowKeyUp:Bool; 
private var arrowKeyDown:Bool;
private var platform1:Platform; 
private var platform2:Platform; 
private var ball:Ball;<br><br>function keyDown(event:KeyboardEvent):Void {
  if (currentGameState == Paused &amp;&amp; event.keyCode == 32) { 
    setGameState(Playing);
  } else if (event.keyCode == 38) {
    arrowKeyUp = true;
  }else if (event.keyCode == 40) {
    arrowKeyDown = true;
  } 
}
  
function keyUp(event:KeyboardEvent):Void { 
    if (event.keyCode == 38) {
    arrowKeyUp = false;
  } else if (event.keyCode == 40) {
    arrowKeyDown = false;
  } 
}
  
function everyFrame(event:Event):Void { 
  if(currentGameState == Playing){
    if (arrowKeyUp) {
      platform1.y -= platformSpeed;
    }
    if (arrowKeyDown) {
      platform1.y += platformSpeed; 
    }
    if (platform1.y &lt; 5) platform1.y = 5; 
    if (platform1.y &gt; 395) platform1.y = 395;
  ￼} 
}
</code></pre><br><br><h2>The FRP solution</h2><br><br><pre><code>
type alias Platform = {x:Int, y:Int}
defaultPlatform = {x=5, y=0}<br><br>delta = Time.fps 20
input = Signal.sampleOn delta Keyboard.arrows<br><br>cap x = max 5 &lt;| min x 395
-- ^- prevent the ball leaving the board<br><br>p1 : Signal Platform
p1 = foldp (\{x, y} s -&gt; {s | y &lt;- cap &lt;| s.y + 5*y})
          defaultPlatform 
          input
</code></pre><br><br>If you have never seen Elm or a reactive program before, this is not very legible. But once you invest a little into learning, you will reap the benefits forever.<br><br><h2>Conclusion</h2><br><br>Imperative sucks, F(R)P is power! :-)
++++
