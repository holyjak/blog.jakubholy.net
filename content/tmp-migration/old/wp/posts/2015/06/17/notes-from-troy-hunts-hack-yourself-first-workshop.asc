{:title "Notes from Troy Hunt's Hack Yourself First workshop",
 :date "2015-06-17",
 :layout :post,
 :tags ["security"],
 :tags-orig ["privacy" "security"],
 :categories ["General"],
 :extra-css #{}
}

++++
<p class="p1">Troy Hunt (<a href="https://twitter.com/troyhunt">@troyhunt</a>, <a href="https://www.troyhunt.com/">blog</a>) had a great, very hands-on 2-day workshop about webapp security at NDC Oslo. Here are my notes.</p><br><br><h3 class="p1">Highlights - resources</h3><br><br><p class="p1"><span class="s1">Personal security and privacy</span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s5"><a href="https://www.entropay.com/"><span class="s2">https://www.entropay.com/</span></a></span><span class="s1"> - a Prepaid Virtual Visa Card</span></li>
    <li class="li1"><span class="s1">mailinator.com - tmp email</span></li>
    <li class="li1"><span class="s1">f-secure VPN</span></li>
    <li class="li1"><span class="s5"><a href="https://www.netsparker.com/"><span class="s2">https://www.netsparker.com/</span></a></span><span class="s1"> - scan a site for issues (insecure cookies, framework disclosure, SQL injection, …) (lot of $k)</span></li>
</ul><br><br><p class="p1"><span class="s1">Site security</span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s5"><a href="https://report-uri.io/"><span class="s2">https://report-uri.io/</span></a></span><span class="s1"> - get reports when CSP rules violated; also displays CSP headers for a site in a human-friendly way</span></li>
    <li class="li1"><span class="s5"><a href="https://securityheaders.io/"><span class="s2">https://securityheaders.io/</span></a></span><span class="s1"> check quality of headers wrt security</span></li>
    <li class="li1"><span class="s1">free SSL - <a href="https://www.startssl.com/"><span class="s6">http://www.startssl.com/</span></a>, <a href="https://www.cloudflare.com/"><span class="s6">https://www.cloudflare.com/</span></a> (also provides web app firewall and other protections) ; </span></li>
    <li class="li5"><span class="s4">SSL quality check: <a href="https://www.ssllabs.com/ssltest/"><span class="s2">https://www.ssllabs.com/ssltest/</span></a> </span></li>
    <li class="li1"><span class="s5"><a href="https://letsencrypt.org/"><span class="s2">https://letsencrypt.org/</span></a></span><span class="s1"> - free, automated, open Certificate Authority (Linux Found., Mozilla)</span></li>
    <li class="li1"><span class="s1">HSTS Preload - tell Chrome, FF that your site should only be ever loaded over HTTPS - <a href="https://hstspreload.appspot.com/"><span class="s6">https://hstspreload.appspot.com/</span></a></span></li>
</ul><br><br><p class="p1"><span class="s1">Breaches etc.</span></p><br><br><ul class="ul1">
    <li class="li5"><span class="s7"><a href="https://arstechnica.com/security/2015/06/hack-of-cloud-based-lastpass-exposes-encrypted-master-passwords/"><span class="s2">http://arstechnica.com/security/2015/06/hack-of-cloud-based-lastpass-exposes-encrypted-master-passwords/</span></a></span></li>
    <li class="li5"><span class="s7"><a href="https://twitter.com/jmgosney"><span class="s2">https://twitter.com/jmgosney</span></a></span><span class="s4"> - one of ppl behind <a href="https://t.co/foXRFfdHV9"><span class="s12">http://passwordscon.org </span></a>. <a href="https://t.co/CqoqCIRS6t"><span class="s12">http://password-hashing.net </span></a> experts panel. Team Hashcat. </span></li>
    <li class="li5"><span class="s7"><a href="https://arstechnica.com/security/2012/12/25-gpu-cluster-cracks-every-standard-windows-password-in-6-hours/"><span class="s2">http://arstechnica.com/security/2012/12/25-gpu-cluster-cracks-every-standard-windows-password-in-6-hours/</span></a></span><span class="s4"> </span></li>
</ul><br><br><p class="p1"><span class="s1">To follow</span></p><br><br><ul class="ul1">
    <li class="li5"><span class="s4">! <a href="https://krebsonsecurity.com/"><span class="s2">http://krebsonsecurity.com/</span></a></span></li>
    <li class="li5"><span class="s4">! <a href="https://www.troyhunt.com/"><span class="s2">http://www.troyhunt.com/</span></a></span></li>
    <li class="li5"><span class="s4">! <a href="https://www.schneier.com/"><span class="s2">https://www.schneier.com/</span></a></span></li>
    <li class="li1"><span class="s1">! <a href="https://twitter.com/mikko"><span class="s6">https://twitter.com/mikko</span></a> (of F-Secure) also great [TED] talks</span></li>
    <li class="li1"><span class="s1">kevin mitnick (jailed for hacking; twitter, books)</span></li>
</ul><br><br><!--more--><br><br><p class="p1"><span class="s1">Books</span></p><br><br><ul class="ul1">
    <li class="li5"><span class="s7"><a href="https://www.amazon.com/We-Are-Anonymous-LulzSec-Insurgency/dp/0316213527"><span class="s2">http://www.amazon.com/We-Are-Anonymous-LulzSec-Insurgency/dp/0316213527</span></a></span><span class="s4"> - easy read, hard to put down</span></li>
    <li class="li5"><span class="s7"><a href="https://www.amazon.com/Ghost-Wires-Adventures-Worlds-Wanted/dp/1441793755"><span class="s2">http://www.amazon.com/Ghost-Wires-Adventures-Worlds-Wanted/dp/1441793755</span></a></span><span class="s4"> - about Mitnick’s hacking, social engineering, living on the run</span></li>
    <li class="li5"><span class="s4">? <a href="https://www.amazon.com/Art-Intrusion-Exploits-Intruders-Deceivers/dp/0471782661/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1434466205&amp;sr=1-1&amp;keywords=the+art+of+intrusion&amp;pebp=1434466211598&amp;perid=19A26C170G9Q547TNGW0"><span class="s2">http://www.amazon.com/Art-Intrusion-Exploits-Intruders-Deceivers/dp/0471782661/</span></a></span></li>
    <li class="li5"><span class="s4">Mitnick: <a href="https://www.amazon.com/Art-Deception-Controlling-Element-Security/dp/076454280X/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1434466237&amp;sr=1-1&amp;keywords=the+art+of+deception&amp;pebp=1434466244836&amp;perid=1ZVNQKRH89H3A414N295"><span class="s2">http://www.amazon.com/Art-Deception-Controlling-Element-Security/dp/076454280X/</span></a> - social engineering</span></li>
</ul><br><br>Other<br><br><ul class="ul1">
    <li class="li5"><span class="s7"><a href="https://www.xssposed.org/"><span class="s2">https://www.xssposed.org/</span></a></span></li>
    <li class="li5"><span class="s4">See <a href="https://www.drupal.org/SA-CORE-2014-005"><span class="s2">https://www.drupal.org/SA-CORE-2014-005</span></a></span></li>
    <li class="li5"><span class="s7"><a href="https://www.youtube.com/watch?v=Qvhdz8yE_po"><span class="s2">https://www.youtube.com/watch?v=Qvhdz8yE_po</span></a></span><span class="s4"> - Havij example</span></li>
    <li class="li5"><span class="s7"><a href="https://www.troyhunt.com/2013/07/everything-you-wanted-to-know-about-sql.html"><span class="s2">http://www.troyhunt.com/2013/07/everything-you-wanted-to-know-about-sql.html</span></a></span><span class="s4">, <a href="https://www.troyhunt.com/2010/05/owasp-top-10-for-net-developers-part-1.html"><span class="s2">http://www.troyhunt.com/2010/05/owasp-top-10-for-net-developers-part-1.html</span></a>, <a href="https://www.troyhunt.com/2012/12/stored-procedures-and-orms-wont-save.html"><span class="s2">http://www.troyhunt.com/2012/12/stored-procedures-and-orms-wont-save.html</span></a>, </span></li>
    <li class="li1"><span class="s1">Googlee: find config files with SA access info: `inurl:ftp inurl:web.config filetype:config sa`</span></li>
    <li class="li5"><span class="s7"><a href="https://scotthelme.co.uk/hardening-your-http-response-headers/"><span class="s2">https://scotthelme.co.uk/hardening-your-http-response-headers/</span></a></span><span class="s4"> and <a href="https://securityheaders.io/"><span class="s2">https://securityheaders.io/</span></a></span></li>
    <li class="li5"><span class="s7"><a href="https://developer.mozilla.org/en-US/docs/Web/Security/Public_Key_Pinning"><span class="s2">https://developer.mozilla.org/en-US/docs/Web/Security/Public_Key_Pinning</span></a></span><span class="s4"> - prevent MITM</span></li>
    <li class="li1"><span class="s1">wappalyzer chrome plugin displaying info about the server and client that can be detected (jQuery, NewRelic, IIS, win OS, …)</span></li>
    <li class="li5"><span class="s7"><a href="https://www.troyhunt.com/2015/05/do-you-really-want-bank-grade-security.html"><span class="s2">http://www.troyhunt.com/2015/05/do-you-really-want-bank-grade-security.html</span></a></span></li>
    <li class="li5"><span class="s7"><a href="https://www.troyhunt.com/2012/05/everything-you-ever-wanted-to-know.html"><span class="s2">http://www.troyhunt.com/2012/05/everything-you-ever-wanted-to-know.html</span></a></span></li>
    <li class="li6"><span class="s11">tool: <a href="https://github.com/gentilkiwi/mimikatz"><span class="s6">https://github.com/gentilkiwi/mimikatz</span></a> </span><span class="s1">extract plaintexts passwords, hash, PIN code and kerberos tickets from memory on Windows</span></li>
</ul><br><br><h3 class="p1">Notes</h3><br><br><ul class="ul1">
    <li class="li1"><span class="s1"><a href="https://hackyourselffirst.troyhunt.com/">HackYourselfFirst.troyhunt.com</a> - an example app with many vulnerabilities</span></li>
    <li class="li1"><span class="s1">Note: maximizing your browser window will share info about your screen size, which might help to identify you</span></li>
    <li class="li3"><a href="https://haveibeenpwned.com/"><span class="s2">haveibeenpwned.com</span></a><span class="s3"> - Troy's online DB  of hacked accounts</span></li>
</ul><br><br><p class="p1"><span class="s1">Tips</span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s1">check robots.txt to know what to access</span></li>
</ul><br><br><p class="p1"><span class="s1">Example Issues</span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s1">no https on login page</span></li>
    <li class="li1"><span class="s1">insecure psw requirements</span></li>
    <li class="li1"><span class="s1">cookies not secure flag =&gt; sent over http incl. AuthCookie)</span></li>
    <li class="li1"><span class="s1">psw sent in clear text in confirm email</span></li>
    <li class="li1"><span class="s1">user enumeration, f.eks. an issue with AdultFriendFinder - entry someone’s email to login to find out whether they’ve an account</span></li>
    <li class="li1"><span class="s1">post illegal chars, get them displayed =&gt; injection</span></li>
    <li class="li1"><span class="s1">no anti-automation (captcha)</span>
<ul class="ul1">
    <li class="li1"><span class="s1">login confirm. email &amp; autom. creating 1m accounts =&gt; sending 1m emails =&gt; pisses ppl off, likely increase one’s spam reputation (=&gt; harder to send emails)</span></li>
</ul>
</li>
    <li class="li1"><span class="s1">brute-force protection?</span></li>
</ul><br><br><!--more--><br><br><p class="p1"><span class="s1"><b>### XSS</b></span></p><br><br><p class="p1"><span class="s1">Reflected XSS: display unescaped user input</span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s1">Encoding context: HTML, JS, CSS … have diff. escape sequences for the same char (e.g. &lt;) - look at where they’re mixed</span></li>
    <li class="li1"><span class="s1">Check the encoding consistency - manual encoding, omitting some chars</span></li>
    <li class="li1"><span class="s1">JS =&gt; load ext resources, access cookies, manipulate the DOM</span></li>
</ul><br><br><p class="p1"><span class="s1">Task: stal authCookie via search</span></p><br><br><p class="p1"><span class="s1"><b>### SQL injection</b></span></p><br><br><p class="p1"><span class="s1">Error-based injection: when the DB helps us by telling us what is wrong -&gt; use ti learn more and even show some data</span></p><br><br><p class="p5"><span class="s4">Ex.: <a href="https://hackyourselffirst.troyhunt.com/Make/10?orderby=supercarid"><span class="s2">http://hackyourselffirst.troyhunt.com/Make/10?orderby=supercarid</span></a> &lt;—— supercarid is a column name</span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s1">orderby=(select * from userprofile) …</span></li>
    <li class="li1"><span class="s1">learn about DB sructure, force an exception that shows the valueex.: (select top 1 cast(password) as int from userprofile) =&gt; “Conversion failed for the nvar value ‘passw0rd …’"</span></li>
</ul><br><br><p class="p1"><span class="s1">Tips</span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s1">think of SQL commands that disclose structure: sys.(tables,columns), system commands</span></li>
    <li class="li1"><span class="s1">enumerate records: nest queries: select top X ows asc then top 1 rows from that desc</span></li>
    <li class="li1"><span class="s1">write out how you think the query works / is being constructed internally </span></li>
    <li class="li1"><span class="s1">cast things to invalid types to disclose values in err msgs (or implicit cast due to -1 ..)</span></li>
</ul><br><br><p class="p1"><span class="s1">#### Defenses</span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s1">whitelist input data types (id=123 =&gt; onlyallow ints)</span></li>
    <li class="li1"><span class="s1">enumerable values - check against an appropr. whitelist</span></li>
    <li class="li1"><span class="s1">if the value is stored - who uses it, how? making query/insertion safe</span></li>
    <li class="li1"><span class="s1">permissions: give read-only permissions as much as possible; don’t use admin user from your webapp</span></li>
</ul><br><br><p class="p1"><span class="s1"><b>### Mobile apps</b></span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s1">Look at HTTP req for sensitive data - creds, account, …</span></li>
    <li class="li1"><span class="s1">Apps may ignore certificate validations</span></li>
    <li class="li1"><span class="s1">In your app: param tampering, auth bypass, direct object refs</span></li>
    <li class="li1"><span class="s1">Weak  often: airlines, small scale shops, fast foods, …</span></li>
</ul><br><br><p class="p1"><span class="s1">Tips</span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s1">certificate pining - the app has the fingerprint of the server cert. hardcoded and doesn’t trust even “valid” MITM certificate (banks, dropbox, …)x</span></li>
</ul><br><br><p class="p1"><span class="s1"><b>### CSRF Cross-Site Request Forgery</b></span></p><br><br><p class="p1"><span class="s1">= make the user send a request =&gt; their auth cookie included</span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s1">async Ajax req to another site forbidden but that doesn’t apply to normal post</span></li>
</ul><br><br><p class="p1"><span class="s1">Protection</span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s1">anti-forgery tags</span></li>
</ul><br><br><p class="p1"><span class="s1"><b>### Understanding fwrk disclosure</b></span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s5"><a href="https://www.shodanhq.com/"><span class="s2">http://www.shodanhq.com/</span></a></span><span class="s1"> -&gt; search for “drupal 7” -&gt; pwn</span></li>
</ul><br><br><ul class="ul1">
    <li class="li1"><span class="s1">How disclosed:</span></li>
</ul><br><br><ul class="ul1">
    <li class="li1"><span class="s1">headers</span></li>
    <li class="li1"><span class="s1"> familiar signs - jsessionid cookie for java, …</span></li>
    <li class="li1"><span class="s1">The default error and 404 responses may help to recognize the fwr</span></li>
    <li class="li1"><span class="s1">HTML code (reactid), “.do” for Sttruts</span></li>
    <li class="li1"><span class="s1">implicit: order of headers (Apache x IIS), paths (capitalized?), response to improper HTTP version/protocol, </span>
<ul class="ul1">
    <li class="li1"><span class="s1">=&gt; likely still possible to figure out the stack but not possible to simple search for fwrk+version</span></li>
</ul>
</li>
</ul><br><br><p class="p1"><span class="s1"><b>### Session hijacking</b></span></p><br><br><p class="p1"><span class="s1">Steal authentication cookie =&gt; use for illegal requests.</span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s1">Persistence over HTTP of auth., session: cookie, URL (but URL insecure - can be shared)</span></li>
    <li class="li1"><span class="s1">Session/auth ID retrieval: insecure transport, referrer, stored in exceptions, XSS</span></li>
    <li class="li1"><span class="s1">Factors limiting hijacking: short duration expiry, keyed to client device / IP (but IPs may rotate, esp, on mobile devices =&gt; be very cautious)</span></li>
</ul><br><br><p class="p1"><span class="s1"><b>DAY 2</b></span></p><br><br><p class="p1"><span class="s1"><b>--------</b></span></p><br><br><p class="p1"><span class="s1"><b>### Cracking passwords</b></span></p><br><br><p class="p1"><span class="s1">Password hashing: </span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s1">salt: so that 2 ppl choosing the same psw will have a different hash =&gt; cracking is # salts * # passwords inst. of just N</span></li>
    <li class="li1"><span class="s1">has cracking tips:</span>
<ul class="ul1">
    <li class="li1"><span class="s1">character space [a-zA-Z0-9]</span></li>
    <li class="li1"><span class="s1">Dictionary: passw0rd, …</span></li>
    <li class="li1"><span class="s1">Mutations: manipulation and subst. of characters</span></li>
</ul>
</li>
</ul><br><br><p class="p1"><span class="s1">Tips:</span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s1">1Password , LastPass, ….</span></li>
    <li class="li1"><span class="s1">GPU ~ 100* faster than CPU</span></li>
</ul><br><br><p class="p1"><span class="s1">#### Ex: Crack with hashcat</span></p><br><br><p class="p1"><span class="s1">common psw dict + md5-hashed passwords =&gt; crack</span></p><br><br><p class="p1"><span class="s1">./hashcat-cli64.bin --hash-type=0 StratforHashes.txt hashkiller.com.dic # 23M psw dict -&gt; Recovered.: 44 326/860 160 hashes [obs duplications] in 4 min (speed 135.35k plains)</span></p><br><br><p class="p1"><span class="s1">Q: What dictionary we use? Do we apply any mutations to it?</span></p><br><br><p class="p1"><span class="s1"><b>### Account enumeration</b></span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s1">= Does XY have an account?</span></li>
    <li class="li1"><span class="s1">Multiple vectors (psw reset, register a new user with the same e-mail, …)</span></li>
    <li class="li1"><span class="s1">Anti-automation: is there any? It may be inconsistent across vectors</span></li>
    <li class="li1"><span class="s1">Does it matter? (&lt;&gt; privacy needs)</span></li>
    <li class="li1"><span class="s1">How to “ask” the site and how to identify + and - responses?</span></li>
    <li class="li1"><span class="s1">Timing attacks: distinguish positive x negative response based on the latency differing between the two</span></li>
</ul><br><br><p class="p1"><span class="s1"><b>### HTTPS</b></span></p><br><br><p class="p1"><span class="s1">Confidentiality, Integrity, Authenticity</span></p><br><br><p class="p1"><span class="s1">Traffic hijacking: <a href="https://www.wifipineapple.com/"><span class="s6">https://www.wifipineapple.com/</span></a> - wifi hotspot with evil capabilities</span></p><br><br><ul class="ul2">
<ul class="ul3">
    <li class="li1"><span class="s1">monitor probe requests (the phone looks for networks it knows), present yourself as one of those, the phone connects autom. (if no encryption)</span></li>
</ul>
</ul><br><br><ul class="ul1">
    <li class="li1"><span class="s1">Consider everything sent over HTTP to be compromised</span></li>
    <li class="li1"><span class="s1">Look at HTTPS content embedded in untrusted pages (iframes, links) - e.g. payment page embedded in http</span></li>
</ul><br><br><p class="p1"><span class="s1">Links</span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s1">HSTS Preload - tell Chrome, FF that your site should only be ever loaded over HTTPS - <a href="https://hstspreload.appspot.com/"><span class="s6">https://hstspreload.appspot.com/</span></a></span></li>
    <li class="li5"><span class="s7"><a href="https://www.owasp.org/index.php/HTTP_Strict_Transport_Security"><span class="s2">https://www.owasp.org/index.php/HTTP_Strict_Transport_Security</span></a></span><span class="s4"> header</span></li>
</ul><br><br><p class="p1"><span class="s1"><b>### Content Scurity Policy header</b></span></p><br><br><p class="p5"><span class="s8"><a href="https://developer.chrome.com/extensions/contentSecurityPolicy">https://developer.chrome.com/extensions/contentSecurityPolicy</a></span><span class="s4"> See e.g. <a href="https://haveibeenpwned.com/"><span class="s2">https://haveibeenpwned.com/</span></a> headers</span></p><br><br><p class="p1"><span class="s1">w/o CSP</span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s1">anything can be added to the page via a reflected XSS risk</span></li>
    <li class="li1"><span class="s1">Anyth, can be added to the DOM downstream (on a proxy)</span></li>
</ul><br><br><p class="p1"><span class="s1">With CSP the browser will only load resources you white-list; any violations can be reported</span></p><br><br><p class="p1"><span class="s1">Use e.g. <a href="https://report-uri.io/home/generate"><span class="s6">https://report-uri.io/home/generate</span></a> to create it and the report to watch for violations to fine tune it.</span></p><br><br><p class="p1"><span class="s1"><b>### SQL injection cont'd</b></span></p><br><br><p class="p1"><span class="s1">(Yesterday: Error-Based)</span></p><br><br><p class="p1"><span class="s1"><b>#### Union Based SQLi</b></span></p><br><br><p class="p1"><span class="s1">Modify the query to union whatever other data and show them. More data faster than error-based inj.</span></p><br><br><p class="p1"><span class="s1">Ex.: <a href="https://hackyourselffirst.troyhunt.com/CarsByCylinders?Cylinders=V12"><span class="s6">http://hackyourselffirst.troyhunt.com/CarsByCylinders?Cylinders=V12</span></a> :  V12 -&gt; `V12' union select voteid, comments collate SQL_Latin1_General_CP1_CI_AS from vote-- `</span></p><br><br><p class="p1"><span class="s1"><b>#### Blind Boolean (laborious)</b></span></p><br><br><p class="p1"><span class="s1">Blind inj.: We can’t always rely on data being explicitly returned to the UI =&gt; ask a question, draw a conclusion about the data.</span></p><br><br><p class="p1"><span class="s1">Ex: </span></p><br><br><p class="p5"><span class="s8"><a href="https://hackyourselffirst.troyhunt.com/Supercar/Leaderboard?orderBy=PowerKw&amp;asc=false">http://hackyourselffirst.troyhunt.com/Supercar/Leaderboard?orderBy=PowerKw&amp;asc=false</a></span><span class="s4"> -&gt; </span></p><br><br><p class="p1"><span class="s1">ordedby =&gt; case when (select count(*) from userprofile) &gt; 1 then powerkw else topspeedkm end</span></p><br><br><p class="p1"><span class="s1"> </span></p><br><br><p class="p1"><span class="s1">Extract email: Is ascii of the lowercase char #1 &lt; ascii of m ?</span></p><br><br><p class="p1"><span class="s1">Automation: SqlMap</span></p><br><br><p class="p1"><span class="s1"><b>#### Time based blind injection</b></span></p><br><br><p class="p1"><span class="s1">When no useful output returned but yes/no responses differ significantly in how much time they take. F.ex. ask the db to delay the OK response.</span></p><br><br><p class="p1"><span class="s1">MS SQL: IF ‘b’ &gt; ‘a’ WAITFOR DELAY ’00:00:05'</span></p><br><br><p class="p1"><span class="s1"><b>### Brute force attacks</b></span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s1">Are there any defences? Often not</span></li>
    <li class="li1"><span class="s1">How are defences impl?</span>
<ul class="ul1">
    <li class="li1"><span class="s1">block the req resources</span></li>
    <li class="li1"><span class="s1">block the src IP</span></li>
    <li class="li1"><span class="s1">rate limit (by src IP)</span></li>
</ul>
</li>
</ul><br><br><p class="p1"><span class="s1"><b>### Automation</b></span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s1">penetration testing apps and services such as Netsparker, WhiteHatSec</span></li>
    <li class="li1"><span class="s1">targets identification: shodan, googledorks, randowm crawling</span></li>
    <li class="li1"><span class="s1">think aout the actions that adhere to a pattern - sql injection, fuzzing (repeat a req. trying diff. values for fields - SQLi, …), directory enumeration</span></li>
    <li class="li1"><span class="s1">automation can be used for good - test your site</span></li>
    <li class="li1"><span class="s1">tip: have autom. penetration testing (and perhaps static code analysis) as a part fo your build pipeline</span></li>
</ul><br><br><p class="p1"><span class="s1">Task: Get DB schema using sqlmap (see python2.7 sqlmap.py --help)</span></p><br><br><p class="p1"><span class="s1"><b>### Protection</b></span></p><br><br><p class="p1"><span class="s1">Intrusion Detection System (IDS) - e.g. Snort</span></p><br><br><p class="p1"><span class="s1">Web Application Firewall (WAF) - e.g. CloudFare ($20/m)</span></p><br><br><p class="p1"><span class="s1"><b>### Various</b></span></p><br><br><ul class="ul1">
    <li class="li1"><span class="s1"><img src="bad" alt="" /></span></li>
</ul>
++++
