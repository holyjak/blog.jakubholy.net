{:title
 "Troubleshooting And Improving HTTPS/TLS Connection Performance",
 :date "2015-11-27",
 :layout :post,
 :tags ["experience" "performance"],
 :tags-orig ["experience" "performance" "TLS"],
 :categories ["General"],
 :extra-css #{}
}

++++
Our team has struggled with slow calls to the back-end, resulting in unpleasant, user-perceivable delays. While a direct (HTTP) call to a backend REST service took around 50ms, our median time was around 300ms (while using HTTPS and a proxy between us and the service).<br><br>We have just decreased that time to median of 80ms by making sure to keep the connections alive and reusing them, which in Node.js can be achieved via using an https.agent and setting its keepAlive: true (see the <a href="https://nodejs.org/api/tls.html">Node TLS documentation</a>).<br><br>PayPal has a couple of additional useful tips in their 4/2014 post <a href="https://www.paypal-engineering.com/2014/04/01/outbound-ssl-performance-in-node-js/">Outbound SSL Performance in Node.js</a>, mainly:<br><br><ul>
    <li>Disable expensive SSL ciphers (if you don't need their strength)</li>
    <li>Enable SSL session resume, if supported by the server, for shorter handshakes - the StrongLoop post "How-to Improve Node.js HTTPS Server Performance" explains <a href="https://strongloop.com/strongblog/improve-the-performance-of-the-node-js-https-server/">how to enable SSL session resume</a></li>
    <li>Keep Alive</li>
</ul><br><br>The article <a href="https://www.semicomplete.com/blog/geekery/ssl-latency.html">SSL handshake latency and HTTPS optimizations</a> (via Victor Danell) explains the ± 3.5* higher cost of SSL due to the 3 roundtrips need for the handshake (+ key generation time) and shows how to use curl to time connections and their SSL parts, as well as how to use OpenSSL and Tcpdump to learn even more about it.<br><br>See also <a href="https://istlsfastyet.com/">IsTlsFastYet.com</a> for a lot of valuable information, benchmarks etc.<br><br><h4>Tools</h4><br><br>(See the articles linked to above for examples)<br><br><ul>
    <li>curl</li>
    <li>openssl s_client</li>
    <li><a href="https://www.caida.org/tools/utilities/others/pathchar/">pathchar</a> by the traceroute author, intended to help to "find the bandwidth, delay, average queue and loss rate of every hop between any source &amp; destination"; there is also <a href="https://www.kitchenlab.org/www/bmah/Software/pchar/">pchar</a>, based on it</li>
</ul><br><br>&nbsp;
++++
