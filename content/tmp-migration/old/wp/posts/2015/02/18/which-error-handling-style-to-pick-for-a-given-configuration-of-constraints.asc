{:title
 "The Are No Silver Bullets: Which Error Handling Style to Pick For a Given Configuration of Constraints?",
 :date "2015-02-18",
 :layout :post,
 :tags ["opinion" "design"],
 :tags-orig ["design" "opinion"],
 :categories ["SW development"],
 :extra-css #{}
}

++++
Kent Beck in his <a href="https://www.facebook.com/notes/kent-beck/patterns-enhance-craft-step-3-a-handful-of-solutions/911063088926556">Patterns Enhance Craft Step 3: A Few Good Solutions</a> highlights an important fact about software development:<br><br><blockquote>We encounter repeating <span style="text-decoration:underline;">configurations of forces/constraints</span> that have only a <span style="text-decoration:underline;">handful of "solution families"</span> and the optimal solution(s) depend on the <span style="text-decoration:underline;">relative weights</span> of these constraints.</blockquote><br><br>For example when deciding what error handling style we should choose when calling an unreliable rutine:<br><br><blockquote>Depending on whether readability, reliability, automated analysis, performance, or future maintenance are most important you could reasonably choose any one of:
<ul>
    <li>Exceptions</li>
    <li>Return value plus errno</li>
    <li>Exceptional value (e.g. Haskell's Maybe)</li>
    <li>Success and failure callbacks</li>
</ul>
</blockquote><br><br>So there is no single perfect error handling style to rule them all.<br><br>Kent further explains that the forces shaping most design decisions are generated internal to the process of design, not by external constraints: whether we're building a barn or an airport, the list of forces influencing the roofing decision is the same - snow, wind, etc. - but their relative strengths may be different. Internal forces in SW development include use of the same bits of logic repeatedly, code made for/by people, etc.. F.ex. the forces influencing naming a variable do not depend on what SW we are building but on its purpose, lifetime, etc. We encounter some configurations of these constraints again and again and a catalogue of design patterns representing the "solution families" mentioned above can guide us towards the most suitable solution for given weights.<br><br><h3>Conclusion</h3><br><br>When designing a solution, it is helpful to think in terms of these forces and their relative strengths. There is no single superior solution (a.k.a. silver bullet) as different configurations of forces and their weights might be best suited by radically different solutions. Keeping this on our minds might prevent design discussions from dengenerating into an argument.
++++
