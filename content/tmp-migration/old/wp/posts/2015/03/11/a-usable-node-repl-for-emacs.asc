{:title "A Usable Node.js REPL for Emacs",
 :date "2015-03-11",
 :layout :post,
 :tags ["productivity" "nodejs"],
 :tags-orig ["emacs" "nodejs" "productivity"],
 :categories ["Languages" "Tools"],
 :extra-css #{}
}

++++
Being used to the excellent REPL in Clojure(Script), I was surprised to find out that Node.js REPL is somewhat weak and that its support in Emacs is not actively maintained. I anyway managed to get a usable REPL with these three components:<br><br><ol>
    <li>The Emacs <a href="https://github.com/abicky/nodejs-repl.el">nodejs-repl package</a> (nearly 2 years old)</li>
    <li>J. David Smith's <a href="https://gist.github.com/emallson/0eae865bc99fc9639fac">nodejs-repl-eval.el </a>to be able to send code to the REPL (binding <code>nodejs-repl-eval-dwim</code> to <code>C-x C-e</code> so that I can execute the current sexp/region)</li>
    <li><a href="https://github.com/holyjak/dotfiles/blob/0d4070e0379fbb4d978435a8d508154f0fd4a979/.live-packs/jholy-pack/lib/nodejs-repl-eval.el">My own extension of nodejs-repl-eval.el</a> that takes care of escaping JS constructs that the REPL interprets in a special way</li>
</ol><br><br>Regarding #3: The problem with the <a href="https://nodejs.org/api/repl.html#repl_repl_features">Node.js REPL</a> is that valid JS code does not always behave correctly in the REPL. This is because: 1) <code>_</code> is a special variable (the last result) while in code it is often used for the underscore/lodash library; 2) The<a href="https://stackoverflow.com/a/21741233/204205"> REPL also interprets lines somewhat separately</a> and tries to execute <code>&lt;dot&gt;&lt;name&gt;</code> as a REPL command, breaking chained calls that start on a new line. My solution uses some RegExp magic to turn<br><br><pre><code>
var _ = require(&quot;lodash&quot;); // #1a conflicting use of _
_.chain([1,2])             // #1b conflicting use of _
   .first()                // #2 interpreted as non-existing REPL command '.first'
   .value();
</code></pre><br><br>into<br><br><pre><code>
var __ = require(&quot;lodash&quot;);  // #1a Notice the doubled _
__.chain([1,2]).             // #1b Notice the doubled _
   first().                  // #2 Notice the dot has moved to the previous line
   value();
</code></pre><br><br>when the code is being sent to the REPL
++++
