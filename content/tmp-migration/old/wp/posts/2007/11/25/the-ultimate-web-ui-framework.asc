{:title "The Ultimate Web UIÂ Framework",
 :date "2007-11-25",
 :layout :post,
 :tags ["webdev" "java" "library"],
 :tags-orig ["framework" "java" "UI" "webapp"],
 :categories ["j2ee" "Languages"],
 :extra-css #{}
}

++++
Recently I have found myself in the need of a framework for creating rich, responsive and highly interactive web-based user interfaces that would ideally be easy to use and fast to learn. I was basically only interested in the view part of the presentation tier, that's the UI running in user's browser and interacting with him/her. I had no preferences regarding the 'M' and 'C' of MVC, in other words the server-side of the presentation-tier.<br /><br />After doing some research I've found a couple of candidates:<br /><ul><li>Echo2</li><li>Google Web Toolkit (GWT) with the GWT-Ext components library<br /></li><li>JBoss RichFaces (it is based JSF; perhaps use with Seam)</li><li>OpenLaszlo/Flex</li><li>Others: Wicket, Grails, Struts 2, ...<br /></li></ul>The listed frameworks are quite different one from another. We can categorize them in a couple of ways w.r.t. different aspects:<br /><br><br><dl>
<dt>Client-side versus server-side interaction handling</dt>
<dd>Does the presentation logic that controlls user interaction and UI changes run on the client and only sends/receives data when it's necessary or does the presentation logic run on the server-side with (nearly) each action of the user resulting in a request?<br /></dd>
<dt>Implementation language: Java, XML+JavaScript, html/css/js, other</dt>
<dd>Is the interface described using the classical combination of JSP, HTML, CSS and Javascript, or is it described in pure Java, or does it use the combination of XML and JavaScript, or even something else?<br /></dd>
<dt>Interaction model: event-based or request-driven</dt>
<dt>And so on...</dt>
</dl><br><br><p>Regarding the frameworks, which I'll describe later on, we can say:</p><ul><li>Client-side: GWT and OpenLaszlo or Flex run mainly on the client while the others more on the server</li><li>Language: With GWT &amp; Echo you define your UI in pure Java, with Flex/OpenLaszlo in xml+js, JSF uses the classical JSP &amp; co. combination.<br /></li></ul><h2>Introducing the frameworks</h2><p>Disclaimer: I'm no master of these frameworks. The information below is a compilation of opinions of their users and info from various sources like documentation, articles and blogs.<br /></p><p>All of these frameworks are open-source.<br /></p><h3><a href="https://www.nextapp.com/platform/echo2/echo/">Echo 2</a> (<a href="https://www.nextapp.com/platform/echo2/echo/demo/">demo</a>)</h3><ul><li>UI defined by Java classes as with Swing, event-based<br /></li><li>runs on the server-side and most user actions result in a request being sent to the server<br /></li><li>commercial IDE for - I suppose - graphical design of the UI; but you can code it without that in any editor</li></ul><p>Pros</p><ul><li>UI defined in Java <br /></li><ul><li>=&gt; you don't need to spend weeks learning JSP, JSTL, custom taglibs, HTML, CSS, JavaScript. This makes also developers cheaper.</li><li>=&gt; support for refactoring<br /></li></ul><li>A number of existing components<br /></li><li>Nice look&amp;feel</li><li>Only the code and content that is currently actually needed is downloaded to the client, other parts are downloaded as needed via Ajax - this should make the download of an echo 2 application and its start faster but may slow it later when you may need to wait for an additional stuff to be fetched</li><li>Backed by a commercial company, seems to be pretty alive with a reasonable community<br /></li></ul><p>Cons</p><ul><li>Runs mainly on the server-side, many user actions result in a request, which makes it slower and less responsive. For example switching a tab in the demo took usually around a second (this may be given by the current load, limits etc.of the server, but frameworks that handle this completely on the client side don't have any such problems)</li><li>the Eclipse-based EchoStudio 2 IDE for rapid visual development of Echo 2 UI is commercial though you can, of course, code your ui by hand in any editor</li><li>A new API to learn - it could be perhaps more similar to Swing API to make it easier for newcomers<br /></li></ul><h3><a href="https://code.google.com/webtoolkit/">Google Web Toolkit</a> (GWT) with <a href="https://code.google.com/p/gwt-ext/">GWT-Ext</a> components<br /></h3><p>As with Echo 2, you create your UI by writing Java classes, using a Swing-like API. But here the UI components (widgets) you've written are compiled at the development-time into html/css/javascript.</p><p>Pros</p><ul><li>Pure Java development =&gt; less knowledge required, support for refactoring - as with Echo 2</li><li>The components (widgets) are pure html/css/javascript and can be embedded into any page, even a static one or one created via another framework (you could e.g. place the component on a JSF page)</li><li>Runs on the client-side - a GWT application is a true rich UI running in the user's browser, the presentation flow and user interaction is handled locally as much as possible. The server-side is only called when data interchange in necessary.<br /></li><li>Backed by Google; no need to say more :) <br /></li><li>Steap learning curve - according to some you can start writing reasonable GWT applications in a week</li><li>A rich and growing set of components provided within GWT-Ext</li><li>Debugging: You can run the UI in a hosted mode within a special browser provided by Google without compilation into html/..., thus being able to use Java debugger etc. for it<br /></li></ul><p>Cons</p><ul><li>Java: provides only a subset of java.lang and java.util. Currently only works with Java 1.4, the upcomming GWT 1.5 will only work with Java 5.0..<br /></li><li>Closed-source Java to html/css/js converter</li><li>All the application files are donwloaded at once to the client, which can make its start slower; on the other hand Google is very good in optimizing the file sizes&nbsp; and the generated code from the donwload time perspective.</li><li>According to some people it isn't a good idea to have all the presentation logic on the client side for security reasons<br /></li></ul><h3>JBoss <a href="labs.jboss.com/jbossrichfaces/">Rich Faces</a> (for JSF)<br /></h3><p>&nbsp;RichFaces is a JavaServer Faces (JSF) component library that heavily uses Ajax. But it goes beyond that and makes it possible to add Ajax support to existing components/applications, provides skinnable components, makes it possible to pack .js and .css into JAR archives together with your components.</p><p>JSF is &quot;the standard&quot;, component and event-oriented presentation framework. To get the maximum out of it, you can use RichFaces together with <a href="https://facelets.dev.java.net/">Facelets</a> (see my <a href="https://www.jroller.com/holy/entry/introducing_facelets">Facelets post</a>) and the application framework JBoss <a href="https://www.jboss.com/products/seam">Seam</a>, which provides among others integration with EJB, business processes, and the &quot;conversation context&quot;.</p><p>Pros</p><ul><li>Builds on JSF, the &quot;new&quot; standard (JSR #127, v.1.2 <a href="https://jcp.org/en/jsr/detail?id=252">#257</a>, the new v.2.0 <a href="https://jcp.org/en/jsr/detail?id=314">#314</a>) for creating web UI and pluggable components. JSF can be also used for creating portlets (see JSR <a href="https://jcp.org/en/jsr/detail?id=301">#301</a> - Portlet Bridge Specification for JavaServer Faces) though I don't know how much is this supported by RichFaces itself</li><li>RichFaces components and Ajax-support can be easily added to existing JSF applications and pages<br /></li></ul><p>Cons</p><ul><li>Runs on the server-side, most user actions result in a request, either via GET/POST or in the background via ajax.</li><li>It carries all the disadvantages of JSF (search on the web...)</li><li>You need to know JSF, html, css and either Facelets or JSP, JSTL etc.<br /></li></ul><h3><a href="https://www.openlaszlo.org/">OpenLaszlo</a> or <a href="https://www.adobe.com/products/flex/">Flex</a>&nbsp;</h3><p>Both these tools/frameworks let you create rich UI in Flash (or also DHTML with O.L.) using XML and JavaScript and both have no relation to Java - they provide for creating rich client-side applications that communicate to the server-side using some standard mechanism, for example web services or RESTful servlets returning xml or json.<br /></p><p>OpenLaszlo 4.x has the advantage of being able to compile the UI not only into Flash but also into DHTML (html/css/javascript). See <a href="https://www.openlaszlo.org/demos">OpenLaszlo demos</a>.<br /></p><p>Adobe Flex is development framework for creating rich Internet applications using variations of XML (MXML) and JavaScript (ActionScript). The Flex SDK is open-source, the Eclipse-based Flex Builder IDE for rapid development of Flex applications is commercial. The famous author of Thinking in Java, Bruce <a href="https://www.artima.com/weblogs/viewpost.jsp?thread=193593" title="Article - Bruce Eckel: Hybridizing Java">Eckel, promotes Flex</a> and mentiones OpenLaszlo (recommended reading!; check also the <a href="https://www.artima.com/forums/flat.jsp?forum=106&amp;thread=193593">comments</a>).</p><p>Pros</p><ul><li>Very rich UI with advanced capabilites regarding e.g. multimedia and vector graphics</li><li>Runs on the client side and only contacts the serer-side when necessary to get or send data<br /></li><li>You only need to learn the framework's xml and javascript, not the full stack of jsp/jstl/css/....</li><li>Can use back-ends not written in Java =&gt; encourages writting you server-side components in such a way that they can be used and reused in multiple ways. Because it isn't bound to any particular server-side framework or language, you can you is with any you like.</li><li>There is a fair number of existing components for both Flex and OpenLaszlo (especial
ly for Flex)</li><li>Flex is faster and richer than OpenLaszlo</li><li>You can nest Flex application into a page and integrate with it <br /></li></ul><p>Cons</p><ul><li>You need Flash plugin in the browser to use the UIs. OpenLaszlo can generate dhtml, but I'm not sure whether it's mature enough.</li><li>The startup may be a bit slower</li><li>Flesh isn't HTML and thus search engines like Google cannot search and index it so well</li><li>an IDE with visual UI builder and other support either isn't available or only for a fee (though people say you don't really need one)</li><li>Flex isn't completely free: is some cases, like using Flex Data Services on multiple CPUs, you must pay (but see the LGPL <a href="https://www.graniteds.org/confluence/display/INTRO/Granite+Data+Services">Granite DS</a>)<br /></li></ul><h3>Others: Wicket, Grails, Struts 2, ...</h3><p>There are certainly other popular frameworks that may support rich user interface. But I've deliberately limited myself to the most famous ones and those that are somehow unique and catched my attention. <br /></p><h2>Criteria for&nbsp; evaluating web UI frameworks (draft)</h2><p>The following criteria could/should be used when deciding wheher a particular framework is suitable for an application and the problem it tries to solve.&nbsp;</p><p>Practical</p><ul><li>availability of developers familiar with the framework</li><li>tools support</li><li>existing components</li></ul><p>Learning &amp; using<br /></p><ul><li>support community</li><li>learning curve</li><li>documentation</li><li>rapid development: can write UI fast?</li><li>ease of use - principles like DRY, convention over configuration etc. that make it's use easier<br /></li></ul>Non-functional characteristics<br /><ul><li>flexibility (let me do st. unexpected that I really need)</li><li>performance, scalability</li><li>maintainability; refactoring supported?</li><li>suitable for large enterprise apps with many &quot;pages&quot;?</li><li>user experience (rich &lt;&gt; ajax)</li></ul><p>Other</p><ul><li>evolution: has it momentum? new versions backward compatible?</li><li>stable and proven framework?<br /></li></ul><p>Note: diffferent frameworks are suitable for different cases; there is no single framework that's the best fit for any problem. Still we would certainly like to keep the number of frameworks used as small as possible.<br /></p><h2>Summary/Conclusion</h2><p>I was searching for a framework that would allow me to create rich user interfaces that are very interactive and responsive and don't load the server too much. After examining some favourite frameworks I've decided for a few that I'd like to try.</p><p>Different applications have different architectural and UI requirements, which makes some frameworks suitable for the problem at hand and some not. But when we limit ourselves to a user-interaction centered application, I think that the classical frameworks like Struts 1/2 and JSF just aren't suitable, even with Ajax. They place to much burden on the server, aren't responsive and interactive enough and don't always provide for rapid creation of rich interfaces. I like the idea of user interface running on the client, as with GWT or OpenLaszlo, and having only the business logic on the server-side. This provides for richer and more responsive UI and places less burden on the server, which can thus serve more clients. Ganesh Prasad promotes such a solution in his blog entry &quot;<a href="https://wisdomofganesh.blogspot.com/2007/10/life-above-service-tier.html" title="Ganesh - blog - introduction of the SOFEA arch.">Life above the Service Tier</a>&quot; with the term Service-Oriented Front-End Architecture (SOFEA), a rich UI above a service layer. I indeed recommend reading it.</p><p>To conclude: I'd use either GWT or OpenLaszlo (or maybe Flex) when a true rich user interface is required and/or when this of technology and approaches isn't against internal standards of the company. If a more traditional approach is necessary, I'd prefer RichFaces because JSF is quite popular and standard.<br /></p><h2>Links and resources<br /></h2><ul><li><a href="https://labs.adobe.com/technologies/air/">&nbsp;Adobe AIR</a> (former Apollo) - runtime for running web 2.0 and Flex applications as desktop application, with full integration, access, and support for running offline.</li><li><div align="left"><a href="https://gears.google.com/">Google Gears</a> - &quot;an open source browser extension that enables web applications to provide offline functionality&quot; by providing JavaScript API for storing &amp; serving resources (html, images...) locally, acess to an embedded database, and more.<br /></div></li><li>Microsoft <a href="https://en.wikipedia.org/wiki/Silverlight">Silverlight</a> -  multiplatform and multibrowser plugin and runtime for running rich .NET applications from within a browser. It competes with Flesh (hence Flex) and the new mysterious Sun's <a title="JavaFX homepage" href="https://www.sun.com/software/javafx/index.jsp">JavaFX</a>.</li></ul><p>Articles, blogs etc.<br /></p><ul><li>Matt Raible: <a href="https://raibledesigns.com/rd/entry/comparing_web_frameworks_time_for">Comparing Web Frameworks: Time for a Change?</a> - &quot;top 6 frameworks&quot; and an enlightening discussion.<br /><span class="entryTitle"></span><a href="https://raibledesigns.com/rd/entry/comparing_jvm_web_frameworks_presentation">Comparing JVM Web Frameworks Presentation</a> (Nov 14, 2007)<br /></li><li><a href="https://www.theserverside.com/news/thread.tss?thread_id=40804">Comparing the Google Web Toolkit to Echo2</a> - by a developer of Echo</li><li>James Ward arguments <a href="https://www.jamesward.org/wordpress/2007/11/15/matt-raible-comparing-jvm-web-frameworks/">why to use Flex</a> in a comment to Raible's Comparing JVM Web Frameworks</li><li>... and many more ...</li><li><a href="https://www.infoq.com/news/2008/01/gosling-on-flash" title="article w/ link and comments on JG">James Gosling on Adobe Flash / Flex / AIR</a><a href="https://blogs.pathf.com/agileajax/2007/11/thinking-of-alt.html"></a></li><li><a href="https://blogs.pathf.com/agileajax/2007/11/thinking-of-alt.html">Thinking of alternatives to GWT-RPC</a> - e.g. Jaxter, Enunciat</li><li>James Ward arguments <a href="https://www.jamesward.org/wordpress/2007/11/15/matt-raible-comparing-jvm-web-frameworks/">why to use Flex</a> in a comment to Raible's Comparing JVM Web Frameworks</li><li>2008-04-01:&nbsp; Sajnvi Jivan: <a href="https://www.jroller.com/sjivan/entry/thoughts_on_java_webframeworks_and">Thoughts on Java web frameworks and RIA </a>- recommends Flex&amp;GWT for dynamic apps and request-response frameworks for those needing SEO, bookmarkability, and RESTful services</li><li>Blog Evolutionary Goo: <a href="https://evolutionarygoo.com/blog/?p=233">Choosing a Java Web Framework (Revisited)&nbsp;</a> (2008-09-18)<br /></li></ul>
++++
