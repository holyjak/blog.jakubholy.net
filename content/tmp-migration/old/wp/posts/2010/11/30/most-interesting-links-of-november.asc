{:title "Most interesting links of November",
 :date "2010-11-30",
 :layout :post,
 :tags ["testing" "java" "library" "tool" "performance"],
 :tags-orig
 ["java" "javaEE" "jvm" "Maven" "performance" "spring" "tdd" "xml"],
 :categories ["j2ee" "Languages" "Top links of month"],
 :extra-css #{}
}

++++
This month has been quite interesting, among others I 've picked up several blogs by Adam Bien. I really like his brief, practical and insightful posts :-)<br><br>Java, Jave EE, architecture etc.
<ul>
	<li><a href="https://www.adam-bien.com/roller/abien/entry/ejb_3_1_hessian_almost">EJB 3.1 + Hessian = (Almost) Perfect Binary Remoting</a> - "With hessian it is very easy to expose existing Java-interfaces with almost no overhead. Hessian is also extremely (better than IIOP and far better than SOAP) fast and scalable." See also the discussion regarding a "DynamicHessianServlet" (which would be more comfortable then creating a new servlet for each service).</li>
	<li><a href="https://fi.dev.java.net/performance.html">Binary XML - Fast Infoset performance results</a> - FI is the name of a standard for binary XML encoding and also of its OSS implementation; according to these measurements (with default settings, compared to Xerces 2.7.1), on average: The FI SAX parser  is about <strong>5 times faster</strong> than the Xerces SAX parser, the FI DOM serializer (using default settings) is 25% to 30% faster than the Xerces DOM XMLSerializer, and FI documents are 40% to 60% smaller than XML documents (i.e. it can provide modest to good compression). And: "The use of external vocabularies can be a very effective way to increase the efficiency of parsing, serializing and size at the expense of the fast infoset documents no longer being self-describing ... ."
For the interested ones: FI is built on <a href="https://en.wikipedia.org/wiki/ASN.1">ASN.1</a>, a standard for describing data structures in a way that is independent of machine architecture and implementation language, it also includes a selection on different binary encoding rules, e.g. DER (triplets tag id - length - value).</li>
	<li><a href="https://www.adam-bien.com/roller/abien/entry/ejb_3_1_and_rest">EJB 3.1 And REST - The Lightweight Hybrid - Why to use @Stateless</a> - there have been recently discussion about Spring vs. EJB and whether @Stateless is of any use. According to this article, the added value of EJB (though some are provided also by Spring) include injection capabilities, transactions, single threading model (for why that is good see #2 on <a href="https://www.adam-bien.com/roller/abien/entry/why_i_like_ejb_3">Why I like EJB 3.0/3.1</a>), visibility in JMX, concurrency restriction via thread/bean pools.</li>
	<li><a href="https://www.adam-bien.com/roller/abien/entry/why_service_isn_t_a">Why Service Isn't A ServiceFacade, But ServiceFacade Is Sometimes A Service...</a></li>
	<li><a href="https://blog.springsource.com/2010/11/10/hyperic-4-5-released/">Experiences from migrating Hyperic 4.5 from EJB/JBoss to Spring/Tomcat</a>,  what good has it brought - simplified unit and integration tests,  simplified code thanks to Jdbc/JmsTemplate, ... (My comment: EJB 3.1 would  certainly bring at least some of the advantages too.)</li>
</ul>
Performance - large JVM heaps are very much feasible
<ul>
	<li><a href="https://www.nearinfinity.com/blogs/aaron_mccurry/tuning_the_ibm_jvm_for_large_h.html">Tuning the IBM JVM for large heaps</a> - tuning 64b IBM JVM 6 with <strong>100GB heap</strong> to have acceptable GC times (~ 1/2s as opposed to 25s with the default settings)</li>
	<li><a href="https://www.enigmastation.com/?p=532">BigMemory: Heap Envy</a> - there have been recently a lot of fuss about Terracotta's new  BigMemory, a  GC-resistent many GB cache space (using NIO byte buffer).  This post discusses it's disadvantages and compares it with a solution  based on ConcurrentHashMap, comming to the conclusion that the old good  ConcurrentHashMap outperforms BigMemory considerably.</li>
</ul>
Other
<ul>
	<li><a href="https://gojko.net/2009/02/27/thought-provoking-tdd-exercise-at-the-software-craftsmanship-conference/">Mind-breaking TDD exercise - Thought-provoking TDD exercise at the Software Craftsmanship conference</a> - a TDD exercise with strict rules requiring to only write implementation in the test itself and then refactor it out as needed. I'd strongly suggest that you try to do it by yourself. There is a <a href="https://gojko.net/2009/08/02/tdd-as-if-you-meant-it-revisited/">more detailed report from a tic-tac-toe version</a> and a bit about <a href="https://www.markhneedham.com/blog/2009/04/30/coding-dojo-13-tdd-as-if-you-meant-it/">implementing a message interceptor in this way</a>. An interesting observation: "<em>differences from a pre-conceived design and the one that emerges from code are considerable, the latter being a lot more elegant and better suited to describe a problem.</em>"</li>
	<li><a href="https://www.whattofix.com/blog/archives/2010/11/to-code-quickly.php">To code quickly, you must quit coding (Pomodoro etc.)</a> - why Pomodoro technique (concentrate 25m on work rejecting interruptions, then take a break) and similar ones work</li>
	<li><a href="https://ju-n.net/colorize-maven-output">Colorize Maven output in Linux/bash via filtering</a> of Maven’s mvn command output using sed. (Thanks to Alda for the link.)</li>
</ul>
++++
