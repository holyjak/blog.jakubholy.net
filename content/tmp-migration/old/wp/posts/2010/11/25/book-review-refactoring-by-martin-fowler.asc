{:title "Book review: Refactoring by Martin Fowler",
 :date "2010-11-25",
 :layout :post,
 :tags ["book" "java" "refactoring"],
 :tags-orig ["book" "java" "refactoring" "review"],
 :categories ["Languages"],
 :extra-css #{}
}

++++
I had high expectations for Martin Fowler's <a href="https://www.amazon.com/gp/product/0201485672?ie=UTF8&amp;tag=martinfowlerc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0201485672">Refactoring</a> (1999/2002) but it turned out that both me and the book are too old. It had some interesting parts, but the main one - the refactoring catalog itself - had little new for me because I already know most of the refactorings and the description of steps how to perform them safely is nowadays essentially useless as they're already automatically and safely performed by our IDEs.<br><br>I've enjoyed chapter 1 with a nice example of how bad code is turned into a nice one via a series of refactorings and I'd recommend it to any beginning developer. For others than me also chapter 2 may be useful, it explains why and when to refactor, how it impacts your development speed and how to justify it to the manager. I'd skip chapter 3 - bad smells in the code - and read instead of it the Uncle Bob's lovely <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1290639929&amp;sr=1-1">Clean Code</a> , which is a great justification and basis for refactoring anyway.<br><br>In the catalog I've appreciated the description of some refactorings for various reasons, such as 6.4 Replace Temp with Query, 8.14 Replace Type Code with Subclasses, 9.7 Introduce Null Object, 9.8 Introduce Assertion. Of course also the other ones are good but they are just too familiar to me and my IDE to draw my attention anymore.<br><br>Chapter 12, Big Refactorings, is quite interesting, especially Tease Apart Inheritance.<br><br>Finally there are some good advices in Putting It All Together by Kent Beck, such as that it's good to know when to stop and to be able to resist the temptation to refactor too much at once.<br><br>I've also appreciated the "war stories", especially regarding performance tuning, where once again it's demonstrated that a guess (however founded) is incomparable to hard evidence.
<h2>Conclusion</h2>
If you do refactorings daily, perhaps skip the book. If not, read chapter 1, perhaps browse through 2 and 12, check whether anything catches your eye in the <a href="https://www.amazon.com/gp/reader/0201485672/ref=sib_dp_ptu#reader-link">refactoring catalog table of content</a>, read Kent's closing chapter and return the book to the local museum.
++++
