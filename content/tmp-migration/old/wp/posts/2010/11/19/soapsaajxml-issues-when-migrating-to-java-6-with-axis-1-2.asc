{:title
 "SOAP/SAAJ/XML Issues When Migrating to Java 6 (with Axis 1.2)",
 :date "2010-11-19",
 :layout :post,
 :tags ["java"],
 :tags-orig ["java" "java6" "migration" "soap" "xml"],
 :categories ["Languages"],
 :extra-css #{}
}

++++
When you migrate an application using Apache Axis 1.2 from Java 4 or 5 to Java 6 (JRE 1.6) you will most likely encounter a handful of strange SOAP/SAAJ/XML errors and ClassCastExceptions. This is due to the fact that Sun's implementation of <a href="https://download.oracle.com/javase/6/docs/api/javax/xml/soap/package-summary.html#package_description">SAAJ 1.3 has been integrated directly into the 1.6 JRE</a>. Due to this integration it's loaded by the bootstrap class loader and thus cannot see various classes that you might be referencing in your old code.<br><br>As mentioned on <a href="https://static.springsource.org/spring-ws/sites/1.5/faq.html#java-1.6">Spring pages</a>:
<blockquote>Java 1.6 ships with SAAJ 1.3, JAXB 2.0, and JAXP 1.4 (a custom version of Xerces and Xalan). Overriding these libraries by putting different version on the classpath will result in various classloading issues, or exceptions in org.apache.xml.serializer.ToXMLSAXHandler. The only option for using more recent versions is to put the newer version in the endorsed directory (see above).</blockquote>
Fortunately, there is a simple solution, at least for Axis 1.2.<!--more-->
<h2>Some of the exceptions that we've encountered</h2>
<h3>Sample Axis code</h3>
<pre><code>
import javax.xml.messaging.URLEndpoint;<br><br>import javax.xml.soap.MessageFactory;
import javax.xml.soap.SOAPConnection;
import javax.xml.soap.SOAPConnectionFactory;
import javax.xml.soap.SOAPMessage;<br><br>...<br><br>public static callAxisWebservice() {
	SOAPConnectionFactory soapconnectionfactory = SOAPConnectionFactory.newInstance();
	SOAPConnection soapconnection = soapconnectionfactory.createConnection();
	MessageFactory messagefactory = MessageFactory.newInstance();
	SOAPMessage soapmessage = messagefactory.createMessage();
	...
	URLEndpoint urlendpoint = new URLEndpoint(string);
	SOAPMessage soapmessage_18_ = soapconnection.call(soapmessage, urlendpoint);
	...
}
</code></pre>
<h3>SOAPExceptionImpl: Bad endPoint type</h3>
<pre>﻿com.sun.xml.internal.messaging.saaj.SOAPExceptionImpl: Bad endPoint type http://example.com/ExampleAxisService
 at com.sun.xml.internal.messaging.saaj.client.p2p.HttpSOAPConnection.call(HttpSOAPConnection.java:161)</pre>
This extremely confusing error is caused by the following, seemingly innocent code above, namely by the '... new URLEndpoint(string)' and the call itself. The problem here is that Sun's <em>HttpSOAPConnection can't see the javax.xml.messaging.URLEndpoint because it is not part of the JRE</em> and is contained in another JAR, not visible to the classes loaded by the bootstrap loader.<br><br>If you check the <a href="https://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/com/sun/xml/internal/messaging/saaj/client/p2p/HttpSOAPConnection.java#HttpSOAPConnection.call%28javax.xml.soap.SOAPMessage%2Cjava.lang.Object%29">HttpSOAPConnection's code</a> (this is not exactly the version I have but close enough) you will see that it calls "Class.forName("javax.xml.messaging.URLEndpoint");" on line 101. For the reason mentioned it fails with a ClassNotFoundException (as indicated by the log "URLEndpoint is available only when JAXM is there" when you <a href="https://www.javapractices.com/topic/TopicAction.do?Id=143">enable the JDK logging</a> for the finest level)  and thus the method isn't able to recognize the type of the argument and fails with the confusing Bad endPoint message.<br><br>A soluti0n in this case would be to pass a java.net.URL or a String instead of a URLEndpoint (though it might lead to other errors, like the one below).<br><br>Related: <a href="https://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6619327">Oracle saaj:soap1.2 bug SOAPExceptionImpl: Bad endPoint type</a>.
<h3>DOMException: NAMESPACE_ERR</h3>
<pre>org.w3c.dom.DOMException: NAMESPACE_ERR: An attempt is made to create or change an object in a way which is incorrect with regard to namespaces.
 at org.apache.xerces.dom.AttrNSImpl.setName(Unknown Source)
 at org.apache.xerces.dom.AttrNSImpl.&lt;init&gt;(Unknown Source)
 at org.apache.xerces.dom.CoreDocumentImpl.createAttributeNS(Unknown Source)</pre>
We got this when calling an Axis web service via a proxy object, I've no idea why it is thrown. The solution is as below, to set the SOAP implementation properties either upon start or at the runtime.
<h3>Bonus: Conflict between Axis and IBM WebSphere JAX-RPC "thin client"</h3>
Additionally, if you happen to have com.ibm.ws.webservices.thinclient_7.0.0.jar somewhere on the classpath, you may get this funny exception:
<pre>java.lang.ClassCastException: org.apache.axis.Message incompatible with com.ibm.ws.webservices.engine.Message
 at com.ibm.ws.webservices.engine.soap.SOAPConnectionImpl.call(SOAPConnectionImpl.java:198)</pre>
You may wonder why Java tries to use Axis Message with WebSphere SOAP connection. Well, it's because the SAAJ lookup mechanism prefers the websphere implementation, for it declares itself via META-INF/services/javax.xml.soap.SOAPFactory pointing to com.ibm.ws.webservices.engine.soap.SOAPConnectionFactoryImpl, but instantiates the org.apache.axis.soap.MessageFactoryImpl for message creation for the websphere thin client doesn't provide an implementation of this factory.<br><br>The solution here is the same as for all the other exception, to use exclusively Axis. But if you are interested, check the description how to correctly create a Message with the websphere runtime on page 119 of the <a href="https://www.redbooks.ibm.com/abstracts/sg247758.html?Open">IBM WebSphere Application Server V7.0 Web Services Guide</a> (md = javax.xml.ws.Service.create(serviceName).createDispatch(portName, SOAPMessage.class, Service.Mode.MESSAGE);  ((SOAPBinding) ((BindingProvider) md).getBinding()).getMessageFactory();).
<h2>Solution</h2>
The solution that my collegue Jan Nad has found is to<strong> force JRE to use the SOAP/SAAJ implementation provided by Axis</strong>, something like:<br><br><pre><code>java -Djavax.xml.soap.SOAPFactory=org.apache.axis.soap.SOAPFactoryImpl -Djavax.xml.soap.MessageFactory=org.apache.axis.soap.MessageFactoryImpl -Djavax.xml.soap.SOAPConnectionFactory=org.apache.axis.soap.SOAPConnectionFactoryImpl example.MainClass</code></pre><br><br>Alternatively, at the runtime:
<pre><code>System.setProperty(&quot;javax.xml.soap.SOAPFactory&quot;, &quot;org.apache.axis.soap.SOAPFactoryImpl&quot;);
System.setProperty(&quot;javax.xml.soap.MessageFactory&quot;,&quot;org.apache.axis.soap.MessageFactoryImpl&quot;);
System.setProperty(&quot;javax.xml.soap.SOAPConnectionFactory&quot;,&quot;org.apache.axis.soap.SOAPConnectionFactoryImpl&quot;);
</code></pre><br><br>It's also <a href="https://issues.apache.org/jira/browse/AXIS-2777">described in issue AXIS-2777</a>.<br><br>Check <a href="https://download.oracle.com/javase/6/docs/api/javax/xml/soap/SOAPFactory.html#newInstance%28%29">details of the lookup process in the SOAPFactory.newInstance() JavaDoc</a>.
++++
