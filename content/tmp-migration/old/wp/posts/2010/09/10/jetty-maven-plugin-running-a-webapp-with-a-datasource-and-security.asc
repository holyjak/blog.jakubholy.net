{:title
 "Jetty-maven-plugin: Running a webapp with a DataSource and security",
 :date "2010-09-10",
 :layout :post,
 :tags ["security" "java" "methodology" "tool"],
 :tags-orig
 ["datasource"
  "development"
  "java"
  "javaEE"
  "jetty"
  "Maven"
  "security"],
 :categories ["j2ee" "Languages" "Tools"],
 :extra-css #{}
}

++++
This post describes how to configure the <a href="https://mojo.codehaus.org/jetty-maven-plugin/usage.html">jetty-maven-plugin</a> and the <a href="https://jetty.codehaus.org/jetty/">Jetty</a> servlet container to run a web application that uses a data source and requires users to log in, which are the basic requirements of most web applications. I use Jetty in development because it's fast and easy to work with.<!--more-->
<h1>Why Jetty?</h1>
Well, because it's much faster then the Websphere AS I normally use and it really well supports fast (or shall I say agile? :-)) development thanks to its fast turnaround. And because it's simply cool to type<br><br><pre><code>
bash$ svn checkout http://example.com/repo/trunk/mywebapp
bash$ cd mywebapp
bash$ mvn jetty:run
bash$ firefox http://localhost:8080/mywebapp
</code></pre><br><br>and to be able to immediatelly log into and interact with the application.<br><br>However it should be noted that Jetty isn't a full-featured JavaEE server and thus may not be always usable.
<h1>Project setup</h1>
<h2>General configuration</h2>
You need to add the Jetty plugin to your <strong>pom.xml</strong>:<br><br><pre><code>
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;com.example&lt;/groupId&gt;
  &lt;artifactId&gt;mywebapp&lt;/artifactId&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;
  ...
  &lt;build&gt;
  	...
  	&lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
      &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
      &lt;version&gt;6.1.0&lt;/version&gt;
      &lt;configuration&gt;
        &lt;scanIntervalSeconds&gt;3&lt;/scanIntervalSeconds&gt;
          ...
      &lt;/configuration&gt;
      ...
    &lt;/plugin&gt;
    ...
  &lt;/plugins&gt;<br><br>  &lt;/build&gt;
&lt;/project&gt;
</code></pre><br><br>As you can see, I'm using Jetty 6.1.0.
<h2>Defining a DataSource</h2>
Let's assume that the application uses a DataSource configured at the server and accesses it normally via JNDI. Then we must define a reference to the data source in src/main/webapp/<strong>WEB-INF/web.xml</strong>:<br><br><pre><code>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;web-app id=&quot;WebApp_ID&quot; version=&quot;2.4&quot;
	xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
	xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;&gt;
	...
	&lt;servlet&gt;...&lt;/servlet&gt;
	...
	&lt;resource-ref&gt;
		&lt;res-ref-name&gt;jdbc/LMSDB&lt;/res-ref-name&gt;
		&lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;
		&lt;res-auth&gt;Container&lt;/res-auth&gt;
		&lt;res-sharing-scope&gt;Shareable&lt;/res-sharing-scope&gt;
	&lt;/resource-ref&gt;
&lt;/web-app&gt;
</code></pre><br><br>Next we need to describe the DataSource to Jetty. There are multiple ways to do that, I've chosen to do so in src/main/webapp/<strong>WEB-INF/jetty-env.xml</strong>:<br><br><pre><code>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE Configure PUBLIC &quot;-//Mort Bay Consulting//DTD Configure//EN&quot; &quot;http://jetty.mortbay.org/configure.dtd&quot;&gt;
&lt;Configure class=&quot;org.mortbay.jetty.webapp.WebAppContext&quot;&gt;
  &lt;New id=&quot;LMSDB&quot; class=&quot;org.mortbay.jetty.plus.naming.Resource&quot;&gt;
    &lt;Arg&gt;jdbc/LMSDB&lt;/Arg&gt;
    &lt;Arg&gt;
    	&lt;New class=&quot;com.ibm.db2.jcc.DB2SimpleDataSource&quot;&gt;
                 &lt;Set name=&quot;DatabaseName&quot;&gt;LMSDB&lt;/Set&gt;
                 &lt;Set name=&quot;User&quot;&gt;myUser&lt;/Set&gt;
                 &lt;Set name=&quot;Password&quot;&gt;secret&lt;/Set&gt;
                 &lt;Set name=&quot;ServerName&quot;&gt;db.toronto.ca.ibm.com&lt;/Set&gt;
                 &lt;Set name=&quot;PortNumber&quot;&gt;3711&lt;/Set&gt;
     &lt;/New&gt;
    &lt;/Arg&gt;
  &lt;/New&gt;
&lt;/Configure&gt;
</code></pre><br><br>Notice that the class used is DB2SimpleDataSource and not a JDBC driver. That is, of course, because we need a DataSource, not a Driver. The Jetty wiki pages also contain examples of <a href="https://docs.codehaus.org/display/JETTY/DataSource+Examples">DataSource configuration for other DBs</a>.<br><br>Finally we must make the corresponding JDBC implementation available to Jetty by adding it to the plugin's dependencies in the <strong>pom.xml</strong>:<br><br><pre><code>
&lt;plugin&gt;
  &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
  &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
  &lt;version&gt;6.1.0&lt;/version&gt;<br><br>  &lt;configuration&gt;
	&lt;...
  &lt;/configuration&gt;<br><br>  &lt;dependencies&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;com.ibm.db2&lt;/groupId&gt;
		&lt;artifactId&gt;db2jcc&lt;/artifactId&gt;
		&lt;version&gt;9.7&lt;/version&gt;
		&lt;type&gt;jar&lt;/type&gt;
		&lt;scope&gt;system&lt;/scope&gt;
		&lt;systemPath&gt;${basedir}/../lms.sharedlibraries/db2/db2jcc.jar&lt;/systemPath&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;com.ibm.db2&lt;/groupId&gt;
		&lt;artifactId&gt;db2jcc_license_cisuz&lt;/artifactId&gt;
		&lt;version&gt;9.7&lt;/version&gt;
		&lt;type&gt;jar&lt;/type&gt;
		&lt;scope&gt;system&lt;/scope&gt;
		&lt;systemPath&gt;${basedir}/../lms.sharedlibraries/db2/db2jcc_license_cisuz.jar&lt;/systemPath&gt;
	&lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/plugin&gt;
</code></pre><br><br>Please do not scorn me for using system-scoped dependencies ;-), sometimes that is unfortunatelly the most feasible way.
<h2>Enabling security and configuring an authentication mechanism</h2>
We would like to limit access to the application only to the authenticated users in the ADMIN role with the exception of pages under public/. Therefore we declare the appropriate security constraints in web.xml:<br><br><pre><code>
...
&lt;security-constraint&gt;
	&lt;display-name&gt;authorizedUsers&lt;/display-name&gt;
	&lt;web-resource-collection&gt;
		&lt;web-resource-name&gt;ALL URLs&lt;/web-resource-name&gt;
		&lt;url-pattern&gt;/*&lt;/url-pattern&gt;
	&lt;/web-resource-collection&gt;
	&lt;auth-constraint&gt;
		&lt;role-name&gt;ADMIN&lt;/role-name&gt;
	&lt;/auth-constraint&gt;
	&lt;!--user-data-constraint&gt;
		&lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;
	&lt;/user-data-constraint--&gt;
&lt;/security-constraint&gt;<br><br>&lt;security-constraint&gt;
	&lt;display-name&gt;publicAccess&lt;/display-name&gt;
	&lt;web-resource-collection&gt;
		&lt;web-resource-name&gt;Public pages&lt;/web-resource-name&gt;
		&lt;url-pattern&gt;/public/*&lt;/url-pattern&gt;
	&lt;/web-resource-collection&gt;
&lt;/security-constraint&gt;<br><br>&lt;login-config&gt;
	&lt;auth-method&gt;BASIC&lt;/auth-method&gt;
	&lt;realm-name&gt;Learning@IBM Mini Person Feed Management&lt;/realm-name&gt;
&lt;/login-config&gt;<br><br>&lt;security-role&gt;
	&lt;description&gt;administrator access&lt;/description&gt;
	&lt;role-name&gt;ADMIN&lt;/role-name&gt;
&lt;/security-role&gt;
...
</code></pre><br><br>Beware that Jetty doesn't support HTTPS out of the box and thus if you will add the data constraint CONFIDENTIAL to any resource, you will automatically get HTTP 403 FORBIDDEN no matter what you do.Â  That's why I've commented it out above. It is possible to <a href="https://docs.codehaus.org/display/JETTY/How+to+configure+SSL">enable SSL in Jetty</a> but I didn't want to bother with certificate generation etc.<br><br>Next we need to tell Jetty how to authenticate users. This is done via <a href="https://docs.codehaus.org/display/JETTY/Realms">realms</a> and we will use the simplest, file-based one. Again there are multiple ways to configure it, for example in the <strong>pom.xml</strong>:<br><br><pre><code>
&lt;plugin&gt;
  &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
  &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
  &lt;version&gt;6.1.0&lt;/version&gt;<br><br>  &lt;configuration&gt;
	&lt;scanIntervalSeconds&gt;3&lt;/scanIntervalSeconds&gt;
	  &lt;userRealms&gt;
		&lt;userRealm implementation=&quot;org.mortbay.jetty.security.HashUserRealm&quot;&gt;
		  &lt;name&gt;Learning@IBM Mini Person Feed Management&lt;/name&gt;
		  &lt;config&gt;src/test/resources/jetty-users.properties&lt;/config&gt;
		&lt;/userRealm&gt;
	  &lt;/userRealms&gt;
  &lt;/configuration&gt;<br><br>  &lt;dependencies&gt;...&lt;/dependencies&gt;
&lt;/plugin&gt;
</code></pre><br><br>The name must match exactly the realm-name in web.xml. You then define the users and their passwords and roles in the declared file, in this case in src/test/resources/<strong>jetty-users.properties</strong>:<br><br><pre><code>
user=psw,ADMIN
</code></pre><br><br>The format of the file is username=password[,role1,role2,...].<br><br>When you download Jetty, you will find a fine example of using <a title="Jetty JAAS configuration" href="https://docs.codehaus.org/display/JETTY/JAAS">JAAS</a> with a file-based back-end for authentication and authorization under examples/test-jaas-webapp (invoke mvn jetty:run from the folder and go to http://localhost:8080/jetty-test-jaas/). However it seems that JAAS causes an additional overhead visible as a few-seconds delay when starting the server so it might be preferrable not to use it.
<h1>Conclusion</h1>
With Jetty it's easy to enable security and create a data source, which are the basic requirements of most web applications. Anybody can then very easily run the application to test and develop it. Development is where Jetty really shines provided that you don't need any feature it doesn't have.<br><br>When troubleshooting, you may want to tell Jetty to <a href="https://docs.codehaus.org/display/JETTY/Debugging">log at the debug level</a> with mvn -DDEBUG .. or to <a href="https://docs.codehaus.org/display/JETTY/Logging+Requests">log requests</a>, which can be also configured in the jetty-env.xml.<br><br>Beware that this post describes configuration for Jetty 6.1.0. It can be different in other versions and it certainly is different in Jetty 7.
++++
