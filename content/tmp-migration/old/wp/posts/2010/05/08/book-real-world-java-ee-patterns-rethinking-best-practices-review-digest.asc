{:title
 "Book: Real World Java EE Patterns - Rethinking Best Practices (review & digest)",
 :date "2010-05-08",
 :layout :post,
 :tags ["book" "java"],
 :tags-orig ["book" "j2ee" "java" "javaEE" "patterns" "review"],
 :categories ["Languages"],
 :extra-css #{}
}

++++
I'd like to make you aware of the excellent book Real World Java EE Patterns - Rethinking Best Practices by <a id="xf-_" title="Adam Bien" href="https://adam-bien.com/inhalte/about/">Adam Bien</a> (<a id="zcnq" title="blog" href="https://blog.adam-bien.com/">blog</a>), a Java Champion and renowned consultant, software architect and Java EE standardization comitee member. I'd absolutely recommend it to any architect or developer serious with Java EE 5 or 6 development, even to those not planning to use EJB 3.x (at least prior to reading the book :)). It's a must-read complement to the now a little outdated <a id="zbgs" title="Core J2EE patterns" href="https://www.corej2eepatterns.com/Patterns2ndEd/">Core J2EE patterns</a> as it updates the patterns for the new bright world of EJB 3/3.1 while discarding some of them and introducing some new, extremely useful patterns and techniques.<br><br>The book starts with an overview of the evolution of Java Enterprise Edition and the hard issues it solves for us, continues with the new and updated patterns and strategies and concludes with an introduction of two opposite architectures you can build with Java EE 5/6, namely lean SOA and domain-driven (which itself makes it worth reading).<br><br>What I really appreciate in addition to that valuable content is that for each pattern there is a section on testing and documentation and a really good evaluation of consequences in terms of maintainability, performance and other such qualities. You will find there also many code samples and beautiful applications of the Builder and Fluent API patterns.<br><br>The main message is that EJB 3.x is so lean and powerful that we must justify why NOT using it - and when using it, you should be very pragmatic and only introduce patterns, layers and principles if they bring real value.<br><br><!--more-->
<h1><strong>A summary of the patterns</strong></h1>
Because not only abstractions but also my memory is <a href="https://www.joelonsoftware.com/articles/LeakyAbstractions.html">leaky</a> :-), I've written down the key points as a reference and a reminder. It will be of a rather limited value to anybody else as it's closely bound to the structure and content of my mind, yet I hope it could give you a good idea of what is inside the book and why you should go and pick it up immediately :-).<br><br>A general rule: "An introduction of another layer of abstraction or encapsulation causes additional development and maintenace effort." [p137] Thus it must provide some real added value to be justifiable.<br><br>Notion: New or radically different patterns are marked with *<strong> </strong><br><br><strong> </strong>
<h2>BUSINESS TIER</h2>
<strong>Service Facade (Application Service?!)</strong>
<ul>
	<li>[JH: The old name should likely be Session Facade, not A. S.]</li>
	<li>The boundary class used by UI</li>
	<li>A transaction boundary too (SOA: starts a new tx)</li>
	<li>Coarse-grained API</li>
	<li>Usually @Stateless</li>
	<li>Either contains a simple business logic (i.e. is merged w/ a Service) or delegates to Services/DAOs (incl. EntityManager)</li>
</ul>
<strong>Service (Session Facade?!)</strong>
<ul>
	<li>[JH: The old name should likely be Application Service, not S.F.]</li>
	<li>Fine-grained, reusable logic in an EJB with local access only, product of decomposition</li>
	<li>Used by a Service Facade</li>
	<li>Usually @Stateless s Tx=Mandatory</li>
	<li>Uses EntityManager and/or specialized DAOs</li>
	<li>In SOA arch. w/ anemic objects the behavior is here contrary to the PDO below</li>
</ul>
<strong>Persistent Domain Object (Business Object)*</strong>
<ul>
	<li>Rich domain object, ie. having rich behavior/bus.logic and persistent (x anemic structure of SOA)</li>
	<li>Forces:
<ul>
	<li>Complex business logic</li>
	<li>Type-specific behavior necessary (profits from inehritance, polymorphism) - e.g. validation rules are domain object related and sophisticated</li>
	<li>DB may be adjusted for JPA needs</li>
</ul>
</li>
	<li>Solution: @Entity; getter/setters only when justified (x anemic structures, i.e. state is hidden), has methods modeling behavior and changing its state (creating other entities..); methods named fluently (domain-driven API)
<ul>
	<li>Only the cross-cutting/orchestration logic impl. in a Service</li>
	<li>Created/maintained by a Service, S.Facade or Gateway (CR(U)D methods)</li>
	<li>Requires the entity to stay attached =&gt; buz.+present. tier in the same JVM</li>
</ul>
</li>
</ul>
<strong>Gateway*</strong>
<ul>
	<li>Provides access to the root PDOs, exposes them to the present. tier (opposed to S.Facade, which hides the logic impl.)</li>
	<li>It's necessary to manage PDOs who're unaware of EntityManager and to hold client state (the PDOs) over conseq. executions</li>
	<li>The presentation tier must be in the same JVM</li>
	<li>Essential for the (rich) domain-driven architecture</li>
	<li>Forces:
<ul>
	<li>PDOs are already well encapsulated, additional encaps./layering unnecess.</li>
	<li>DB may be changed as needed</li>
	<li>changes of UI are likely to affect DB anyway</li>
	<li>An interactive app., w/ non-trivial validations depending on objects' state</li>
	<li>Users decide when their changes are persisted, when not</li>
</ul>
</li>
	<li>Note: Not much suitable for RIA UI for they're running on the client = remotely</li>
	<li>Solution: @Stateful w/ Extended persist. context and tx=NONE and a single save() method that only starts a tx. (via annot. tx=Req.New) and thus forces Ent.Man. to commit changes performed so far</li>
	<li>Consequences:
<ul>
	<li>Scalability: Doesn't scale as well as stateless but still absolutely sufficient for most apps; depends on cache size, length of sessions; need to find out via load tests</li>
	<li>Performance may be better as PDOs are loaded only once and accessed locally per ref.</li>
	<li>Need a well defined strategy for handling stale objects, i.e. the OptimisticLockException, test early</li>
	<li>Maint.: "In non-trivial, problem-solving applications, a Gateway can greatly improve the maintainability. It simplifies the architecture and makes the intermediary layers superfluous." [114] Unsuitable for SOA arch.w/ many externally exposed services.</li>
	<li>Productivity, ease of use much higher</li>
</ul>
</li>
</ul>
<strong>Fluid Logic</strong>
<ul>
	<li>Inclusion of scripting for algorithms/bus.logic that change often so that recompilation/redeployment aren't necessary - JSR-223 (Scripting for the Java Platform)</li>
	<li>Executed from a Service</li>
</ul>
<strong>Paginator and Fast Lane Reader</strong>
<ul>
	<li>A Service/S.F. allowing for efficient access to large amounts of mostly read-only data [subset]</li>
	<li>Former motivation: in EJB 2, a FLR accessed huge quantities of read-only data via JDBC directly for efficiency - JPA is efficient enough in this, providing a way to extract only some attributes and paginate over large results</li>
	<li>Valid motivation: "JPA is not able to stream objects, rather than load the entire page into memory at once. For some use cases such as exports, batches, or reports direct access to the database cursor would provide better performance." [123]</li>
	<li>Forces: iteration over large amount of data needed; it cannot be sent at once to the client and must be cached on the server; the client needs only some attributes of the entity; the access is mostly read-only</li>
	<li>Solution - not a single one but different strategies w/ +/-
<ul>
	<li>Paginator and Value List Handler Strategy: sess. bean implementing an Iterator of list of lists of domain objects (a list = a page); either Stateful holding internally the current position or Stateless; uses Query.setFirstResult + setMaxResults. May use Persist.Ctx.EXTENDED to be updatable.</li>
	<li>Live Cursor and F.L.R. Str(eaming?): to get as fast access as possible when conversion into objects isn't necessary, we may let inject DataSource via a @Resource directly into an EJB and use JDBC; will share Connection w/ any Ent.Mgr. in the same tx</li>
</ul>
</li>
	<li>Paginator in a domain-driven arch.: "A Paginator is also an optimization, which should only be introduced in case the iteration over a collection of attached PDOs causes performance or resource problems." [p269]</li>
</ul>
<strong>Retired Patterns</strong>
<ul>
	<li>Service Locator - replaced by DI</li>
	<li>Composite Entity - JPA entities completely different</li>
	<li>Value Object Assembler - VOs mostly not needed anymore as entities are POJOs; partly impl. by EntityManager</li>
	<li>Business Delegate - not needed thanks to DI injecting a Business interface's impl., which doesn't throw EJB-specific, checked exceptions anymore</li>
	<li>Domain Store -impl. by the EntityManager</li>
	<li>Value List Handler - implemented by EntityManager; it can also execute native SQL and convert them to entities or a list of primitives</li>
</ul>
<h2>Integration Tier</h2>
<strong>Data Access Object (DAO)</strong><br><br><strong> </strong>
<ul>
	<li>The J2EE 1.4 motivation for DAOs doesn't apply anymore:
<ul>
	<li>JPA EntityManager is a DAO</li>
	<li>Encapsulation of a DB is leaky anyway; you will only rarely change your DB vendor and never a RDBMS for another storage type</li>
</ul>
</li>
	<li>Thus DAOs are only needed for non-JPA resources and at those rare occassions, where they provide a real added value, such as consolidating often repeated persistence logic to support DRY - or if you application has some special requirements that really justify the effort.</li>
	<li>Solution: A stateless EJB with @Local interface and @TransactionAttrbute(MANDATORY), accessed by Services/S.Facades.</li>
	<li>Note: Heavy use of JPA QL would blur the business logic so it might be better to move the creation of queries into dedicated query builders or other utility classes.</li>
	<li>Strategies (may be combined together, of course):
<ul>
	<li>Generic DAO - the results of JPA queries aren't type-safe and a type-safe generic DAO (CrudService) for CRUD and named query search operations (such as &lt;T&gt; T create(T t)) could be more convenient.
<ul>
	<li>Suggestion: Use entity class constants for named query names to avoid typos [and help to track their usage].</li>
</ul>
</li>
	<li>Domain-specific DAO - DAO for a particular entity, which provides an added value aside of wrapping JPA, such as prefetching of dependant objects, managing common relations, results filtering based on the current user etc.</li>
	<li>Attached-result DAO - the default behavior - JPA entities stay attached for the duration of the transaction and any changes to them will be commited to the DB</li>
	<li>Detached-result DAO - if it isn't possible to stay attached, e.g. due to the data source's limitations. A common case in JEE is to return a subset of managed entity object graph mapped to transient DTOs for optimization purposes (select new BookLiteView(...) ..).</li>
	<li>Back-end Integration DAO - encapsulates a Java Connector Architecture, Common Client Interface or similar adapter for a legacy resource to shield the developer from their low-level APIs.</li>
	<li>Abstract DAO - reusable data access logic can be also inherited instead of delegated to a helper DAO. Purists could complain but "Inheriting from generic DAO functionality streamlines the code and is pragmatic." Especially suitable for DB-driven apps.</li>
</ul>
</li>
</ul>
<strong>Transfer Object (TO) and Data Transfer Object (DTO)</strong><br><br><strong> </strong>
<ul>
	<li>Again, the J2EE 1.4 motivation for (D)TOs doesn't apply anymore because detached Entities aren't active elements and are POJOs</li>
	<li>There may be few reasons where (D)TOs may be appropriate:
<ul>
	<li>To provide consumer-specific views to the persistence layer/send a subset of the data graph for performance reasons (see the Detached-result DAO above)</li>
	<li>To keep outside-facing services binary compatible, which may be necessary for long-lived SOA services that share the same domain model and need to be evolved independently. Adding/changing an entity field needed by a new service isn't possible if the entity is used also by older services/clients.
<ul>
	<li>At times it may be necessary to decouple SOA services by replacing hard references to other entities with DTOs that carry their ID and type and act as a proxy for fetching those entities via their own services. Of course this is laborious to code/maintain and less efficient due to multiple service calls so you need a sound reason to justify it.</li>
</ul>
</li>
	<li>Transfering data from non-JPA sources.</li>
	<li>To transfer also presentation tier-specific metadata for building UIs on the fly (e.g. @LAbel("Enter password"), @MinLength(4))</li>
	<li>To provide a simpler form for transfer over RESTFul/SOAP/CORBA/or even ASCII</li>
</ul>
</li>
	<li>Solution: A Serializable or Externalizable POJO. (Implementing Externalizable allows for providing faster to process and smaller serialized forms and may (should) be automated via code generation. But use with care - it adds lot of code that must be maintained and understood.)</li>
	<li>Strategies
<ul>
	<li>Builder-style TO - fluent API simplifies its constructions and makes it easier to read. Ex.: MyDTO d = new MyDTO.Builder().name("Duke").age(42).build(); (Builder is a nested static class)</li>
	<li>Builder-style Immutable TO - prescribe the setting of certain attributes - mark them final and only instantiate the DTO when build() is invoked.</li>
	<li>Client-specific TO - add metadata e.g. for dynamic UI construction and data validation [you likely don't want them in domain Entities] - annotations such as @Label("First Name") are added to the DTO's getters (getFirstName()) . Check JSR-303 Bean Validation.</li>
	<li>Generic DTO - dynamic (basically a map of attributes), using reflection - for generic UIs. Cons: not type-safe, several times more objects (attribute name, type representation, metadata ..); see Apache BeanUtils.</li>
</ul>
</li>
</ul>
<strong>Legacy POJO Integration</strong>
<ul>
	<li>If you need to integrate a legacy POJO into a JEE application and it needs to leverage the container services (e.g. security, lifecycle and concurrency management, DI) and participate in transactions, you can simply turn it into s Stateless session bean provided that it complies with the EJB 3 programming restrictions (has the default constructor and, prior to 3.1, an interface). Instead of adding annotations to its source code, which may be not accessible, you use ejb-jar.xml.</li>
	<li>The overhead introduced by turning it into an EJB is really low and comparable to other DI frameworks.</li>
</ul>
<strong>Generic JCA</strong>
<ul>
	<li>"It is not possible to access legacy resources such as files, native libraries, or starting new threads from EJBs without violating the programming restrictions." [p181] - see Chapter 21.1.2 of JSR 220</li>
	<li>Even if you do not care about violating those restrictions, you may care for making your application non-portable.</li>
	<li>Thus if you want to access a Java EE incompatible resource, perhaps transactionally, in a portable way, you need to use JCA (with the additional benefit of monitoring)</li>
	<li>The JEE restrictions do not apply to Servlets, MBeans and JCA connectors, of those only JCA can participate in transactions and within a security context.</li>
	<li>While complete JCA implementation is complex, a minimal one is "surprisingly simple" - it comprises of 2 interfcase, 4 classes, 1 XML file. Two of the classes are highly reusable, the remaining part is resource dependent.</li>
	<li>You don't even need to implement the Common Client Interface (CCI), which may be too abstract and complex, and provide your own one instead.</li>
	<li>Depending on your requiremements, you can choose which parts of JCA to implement [JH: perhaps e.g. javax.resource.spi.work when dealing with threads]</li>
	<li>Example: transactional file access:
<ul>
	<li>a <em>Connection</em> {write(String), close() } interface (JCA is connection-oriented) and Connection factory interface to be put into JNDI: <em>DataSource</em> extends Serializable, Referenceable { getConnection() }</li>
	<li>a (simple) logic in the class <em>FileConnection</em> impl. Connection and javax.resource.spi.<a href="https://java.sun.com/javaee/5/docs/api/javax/resource/spi/LocalTransaction.html">LocalTransaction</a>, delegating close() to the GenericManagedConnection (below) and using JCA's <a href="https://java.sun.com/javaee/5/docs/api/javax/resource/spi/ConnectionRequestInfo.html">ConnectionRequestInfo</a> for implementing hashCode and equals to distinguish this connection from others</li>
	<li>a simple <em>FileDataSource</em> class impl. DataSource providing a custom ConnectionRequestInfo implementation (e.g. with equals returning true and hashCode 1 to make all connections equal) and using JCA's ConnectionManager to create a connection, casting its output to FileConnection, using the C.M. and a ManagedConnectionFactory supplied via the constructor</li>
	<li>a generic <em>GenericManagedConnection</em> class impl. ManagedConnection and LocalTransaction (to invoke the F.C.'s corresponding methods), which will actually instantiate the FileConnection and manage its listeners, while also providing a custom impl. of ManagedConnectionMetaData to describe it and returning null for getXAResource. Notice that the app. server uses the event notification to manage the connection.</li>
	<li>a generic <em>GenericManagedConnectionFactory</em> class impl. ManagedConnectionFactory, Serializable and creating the FileDataSource as the conn. factory and GenericManagedConnection as the ManagedConnection. (matchManagedConnections selects a connection with matching ConnectionRequestInfo from a set of candidates or throws a ResourceException.)</li>
	<li>an <em>ra.xml</em> file (def. by the <a href="https://java.sun.com/j2ee/connector/download.html">specs</a>) containing all the interfaces and classes under resourceadapter/outbound-resourceadapter/connection-definition (managedconnectionfactory-class=GenericM.C.F., connectionfactory-interface=DataSource, connectionfactory-impl-class=FileD.S., connection-interface=Connection, connection-impl-class=FileC., transaction-support=LocalTransaction, authentication-mechanism/a.-m.-type=BasicPassword and /credential-interface=javax.resource.spi.security.PasswordCredential)</li>
	<li>Finally you pack it all into a .rar JAR, drop it to the server, and configure a connection pool and deploy the data source under some JNDI name, e.g. "jca/FileDS", to make it injectable via @Resource(name="jca/FileDS")</li>
	<li>Note: Apache Commons File Transactions contains XA-compliant file access and could be easily wrapped w/ this connector</li>
</ul>
</li>
	<li>"a partial implementation of a JCA adapter could be easier and faster than an attempt to build a comparable solution from scratch" [p195]</li>
</ul>
<strong>Asynchronous Resource Integrator (Service Activator)</strong>
<ul>
	<li>Invocation of a Service from a Message-Driven Bean (invoked by a messaging system via JMS), bound to a Topic (1/N:M) or Destination (1:1)</li>
	<li>Prior to EJB 3.1, Service Activator was a work-around to invoke a business method asynchronously by calling it via a MDB, now we've the much simpler @Asynchronous method/type annotation</li>
	<li>Since EJB 3.1, MDBs are only necessary for integration of front-end or back-end asynchronous clients/resources</li>
	<li>The MDB's task is to extract the "payload" (usually an Object, Text or BinaryMessage), convert it into meaningful parameters, forward it to a Service and handle errors and "poison messages" (wrong type/content leading to an exception and reprocessing of the message) correctly. It should contain no business logic.
<ul>
	<li>A container starts a transaction before onMessage and removes the message when it ends w/o a rollback</li>
</ul>
</li>
	<li>Note: Some messaging providers such as openMQ provide REST-ful interface (yet not standardized, but watch amqp.org) and can be thus invoked from a presentation or client (browser - ajax) tier</li>
	<li>"The importance of integration tests in an environment identical to production cannot be emphasized enough." [p201]</li>
	<li>MDB: "... proper error handling is hard and the debug process a real challenge"[p201]</li>
	<li>Strategies
<ul>
	<li>Front-end Integration - asynch. messages from the presentation or client tier, likely Ajax; the payload is usually XML/JSON</li>
	<li>Back-end Integration - usually a legacy system; usually can't influence the message</li>
</ul>
</li>
</ul>
<h2>Infrastructural Patterns and Utilities</h2>
Patterns that can be used at any layer or are not of architectural significance yet very useful.<br><br><strong>Service Starter</strong>
<ul>
	<li>Initialize an EJB upon server start (e.g. to load a cache)</li>
	<li>EJB 3.1: @Singleton with @Startup. May also @DependsOn another one.</li>
	<li>pre-EJB 3.1: a HttpServlet with init() method and load-on-startup 1</li>
</ul>
<strong>Singleton</strong>
<ul>
	<li>Standardized in EJB 3.1 with @Singleton (in the scope of a single JVM only)</li>
	<li>By default uses @Lock(LockType.WRITE) and thus can only be accessed by a single thread at a time; user READ for concurrent access</li>
	<li>Strategies (rather uses)
<ul>
	<li>Gatekeeper - limit access to a legacy resource (e.g. due to limited # of licenses or its limited scalability) - this could be done in a JCA adapter but that's a lot more work. It can also serialize access to a single-threaded resource with LockType.WRITE</li>
	<li>Caching Singleton - holds a cache of mostly read-only data, likely initialized at startup, and accessed concurrently thanks to LockType.READ</li>
</ul>
</li>
</ul>
<strong>Bean Locator</strong> - encapsulates JNDI if DI not available (e.g. Stateful EJB can't be injected into a servlet).Use a Fluent GlobalJNDIName Builder to simplify the error-prone process of global JNDI name construction.<br><br><strong>Thread Tracker</strong> - name a thread after the bean and business method it's currently executing for easier monitoring/troubleshooting (instead of e.g. "http-0.0.0.0-8180-1") via an interceptor (but beware that the interception is several times slower than a direct call)<br><br><strong>Dependency Injection Extender</strong>
<ul>
	<li>Integrate another DI fwrk's managed beans into an EJB via a custom Interceptor, which will invoke the DI framework to inject its beans into the EJB upon each call (e.g. via Guice's Injector.injectMember(invocationCtx.getTarget());)</li>
	<li>The interceptor must ensure proper bean's lifecycle w.r.t. its scope (request x session x ...)</li>
	<li>Strategies:
<ul>
	<li>Stateful Session Bean Injector - can use per-instance injectors and cache the injected components for the EJB's lifetime</li>
	<li>Stateless Session Bean Injector - either all the members must be injected before each call or it's necessary to use smart proxies able to react e.g. to transactions for non-idempotent components</li>
	<li>Transactional Integration - "the injected components already participate in a transaction started in the session bean"</li>
</ul>
</li>
	<li>Performance - interceptors and DI rely on reflection which is slower than direct calls, yet still much faster than an average DB access</li>
</ul>
<strong>Payload Extractor</strong> - factor out the (reusable) type checking and error handling for a MDB message into a reusable interceptor; poison messages moved by the interceptor to a "dead letter queue" via a stateless EJB using the JMS API<br><br><strong>Resource Binder</strong> - put a custom resource into JNDI using a @Singleton with @Startup and the JNDI API (Context.(re)bind()). Notice that your app. server's proprietary JNDI impl. may enforce some restrictions on the resource object (such as serializability).<br><br><strong>Context Holder</strong> - you want to pass some context data yet not to add it as a param to each method on the call tree (S.Facade &gt; Service &gt; DAO, indirectly PDO) =&gt; use the standard @Resource TransactionSynchronizationRegistry, with the actual context set perhaps by an interceptor. Notice that ThreadLocal may be problematic if a S.Facade invokes a Service and each is from a distinct thread pool = diff. thread.
<h2 id="PragmaticJavaEEArchitectures">Pragmatic Java EE Architectures</h2>
There are two opposite approaches, with best practices in one being anti-patterns in the other: the SOA architecture and he Domain-driven architecture. Which one is better depends in your requirements.
<h3>Lean Service-Oriented Architectures (<a href="https://www.javaworld.com/javaworld/jw-04-2009/jw-04-lean-soa-with-javaee6.html?page=1">online article</a>)</h3>
<ul>
	<li>JEE 5/6 can be used to build the leanest SOA impl. possible - (nearly) no XML, no external libraries, frameworks, only a JAR with a short persistence.xml, even more so in 3.1 where we can drop the @Local interfaces (though that makes testing more difficult)</li>
	<li>SOA implies coarse-grained, distributed, stateless, atomic, self-contained, independent services with a procedural nature
<ul>
	<li>Though in JEE, local access shall be always preferred when possible (performance)</li>
</ul>
</li>
	<li>Building blocks:
<ul>
	<li>Service Facade - @Stateless EJB with TransactionAttribute=REQUIRES_NEW - acts as a remoting and transaction boundary, hides implementation details while providing coarser-grained interface</li>
	<li>(optional) Services (with @Local and tx=MANDATORY) - implement the actual logic in a procedural way; in simple cases, the Facade may directly use a DAO to avoid a dumb Service w/o any added value</li>
	<li>(optional) DAOs (incl. EntityManager) - as needed</li>
	<li>Anemic persistent data structures - entities only hold data exposed via getters/setters, w/o any behavior
<ul>
	<li>"Although the anemic object model is considered to be an antipattern, it fits very well into an SOA. Most of the application is data-driven, with only a small amount of object-specific or type-dependent logic." [p260] Plus, for simple apps, they're easier to develop, can be generated, can be detached and sent to a client who won't get access to any business method (but beware the lazy-loading issue).</li>
</ul>
</li>
	<li>Transfer Objects - an essential pattern, a SOA service must stay binary compatible even if its domain objects change (e.g. a field added, needed by a new service) and thus can't expose directly JPA entities</li>
</ul>
</li>
	<li>The contract, represented by the Service Facade's @Remote interface and the TOs and visible to clients, is strictly separated from its realization</li>
	<li>Suitable e.g. if there are multiple different clients (i.e. not only a single web UI)</li>
	<li>Essential complexity of SOA
<ul>
	<li>"SOA aims for reuse, which causes more overhead and requires additional patterns. Service components are, on average, more complex than comparable domain components." [p264]</li>
	<li>The object graph sent to a client is detached (and serialized) =&gt; we must merge the changes when receiving it back, this is complex =&gt; added methods to update only parts of the obj.graph =&gt; code bloat [p101] - "The essential complexity of service-oriented applications is the synchronization of the PDO graph with the persistent store." [p266] Both writes (client updates a part of the object graph, which must be merged back) and reads (because of unavailability of lazy-loading) are difficult.</li>
	<li>Lazy loading of detached objects (in the present. tier) impossible =&gt; must know/request in advance what to load (=&gt; code bloat)</li>
</ul>
</li>
</ul>
<h3>Objects- or Domain-Driven Design (<a href="https://www.javaworld.com/javaworld/jw-05-2009/jw-05-domain-driven-design.html">online article</a>)</h3>
<ul>
	<li>As opposed to SOA, it relies mainly on well-defined encapsulated (persistent) objects with state <em>and behavior</em> and tends to be stateful.</li>
	<li>Building blocks:
<ul>
	<li>Entity - the (behavior-rich) Persistent Domain Object pattern. "A real domain-driven architecture should actually only be comprised of Entities with aspects." [p256]</li>
	<li>(optional) Control - a Service/DAO - implements cross-cutting aspects (Entity-independent, reusable logic and orchestration of multiple PDOs) - often for reusable queries, data warehouse jobs, reports etc.; used only exceptionally in DDD</li>
	<li>Boundary - a Gateway - the border between the UI and the business logic, exposes PDOs as directly as possible; usually stateful (to keep PDOs attached); "only necessary because of the Java EE 5/6 shortcomings ... In an ideal environment, a Gateway could also be implemented as an aspect, or even a static method on a PDO." [p266]</li>
	<li>(optional) TO - used for optimization purposes when there is a real need</li>
</ul>
</li>
	<li>Contrary to SOA, here is no separation between the specification and the realization (which is pragmatic, requires less effort)</li>
	<li>"The main advantage of the stateful domain-driven approach is the transparent synchronization and lazy loading of dependent entities." [p267] [JH: Also, with direct access to PDOs, it's much easier to implement and evolve the UI - see Seam. We could say this is (much) more productive and "agile" than SOA.]</li>
	<li>Essential complexity of DDD
<ul>
	<li>DDD requires a stateful Gateway holding a reference to an attached root PDO - "The statefulness itself isn't a scalability problem, rather than the amount of attached entities during the transaction." [p266] (every entity used will stay cached till the session ends)</li>
	<li>"... you will have to think about freeing the resources and detaching superfluous PDOs. This could become as complex as the synchronization of detached entities or loading of lazy relations in a service-oriented component." [p267]</li>
	<li>=&gt; perhaps necessary to tune the cache settings or use proxies (e.g. OIDs/References) instead of actual objects and load objects as needed.</li>
	<li>"Whether the aggressive caching behavior of your provider becomes a problem or not depends on many factors, including the number of concurrent sessions, the session length, and the number of accessed PDOs per session." [p267]</li>
</ul>
</li>
	<li>It's necessary to find a good compromise regarding the coupling of different (sub)domain PDOs (such as Address, Customer), i.e. between independence of components and ease of use. We must also deal with circular dependencies (think of bidirectional dependencies) between PDOs and thus components. Be pragmatic:
<ul>
	<li>"Few bidirectional dependencies between components are harmless." [p268] - especially considering the unnecessary laboriousness and complexity of possible workarounds</li>
	<li>You can use a proxy that resolves the object on demand using a service, as SOA does, but this is not very transparent; "it actually only obfuscates the dependency between two entities" [p268]</li>
	<li>The favourite solution is to refactor/restructure your components to get the related PDOs into one, though that breaks the "maximal cohesion" principle</li>
</ul>
</li>
</ul>
<h2>Notes on Terminology</h2>
<ul>
	<li>The term "anemic domain model" originates likely from Martin Fowler</li>
	<li>The term "Domain-Driven Design" has been made popular by Eric Evans via his book Domain-Driven Design: Tackling Complexity in the Heart of Software, published 2003</li>
</ul>
++++
