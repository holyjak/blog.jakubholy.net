{:title "Most interesting links of October",
 :date "2010-10-31",
 :layout :post,
 :tags ["testing" "clojure" "java" "JavaScript" "tool"],
 :tags-orig
 ["clojure"
  "gradle"
  "html"
  "java"
  "JavaScript"
  "JCP"
  "Maven"
  "Oracle"
  "tdd"],
 :categories
 ["General" "Languages" "Testing" "Tools" "Top links of month"],
 :extra-css #{}
}

++++
Few of my favourite themes this month - TDD, performance, build tools/Maven. Plus a usefel JS library, news from the Java community x Oracle world etc.
<ul>
	<li><a href="https://www.infoq.com/news/2010/10/can-oracle-save-java">About dying JCP and too silent Oracle</a> (or <a href="https://blogs.oracle.com/henrik/2010/10/doug_lea_leaves_the_jcp_ec.html">mostly silent</a>) - a summary of the latest issues and hot topics in the Java community that cause lot of rumor but still no reaction from Oracle including the criticism of JCP and its proclaimed decline. Update 11/1: The article about <a href="https://www.ibm.com/developerworks/java/library/j-openjdkroundup/index.html">IBM, Oracle and OpenJDK</a> has links to many related resources and a section on JCP future.</li>
	<li><a href="https://debuggable.com/posts/test-driven-development-at-transloadit:4cc892a7-b9fc-4d65-bb0c-1b27cbdd56cb">A fair evaluation of TDD</a> - Test driven development at Transloadit ("honest assessment of the beauty and pain of tdd" - <a href="https://twitter.com/KentBeck">Kent Beck</a>) - according to the author, TDD requires a lot of discipline and is a pain to do but it really pays off if your risks are high, basically it's something like an insurance - there are people living without it but to some it can save life. I miss there a thing I find essential about good test coverage - namely that it forces you to write a better code (more modular, following the single responsibility principle etc.).</li>
	<li><a href="https://www.dzone.com/links/r/dear_javascript_guru_please_stop_using_the_hash_s.html">Dear Javascript Guru: Please Stop Using The Hash Symbol For No-Op HREFs</a> - don't use href="#" for it modifies the browsing history and makes the browser scroll to the top. Prefer &lt;a href="javascript:void(0);" ... &gt; or just use the javascript: protocol for a function call that returns false (you can force it like this: &lt;a href="javascript:doSomething(); void(0);"&gt;).</li>
	<li><a href="https://community.jboss.org/wiki/Gradlewhy">Why Hibernate 4 switches to Gradle instead of Maven 3</a> - "a means to describe the issues and frustrations I have seen in my 2.5+  years of using Maven for Hibernate builds; in many cases the cause is  simply an assumption or concept in Maven itself which did not line up  cleanly with how I wanted to do build stuff in Hibernate." The main issues were that Hibernate is a very specific project, which doesn't line up very well with the Maven philosophy and, at the same time, Maven is very strict at forcing it and not really flexible to accommodate to unusual needs (and if Maven is, its plugin often aren't). For example Hibernate is composed of modules that depend on each other while Maven really supports only an aggregation of independent projects. Also, "the release plugin is completely worthless". On the other hand, Gradle is very flexible and - among others - offers powerful scripting, doesn't enforce its way of doing things at all cost (i.e. directory structure), let you also define dependencies on tasks, modules, directories, etc.</li>
	<li><a href="https://code.google.com/p/flot/">Flot - JavaScript plotting library for jQuery</a>, which <a href="https://en.blog.wordpress.com/2010/09/30/sexy-stats/">has replaced Flash at WordPress.com</a> (so it must be really good!) for blog statistics visualization. Main points: simple usage (all settings are optional), attractive looks and interactive features like zooming and mouse tracking. Really nice one! <a href="https://people.iola.dk/olau/flot/examples/">Check Flot examples</a>.</li>
	<li><a href="https://www.liferay.com/web/shuyang.zhou/blog/-/blogs/string-performance">String Concatenation Performance vs. String Builder/Buffer</a> and how <a href="https://www.liferay.com/web/shuyang.zhou/blog/-/blogs/embed-stringbundler-into-app-server">Liferay 6 achieved a speedup by not using S.B.</a> [that much] - StringBuilder/Buffer has lot of overhead and thus String.concat or custom code can be faster sometimes. Also see the linked ticket, esp. the comment 'most javac will try to translate "+" to StringBuilder whenever possible. So if you do need to use String.concate(), you'd better use it explicitly.'</li>
	<li><a href="https://www.paulgraham.com/avg.html">Paul Graham - Beating the Averages</a> - why it's good to learn Lisp. (Because it makes you able to see the limitations of you current language as it's most likely superior to it - among others thanks to <a href="https://en.wikipedia.org/wiki/Common_Lisp#Macros">Lisp macros</a>.) A really good essay on the power of programming languages, which has persuaded me about some year ago, when I've originally read it, to learn <a href="https://en.wikipedia.org/wiki/Clojure">Clojure</a> (a modern Lisp dialect running on the JVM).</li>
</ul>
++++
