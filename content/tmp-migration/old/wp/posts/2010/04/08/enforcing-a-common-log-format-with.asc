{:title "Enforcing a common log format with AspectJ",
 :date "2010-04-08",
 :layout :post,
 :tags ["java" "library"],
 :tags-orig ["AOP" "AspectJ" "java"],
 :categories ["Languages"],
 :extra-css #{}
}

++++
<h1>Enforcing a common log format with AspectJ</h1>
Andy Wilson has recently blogged about the <a href="https://thepracticaldeveloper.com/post/499686768/designing-log-files-that-solve-problems-in-production">need for uniformly formatted log</a> messages containing all the necessary information to make log parsing easier and mentioned an extensive refactoring he did on a project to achieve this. One of the readers mentioned that he could save the effort of manually modifying the log statements and use AOP to add the formatting automatically. Well, here is the solution.<br><br>Before we dive into the code, I should mention that I do not include a user name in the log, because it is not clear how to obtain it. If it was e.g. stored in a ThreadLocal variable, it would be easy to access it and include it in the log statement. Another thing is that if we could limit ourselves to Log4j instead of commons-logging, we could achieve the same with less effort using a custom formatter and perhaps Log4j's Nested Diagnostic Context.<br><br>The code is basically quite simple - we have one AspectJ aspect using the annotation-style, which intercepts calls to commons-logging's info(Object) and info(Object, Throwable) and re-formatts the message before handing it over to the actual logger.<br><br><pre><code>
package net.jakubholy.example.aoplog.aspect;<br><br>import org.apache.commons.logging.*;
import org.aspectj.lang.*;
import org.aspectj.lang.annotation.*;<br><br>@Aspect
public class LogFormattingAspect {<br><br>    private static final Log LOG = LogFactory.getLog(LogFormattingAspect.class);<br><br>    @Around(&quot;call(public void org.apache.commons.logging.Log.info(Object)) &amp;&amp; args(msg) &amp;&amp; !within(LogFormattingAspect)&quot;)
    public Object formatMessageLog(
            final Object msg
            , final ProceedingJoinPoint invocation
            , final JoinPoint.EnclosingStaticPart callerContext) throws Throwable {
        return formatLogAndProceed(msg, null, invocation, callerContext);
    }<br><br>    @Around(&quot;call(public void org.apache.commons.logging.Log.info(Object, Throwable)) &amp;&amp; args(msg, exception) &amp;&amp; !within(LogFormattingAspect)&quot;)
    public Object formatMessageLog(
            final Object msg
            , final Throwable exception
            , final ProceedingJoinPoint invocation
            , final JoinPoint.EnclosingStaticPart callerContext) throws Throwable {
        return formatLogAndProceed(msg, exception, invocation, callerContext);
    }<br><br>    private Object formatLogAndProceed(final Object msg, final Throwable exception
            , final ProceedingJoinPoint invocation
            , final JoinPoint.EnclosingStaticPart callerContext
            ) throws Throwable {<br><br>        final String callingMethod = callerContext.getSignature().getName();<br><br>        LOG.info(&quot;Log.info has been called from the method &quot; + callingMethod +
                &quot; with message=&quot; + msg + &quot;, exception=&quot; + exception);<br><br>        final Object[] arguments = invocation.getArgs();
        arguments[0] = formatMessage(callingMethod, msg);<br><br>        return invocation.proceed(arguments);
    }<br><br>    private String formatMessage(final String callingMethod,
            final Object originalMessage) {
        return &quot;APPMSG: &quot; + callingMethod + &quot;: &quot; + originalMessage;
    }
}
</code></pre><br><br>If you are new to AspectJ then you need to understand that
<ul>
	<li>the methods annotated with @Around are invoked whenever Log.info(..) is called</li>
	<li>AspectJ provides values for the interceptor method's arguments including runtime and static information about the intercepted call, as represented by the *JoinPoint* instances</li>
	<li>those methods extract some information about the actual call and its arguments from the invocation context provided by AspectJ</li>
	<li>finally, they invoke the original intercepted method by calling proceed()</li>
</ul>
The part <span style="font-family:courier new;">args(msg, exception)</span> may seem tricky - it binds the intercepted method arguments to those of the intercepting method (i.e. <span style="font-family:Courier New;">final Object msg, final Throwable exception</span>). This isn't necessary since we may access them viaÂ <span style="font-family:Courier New;">invocation.getArgs()</span> as we anyway do but it's more convenient.<br><br>To apply the aspect to you code you need to weave them into it. You can choose either <em><a id="zjpo" title="Load-Time Weaving" href="https://www.eclipse.org/aspectj/doc/released/devguide/ltw.html">Load-Time Weaving</a></em> (LTW), which uses Java 5's -javaagent option and instruments classes as they're loaded by the JVM based on configuration in an aop.xml file and which provides rather nice debugging output (when enabled), or <a id="vgn7" title="bytecode weaving" href="https://www.eclipse.org/aspectj/doc/released/devguide/bytecode-concepts.html">Bytecode Weaving</a> (also called build- or compile-time weaving), which injects the aspects into .class files using the command-line compiler/weaver <a id="pue9" title="ajc" href="https://www.eclipse.org/aspectj/doc/released/devguide/ajc-ref.html">ajc</a> or AspectJ's Ant tasks. During development I prefer LTW, which is more flexible, but for use in a production environment it's better to weave the bytecode because LTW consumes more memory (due to custom classloaders) and CPU.
<h2>Try it out</h2>
The easiest way to try this out is to use Maven 2:
<ol>
	<li>Download the source code archive <a id="ct8o" title="aop-log-formatter-0.0.1-sources.jar" href="https://oss.sonatype.org/content/repositories/jakubholy-snapshots/net/jakubholy/example/aop-log-formatter/0.0.1-SNAPSHOT/aop-log-formatter-0.0.1-20100408.181600-4-sources.jar">aop-log-formatter-0.0.1-sources.jar</a></li>
	<li>Unpack them somewhere</li>
	<li>In the directory with the sources (namely pom.xml), execute
<span style="font-family:courier new;">mvn -Pexecute-from-sources compile exec:exec</span></li>
	<li>This will download some maven/project dependencies (a lot, if you don't use maven often, sorry), compile the sources and execute the application while printing its log to the console</li>
</ol>
If you do not want to use maven:
<ol>
	<li style="text-align:left;">Download the source code archive <a id="atvh" title="aop-log-formatter-0.0.1-sources.jar" href="https://oss.sonatype.org/content/repositories/jakubholy-snapshots/net/jakubholy/example/aop-log-formatter/0.0.1-SNAPSHOT/aop-log-formatter-0.0.1-20100408.181600-4-sources.jar">aop-log-formatter-0.0.1-sources.jar</a></li>
	<li>Download also the compiled binaries <a id="vag8" title="aop-log-formatter-0.0.1.jar" href="https://oss.sonatype.org/content/repositories/jakubholy-snapshots/net/jakubholy/example/aop-log-formatter/0.0.1-SNAPSHOT/aop-log-formatter-0.0.1-20100408.181600-4.jar">aop-log-formatter-0.0.1.jar</a></li>
	<li>Download the dependencies, as recorded in the project's <a id="ki:u" title="pom.xml" href="https://oss.sonatype.org/content/repositories/jakubholy-snapshots/net/jakubholy/example/aop-log-formatter/0.0.1-SNAPSHOT/aop-log-formatter-0.0.1-20100408.181600-4.pom">pom.xml</a> (commons-logging, AspectJ weaver)</li>
	<li>Execute it with Load-Time Weaving (java 5 or higher required; it's assumed that all dependencies are in the same folder):
<pre>java -cp aop-log-formatter-0.0.1.jar:commons-logging-1.1.1.jar -javaagent:aspectjweaver-1.6.8.jar net.jakubholy.example.aoplog.ExampleLoggingClass</pre>
</li>
</ol>
The output will be long, because the aop.xml included in the jar enables the most detailed AspetJ logging but in the end you should see something like:
<pre>[INFO] [INFO] LogFormattingAspect - Log.info has been called from the method main with message=A message w/o an exception., exception=null
[INFO] [INFO] ExampleLoggingClass - APPMSG: main: A message w/o an exception.
[INFO] [INFO] LogFormattingAspect - Log.info has been called from the method main with message=Another message accompanied by an exception., exception=java.lang.RuntimeException: I'm the exception!
[INFO] [INFO] ExampleLoggingClass - APPMSG: main: Another message accompanied by an exception. java.lang.RuntimeException: I'm the exception!</pre>
You can see that the ExampleLoggingClass log message has been decorated with the prefix APPMSG and the method name (main).
++++
