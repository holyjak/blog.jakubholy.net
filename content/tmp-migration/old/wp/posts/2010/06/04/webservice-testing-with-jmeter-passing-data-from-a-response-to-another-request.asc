{:title
 "Webservice testing with JMeter: Passing data from a response to another request",
 :date "2010-06-04",
 :layout :post,
 :tags ["testing" "java" "api"],
 :tags-orig ["java" "jmeter" "Testing" "webservice"],
 :categories ["Languages" "Testing"],
 :extra-css #{}
}

++++
<a href="https://jakarta.apache.org/jmeter/">JMeter</a> is great for functional and performance testing of many things, including web services (and to my surprise also LDAP). It also provides means for extracting data from a response and passing them to a subsequent request, which is exactly what I needed. There is already a good <a href="https://www.testingminded.com/2009/01/tutorial-on-testing-webservices-with.html">tutorial on testing a WS with JMeter</a>, so I won't repeat the basic setup here. The steps are:
<ol>
	<li>Create a webservice (WS) test plan, as described in the tutorial (in my case it contains two WS calls)</li>
	<li>Add the User Defined Variables config element to the test plan and define there a variable for transferring the response data</li>
	<li>Add an XPath Extractor Post Processor to the first WS call to extract the value of interest into the user defined variable (beware namespaces!)</li>
	<li>Add a BeanShell Pre Processor to the second call, which will replace a placeholder in the WS call's XML data with the value of that variable</li>
</ol>
<h2><!--more--></h2>
<h2>About the webservice</h2>
I needed to test a web service, which requires its client to call first its authenticate method, which returns an authentication token called 'certificate', which is then used in subsequent requests.
<h2>A basic implementation</h2>
<h3>0. Setup</h3>
Download <a href="https://trixes.net/pub/jakarta/jmeter/binaries/jakarta-jmeter-2.3.4.zip">JMeter 2.3.4</a> and two dependencies, Java Mail API (<a href="https://java.sun.com/products/javamail/downloads/index.html">mail.jar</a>) and JavaBeans Activation Framework (<a href="https://java.sun.com/javase/technologies/desktop/javabeans/jaf/downloads/index.html">activation.jar</a>), necessary for the JMeter's webservice sampler. Put the JARs in JMeter's lib/ folder.
<h3>1. Create a webservice (WS) test plan, as described in the tutorial (in my case it contains two WS calls)</h3>
Well, <a href="https://www.testingminded.com/2009/01/tutorial-on-testing-webservices-with.html">follow the utorial</a> :-). Then duplicate the webservice call sampler, call the first one <em>WS: Authenticate with Saba</em> and the other one <em>WS: PF - Update employees</em>.
<h3>2. Add the User Defined Variables config element to the test plan and define there a variable for transferring the response data</h3>
We will need a variable to hold the data that we want to transfer from the 1st response to subsequent request. Therefore open the test plan, right-click on Thread Group &gt; Add &gt; Config Element &gt; User Defined Variables. Add thereÂ  a variable named <em>sabaCertificate</em>. You can leave its Value empty.
<h3>3. Add an XPath Extractor Post Processor to the first WS call to extract the value of interest into the user defined variable</h3>
Now we will extract the "certificate" data from the first response. The response may look like this (I used Eclipse' TCP Monitor to capture the SOAP communication):<br><br><pre><code>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;
 &lt;soapenv:Body&gt;
 	&lt;saba:certificate xmlns:saba=&quot;http://www.saba.com/xml/infoservices&quot;&gt;31323930326436636637635&lt;/saba:certificate&gt;
 &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;
</code></pre><br><br>To extract the value of the element &lt;saba:certificate&gt;:
<ol>
	<li>Right-click on the first WS call (<em>WS: Authenticate with Saba</em>) and Add &gt; Post Processors &gt; <a href="https://jakarta.apache.org/jmeter/usermanual/component_reference.html#XPath_Extractor">XPath Extractor</a></li>
	<li>For the Reference Name, type sabaCertificate (the user variable we've created earlier)</li>
	<li>For the XPath query, type <em>//*[local-name()='certificate']/text()</em>
<ul>
	<li>Problem with namespaces: Beware that JMeter 2.3.4 supports only namespaces declared on the root element and thus the XPath query <em>//saba:certificate</em> wouldn't work. The documentation for XPath Extractor's attribute "Use Namespace?" provides a workaround based on using the functions local-name() and namespace-uri() to match the local tag name and the URI associated with its namespace, which I've partly used.</li>
	<li>You can test your XPath for example in the <a href="https://www.mizar.dk/XPath/Default.aspx">Allans Online XPath Tester</a></li>
</ul>
</li>
</ol>
<h3>4. Add a BeanShell Pre Processor to the second call, which will replace a placeholder in the WS call's XML data with the value of that variable</h3>
Now we need to get the "certificate" into the subsequent web service request. I have put the placeholder "#sabaCertificate#" into the SOPA request, at the place where the actual authentication token shall be. Now we will arrange for its replacement with the actual value:
<ol>
	<li>Right-click on the second WS call (<em>WS: PF - Update employees</em>) and Add &gt; Pre Processors &gt; <a href="https://jakarta.apache.org/jmeter/usermanual/component_reference.html#BeanShell_PreProcessor">BeanShell PreProcessor</a> (<a href="https://www.beanshell.org/">BeanShell</a> is a scripting language with Java syntax and is included in JMeter)</li>
	<li>Type in the following script (notice that <em>sampler</em> is a variable provided by JMeter and refers to the parent WS call; check JavaDoc for details on the <a href="https://jakarta.apache.org/jmeter/api/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.html">WebServiceSampler</a>):</li>
</ol>
<h4>Case 1: SOAP request specified directly in the attribute Soap/XML-RPC Data</h4>
<pre><code>
import org.apache.jmeter.protocol.http.sampler.WebServiceSampler;
WebServiceSampler wsSampler = (WebServiceSampler) sampler;
String requestWithCertif = wsSampler.getXmlData().replaceFirst(&quot;#sabaCertificate#&quot;, vars.get(&quot;sabaCertificate&quot;));
wsSampler.setXmlData(requestWithCertif);
</code></pre>
<h4>Case 2: The SOAP request is read from a file (attribute File with SOAP XML Data)</h4>
If the request data is read from a file then it's a bit more complex because we need to load its content.<br><br><pre><code>
import org.apache.jmeter.protocol.http.sampler.WebServiceSampler;
import java.io.*;<br><br>WebServiceSampler wsSampler = (WebServiceSampler) sampler;<br><br>BufferedReader xmlReader = new BufferedReader( new InputStreamReader(
	new FileInputStream(wsSampler.getXmlFile())
	, java.nio.charset.Charset.forName(&quot;UTF-8&quot;)
));<br><br>StringBuffer xmlData = new StringBuffer();<br><br>String line;
while( (line = xmlReader.readLine()) != null) { xmlData.append(line).append('\n'); }<br><br>String requestWithCertif = xmlData.toString().replaceFirst(&quot;#sabaCertificate#&quot;, vars.get(&quot;sabaCertificate&quot;));<br><br>wsSampler.setXmlData(requestWithCertif);
wsSampler.setXmlFile(&quot;&quot;) ; // a file would override the data<br><br>// print(&quot;XML set: &quot; + requestWithCertif); // print to the console JMeter was started from
</code></pre><br><br>Well, that's it!
<h2>Going advanced: Reading requests from several files</h2>
The approach descibed above makes it possible to send a request based on a single file. But what if we want to send a different data with each repetition of the test, e.g. to negate effects of caching? Well, there is a couple of ways to achieve that. I've chosen the most flexible one, though absolutely not the easiest one to implement.<br><br>The trick is:
<ol>
	<li>Create a <a href="https://jakarta.apache.org/jmeter/usermanual/component_reference.html#BeanShell_Sampler">BeanShell Sampler</a>. The sampler will list all files in a particular directory and store their paths into a numbered variables (G_updateEmployeesWsRequestFile_1 etc., must start with 1), which will be then used by a ForEach Controller.</li>
	<li>Put all the test elements from the basic test plan under a <a href="https://jakarta.apache.org/jmeter/usermanual/component_reference.html#ForEach_Controller">ForEach Controller</a> , which follows the BeanShell Sampler. Configure it to use the variables generated by the BeanShell Sampler and store the current file name in the variable G_updateEmployeesWsRequestFile.</li>
	<li>In the webservice request element, replace the content of the Filename field with a reference to that variable: ${G_updateEmployeesWsRequestFile}</li>
</ol>
<h3>The BeanShell Sampler "<em>Generate WS request file names</em>"</h3>
<pre><code>
import java.io.*;<br><br>print(&quot;Generating files...&quot;);
log.info(&quot;BeanShell Sampler: Generating request file names...&quot;);<br><br>File requestsDir = new File(&quot;/tmp/wsRequests&quot;);
String[] requestFiles = requestsDir.list();<br><br>for(int i=0; i&lt;requestFiles.length; ++i) {
	String varName = &quot;G_updateEmployeesWsRequestFile_&quot; + (i+1);
	vars.put(
		varName
		, requestsDir.getAbsolutePath()  + File.separatorChar  + requestFiles[i]
	);
	// print(&quot;var created: &quot; + varName + &quot;=&quot; + vars.get(varName));
}<br><br>log.info(&quot;BeanShell Sampler: FINISHED generating request file names from dir &quot; +
	requestsDir + &quot;; files are: &quot; + java.util.Arrays.asList(requestFiles));<br><br>return &quot;soap input files generated&quot;;
</code></pre>
<h3>The ForEach Controller "<em>ForEach request file</em>"</h3>
The controller's configuration is simple:
<ul>
	<li>Input variable prefix: G_updateEmployeesWsRequestFile</li>
	<li>Output variable name: G_updateEmployeesWsRequestFile</li>
	<li>Add "_" before before number: [x] (checked)</li>
</ul>
<h3>Summary</h3>
We've parametrized the test by a set of files with SOAP requests that are read from a folder and supplied sequentially to the test thanks to the ForEach Controller.
<h2>Resources</h2>
<ul>
	<li>The <a href="https://blog.jakubholy.net/prilohy/04062010-jmeter-ws_testing.jmx">final Basic JMeter Test Plan</a></li>
	<li>The <a href="https://blog.jakubholy.net/prilohy/04062010-jmeter-multiRequestFiles.jmx">Advanced JMeter Test Plan</a> (SOAP requests read from files in a folder)</li>
</ul>
++++
