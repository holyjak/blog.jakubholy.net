{:title
 "Implementing build-time bytecode instrumentation with Javassist",
 :date "2010-06-24",
 :layout :post,
 :tags ["java" "library"],
 :tags-orig ["ant" "AOP" "java" "Javassist"],
 :categories ["Languages"],
 :extra-css #{}
}

++++
If you need to modify the code in class files at the (post-)build time without adding any third-party dependencies, for example to inject cross-cutting concerns such as logging, and you don't wan't to deal with the low-level byte code details, Javassist is the right tool for you. I've already blogged about "<a title="Permanent link to Injecting better logging into a  binary .class using Javassist" rel="bookmark" href="../2008/10/02/injecting-better-logging-into-a-bi/">Injecting better logging into a binary  .class using Javassist</a>" and today I shall elaborate on the instrumentation capabilities of Javassist and its integration into the build process using a custom Ant task.<br><br><!--more-->
<h2>Terminology</h2>
<ul>
	<li>Instrumentation - adding code to existing .class files</li>
	<li>Weaving - instrumentation of physical files, i.e. applying advices to class files</li>
	<li>Advice - the code that is "injected" to a class file; usually we distinguish a "before", "after", and 'around" advice based on how it applies to a method</li>
	<li>Pointcut - specifies where to apply an advice (e.g. a fully qualified class + method name or a pattern the AOP tool understands)</li>
	<li>Injection - the "logical" act of adding code to an existing class by an external tool</li>
	<li>AOP - <a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming">aspect oriented programming</a></li>
</ul>
<h2>Javassist versus AspectJ</h2>
Why should you use Javassit over a classical AOP tool like AspectJ? Well, normally you wouldn't because AspectJ is easier to use, less error-prone, and much more powerful. But there are cases when you cannot use it, for example you need to modify bytecode but cannot afford to add any external dependencies. Consider the following when deciding between them:<br><br>Javassist:
<ul>
	<li>Only basic (but often sufficient) instrumentation capabilities</li>
	<li>Build-time only - modifies .class files</li>
	<li>The modified code has no additional dependencies (except those you add), i.e. you don't need the javassist.jar at the run-time</li>
	<li>Easy to use but not as easy as AspectJ; the code to be injected is handled over as a string, which is compiled to bytecode by Javassist</li>
</ul>
AspectJ:
<ul>
	<li>Very powerful</li>
	<li>Both build-time and load-time (when class gets loaded by the JVM) weaving (instrumentation) supported</li>
	<li>The modified code depends on the AspectJ runtime library (advices extend its base class, special objects used to provide access to the runtime information such as method parameters)</li>
	<li>It's use is no different from normal Java programming, especially if you use the annotation-based syntax (@Pointcut, @Around etc.). Advices are compiled before use and thus checked by the compiler</li>
</ul>
Classical bytecode manipulation library:
<ul>
	<li>Too low-level, you need to define and add bytecode instructions, while Javassist permits you to add pieces of Java code</li>
</ul>
<h2>Instrumenting with Javassist</h2>
About some of the basic changes you can do with Javassist. This by no means an exhaustive list.
<h3>Declaring a local variable for passing data from a before to an after advice</h3>
If you need to pass some data from a before advice to an after advice, you cannot create a new local variable in the code passed to Javassist (e.g. "int myVar = 5;"). Instead of that, you must declare it via CtMethod.addLocalVariable(String name, CtClass type) and then you can use is in the code, both in before and after advices of the method.<br><br>Example:<br><br><pre><code><br><br>final CtMethod method = ...;
method.addLocalVariable(&quot;startMs&quot;, CtClass.longType);
 method.insertBefore(&quot;startMs = System.currentTimeMillis();&quot;);
 method.insertAfter(&quot;{final long endMs = System.currentTimeMillis();&quot; +
&quot;System.out.println(\&quot;Executed in ms: \&quot; + (endMs-startMs));}&quot;);<br><br></code></pre>
<h3>Instrumenting a method execution</h3>
Adding a code at the very beginning or very end of a method:<br><br><pre><code>
// Advice my.example.TargetClass.myMethod(..) with a before and after advices
final ClassPool pool = ClassPool.getDefault();
final CtClass compiledClass = pool.get(&quot;my.example.TargetClass&quot;);
final CtMethod method = compiledClass.getDeclaredMethod(&quot;myMethod&quot;);<br><br> method.addLocalVariable(&quot;startMs&quot;, CtClass.longType);
 method.insertBefore(&quot;startMs = System.currentTimeMillis();&quot;);
 method.insertAfter(&quot;{final long endMs = System.currentTimeMillis();&quot; +
   &quot;System.out.println(\&quot;Executed in ms: \&quot; + (endMs-startMs));}&quot;);<br><br>compiledClass.writeFile(&quot;/tmp/modifiedClassesFolder&quot;);
// Enjoy the new /tmp/modifiedClassesFolder/my/example/TargetClass.class<br><br></code></pre><br><br>There is also <em>CtMethod.insertAfter(String code, boolean asFinally)</em> - JavaDoc: if asFinally "is true then the inserted bytecode is executed not only when the control normally returns but also when an exception is thrown. If this parameter is true, the inserted code cannot access local variables."<br><br>Notice that you always pass the code as either a single statement, as in "System.out.println(\"Hi from injected!\");" or as a <em>block</em> of statements, enclosed by "{" and "}".
<h3>Instrumenting a method call</h3>
Sometimes you cannot modify a method itself, for example because it's a system class. In that case you can instrument all calls to that method, that appear in your code. For that you need a custom ExprEditor subclass, which is a Visitor whose methods are called for individual statements (such as method calls, or instantiation with a new) in a method. You would then invoke it on all classes/methods that may call the method of interest.<br><br>In the following example, we add performance monitoring to all calls to javax.naming.NamingEnumeration.next():<br><br><pre><code>
final CtClass compiledClass = pool.get(&quot;my.example.TargetClass&quot;);
final CtMethod[] targetMethods = compiledClass.getDeclaredMethods();
for (int i = 0; i &lt; targetMethods.length; i++) {
  targetMethods[i].instrument(new ExprEditor() {
    public void edit(final MethodCall m) throws CannotCompileException {
      if (&quot;javax.naming.NamingEnumeration&quot;.equals(m.getClassName()) &amp;&amp; &quot;next&quot;.equals(m.getMethodName())) {
        m.replace(&quot;{long startMs = System.currentTimeMillis(); &quot; +
            &quot;$_ = $proceed($$); &quot; +
            &quot;long endMs = System.currentTimeMillis();&quot; +
            &quot;System.out.println(\&quot;Executed in ms: \&quot; + (endMs-startMs));}&quot;);
      }
    }
  });
}
</code></pre><br><br>The call to the method of interest is replaced with another code, which also performs the original call via the special statement "$_ = $proceed($$);".<br><br>Beware: What matters is the declared type on which the method is invoked, which can be an interface, as in this example, the actual implementation isn't important. This is opposite to the method execution instrumentation, where you always instrument a concrete type.<br><br>The problem with instrumenting calls is that you need to know all the classes that (may) include them and thus need to be processed. There is no official way of listing all classes [perhaps matching a pattern] that are visible to the JVM, though ther're are some <a href="https://www.nakov.com/blog/wp-content/uploads/2008/08/classscopejava.html">workarounds</a> (accessing the Sun's ClassLoader.classes private property). The best way is thus - aside of listing them manually - to add the folder or JAR with classes to Javassist ClassPool's internal classpath (see below) and then scan the folder/JAR for all .class files, converting their names into class names. Something like:<br><br><pre><code>
// Groovy code; the method instrumentCallsIn would perform the code above:
pool.appendClassPath(&quot;/path/to/a/folder&quot;);
new File(&quot;/path/to/a/folder&quot;).eachFileRecurse(FileType.FILES) {
 file -&gt; instrumentCallsIn( pool.get(file.getAbsolutePath().replace(&quot;\.class$&quot;,&quot;&quot;).replace('/','.')) );}
</code></pre>
<h3>Javassist and class-path configuration</h3>
You certainly wonder how does Javassist find the classes to modify. Javassist is actually extremely flexible in this regard. You obtain a class by calling<br><br><pre><code>
private final ClassPool pool = ClassPool.getDefault();
...
final CtClass targetClass = pool.get(&quot;target.class.ClassName&quot;);
</code></pre><br><br>The ClassPool can search a number of places, that are added to its internal class path via the simple call<br><br><pre><code>
/* ClassPath newCP = */ pool.appendClassPath(&quot;/path/to/a/folder/OR/jar/OR/(jarFolder/*)&quot;);
</code></pre><br><br>The supported class path sources are clear from the available implementations of  ClassPath: there is a ByteArrayClassPath, ClassClassPath, DirClassPath, JarClassPath, JarDirClassPath (used if the path ends with "/*"), LoaderClassPath, URLClassPath.<br><br>The important thing is that the class to be modified  or any class used in the code that you inject into it doesn't need to be on the JVM classpath, it only needs to be on the pool's class path.
<h2>Implementing mini-AOP with Javassist and Ant using a custom task</h2>
This part briefly describes how to instrument classes with Javassist via a custom Ant task, which can be easily integrated into a build process.<br><br>The corresponding part of the build.xml is:<br><br><pre><code>
&lt;target name=&quot;declareCustomTasks&quot; depends=&quot;compile&quot;&gt;
   &lt;mkdir dir=&quot;${antbuild.dir}&quot;/&gt;<br><br>   &lt;!-- Javac classpath contains javassist.jar, ant.jar --&gt;
   &lt;javac srcdir=&quot;${antsrc.dir}&quot; destdir=&quot;${antbuild.dir}&quot; encoding=&quot;${encoding}&quot; source=&quot;1.4&quot; classpathref=&quot;monitoringInjectorTask.classpath&quot; debug=&quot;true&quot; /&gt;<br><br> &lt;taskdef name=&quot;javassistinject&quot; classname=&quot;example.JavassistInjectTask&quot;
   classpathref=&quot;monitoringInjectorTask.classpath&quot; loaderref=&quot;javassistinject&quot;/&gt;
 &lt;typedef name=&quot;call&quot; classname=&quot;example.JavassistInjectTask$MethodDescriptor&quot;
   classpathref=&quot;monitoringInjectorTask.classpath&quot; loaderref=&quot;javassistinject&quot;/&gt;
 &lt;typedef name=&quot;execution&quot; classname=&quot;example.JavassistInjectTask$MethodDescriptor&quot;
   classpathref=&quot;monitoringInjectorTask.classpath&quot; loaderref=&quot;javassistinject&quot;/&gt;
 &lt;/target&gt;<br><br> &lt;target name=&quot;injectMonitoring&quot; depends=&quot;compile,declareCustomTasks&quot; description=&quot;Process the compiled classes and inject calls to the performance monitoring API to some of them (currently hardcoded in PerfmonAopInjector)&quot;&gt;<br><br>  &lt;javassistinject outputFolder=&quot;${classes.dir}&quot; logLevel=&quot;info&quot;&gt;
    &lt;fileset dir=&quot;${classes.dir}&quot; includes=&quot;**/*.class&quot;&gt;
    &lt;!-- method executions to inject with performance monitoring --&gt;
    &lt;execution name=&quot;someSlowMethod&quot; type=&quot;my.MyClass&quot; /&gt;
    &lt;!-- method calls to inject with performance monitoring --&gt;
    &lt;call name=&quot;search&quot; type=&quot;javax.naming.directory.InitialDirContext&quot; metric=&quot;ldap&quot; /&gt;
    &lt;call name=&quot;next&quot; type=&quot;javax.naming.NamingEnumeration&quot; metric=&quot;ldap&quot; /&gt;
    &lt;call name=&quot;hasMore&quot; type=&quot;javax.naming.NamingEnumeration&quot; metric=&quot;ldap&quot; /&gt;
  &lt;/javassistinject&gt;<br><br> &lt;/target&gt;
</code></pre><br><br>Noteworthy:
<ul>
	<li>I've implemented a simple custom Ant task with the class example.JavassistInjectTask, extending org.apache.tools.ant.Task (see the code below). It has setters for attributes and nested elements and uses the custom class PerfmonAopInjector (not shown) to perform the actual instrumentation via Javassist API. Attributes/nested elements:
<ul>
	<li>setLoglevel(EchoLevel level) - see the EchoTask</li>
	<li>setOutputFolder(File out)</li>
	<li>addConfiguredCall(MethodDescriptor call)</li>
	<li>addConfiguredExecution(MethodDescriptor exec)</li>
	<li>addFileset(FileSet fs) - use fs.getDirectoryScanner(super.getProject()).getIncludedFiles() to get the names of the files under the dir</li>
</ul>
</li>
	<li>MethodDescriptor is a POJO with a no-arg public constructor and setters for its attributes (name, type, metric), which is introduced to Ant via &lt;typedef&gt; and its instances are passed to the JavassistInjectTask by Ant using its addConfigured&lt;name&gt;, where the name equlas the element's name, i.e. the name specified in the typedef</li>
	<li>PerfmonAopInjector is another POJO that uses Javassist to inject execution time logging to method executions and calls as shown in the previous section, applying it to the classes/methods supplied by the JavassistInjectTask based on its &lt;call .. /&gt; and &lt;execution ... /&gt; configuration</li>
	<li>The fileset element is used both to tell Javassist in what directory it should look for classes and to find out the classes that may contain calls that should be instrumented (listing all the .class files and converting their names to class names)</li>
	<li>All the typedefs use the same ClassLoader instance so that the classes can see each other, this is ensured by <code>loaderref="javassistinject"</code> (its value is a custom identifier, same for all three)</li>
	<li>The monitoringInjectorTask.classpath contains javassist.jar, ant.jar, JavassistInjectTask, PerfmonAopInjector and their helper classes</li>
	<li>The classes.dir contains all the classes that may need to be instrumented and the classes used in the injected code, it's added to the Javassist's internal classpath via ClassPool.appendClassPath("/absolute/apth/to/the/classes.dir")</li>
</ul>
Notice that System.out|err.println called by any referenced class are automatically  intercepted by Ant and changed into Task.log(String msg, Project.MSG_INFO) and will be thus included in Ant's output (unless -quiet).<br><br><strong>JavassistInjectTask.java (click it to expand):</strong><br><br><pre><code>
package example;<br><br>import java.io.File;
import java.util.*;
import javassist.CannotCompileException;
import org.apache.tools.ant.*;
import org.apache.tools.ant.types.*;<br><br>/**
 * Invoke PerfmonAopInjector on a set of classes to instrument some
 * methods and calls to some methods.
 * &lt;p&gt;
 * The Javassist library must be on the classpath.
 */
public class JavassistInjectTask extends Task {<br><br>    /**
     * The destination of the stream. If &lt;code&gt;null&lt;/code&gt;, the system
     * console is used.
     */
    private File outputFolder = new File(&quot;instrumented&quot;);<br><br>    /**
     * Stores a collection of file sets and/or file lists, used to
     * select multiple files for concatenation.
     */
    private Vector inputFilesets = new Vector();<br><br>	private int logLevel = PerfmonAopInjector.LOG_INFO;<br><br>	private List interceptedExecutions = new LinkedList();
	private List interceptedCalls = new LinkedList();<br><br>    /**
     * Sets the destination file, or uses the console if not specified.
     * @param destinationFile the destination file
     */
    public void setOutputFolder(File destinationFile) {
        this.outputFolder = destinationFile;
    }<br><br>    /**
     * Set of files to concatenate.
     * @param set the set of files
     */
    public void addFileset(FileSet set) {
        inputFilesets.addElement(set);
    }<br><br>    public void execute() throws BuildException {
    	try {
    		tryExecute();
    	} catch (BuildException e) {
    		log(&quot;TASK FAILED: &quot; + e, Project.MSG_ERR);
    		e.printStackTrace();
    		throw e;
    	} catch (RuntimeException e) {
    		log(&quot;TASK FAILED: &quot; + e, Project.MSG_ERR);
    		e.printStackTrace();
    		throw e;
    	}
    }<br><br>    public void tryExecute() throws BuildException {<br><br>        log(&quot;STARTING TO INJECT MONITORING...&quot;, Project.MSG_WARN);<br><br>        verifyInputs();<br><br>        // Iterate thru the sources - paths, filesets and filelists
        final List inClassFileDirs = collectTargetClassFileDirs();<br><br>        log(&quot;Loaded class dirs: &quot; + inClassFileDirs, Project.MSG_INFO);<br><br>        final PerfmonAopInjector perfmonAopInjector = createPerfmonAopInjector();
        setInjectorClassPath(perfmonAopInjector, inClassFileDirs);<br><br>        injectMethodExecutionsMonitoring(perfmonAopInjector);<br><br>        injectMethodCallsMonitoring(perfmonAopInjector, inClassFileDirs);<br><br>        log(&quot;DONE. Classes and methods modified:\n&quot; + perfmonAopInjector.getAllLogMessages(), Project.MSG_INFO);
    }<br><br>	private PerfmonAopInjector createPerfmonAopInjector() {
		final PerfmonAopInjector perfmonAopInjector = new PerfmonAopInjector();
        perfmonAopInjector.setLogLevel(logLevel);
        perfmonAopInjector.setOutputFolder(this.outputFolder);
        log(&quot;createPerfmonAopInjector: method executions to instrument: &quot; + interceptedExecutions, Project.MSG_DEBUG);
        perfmonAopInjector.setInstrumentedMethodExecutions(toArray(interceptedExecutions));
        log(&quot;createPerfmonAopInjector: method calls to instrument: &quot; + interceptedCalls, Project.MSG_DEBUG);
        perfmonAopInjector.setInstrumentedMethodCalls(toArray(interceptedCalls));
		return perfmonAopInjector;
	}<br><br>	private MonitoredMethodDescriptor[] toArray(final List monitoredMethodDescriptors) {
		return (MonitoredMethodDescriptor[]) monitoredMethodDescriptors.toArray(
				new MonitoredMethodDescriptor[monitoredMethodDescriptors.size()]);
	}<br><br>	private void injectMethodCallsMonitoring(
			final PerfmonAopInjector perfmonAopInjector,
			final List inClassFileDirs) {
		log(&quot;Going to inject monitoring of method *calls*...&quot;, Project.MSG_INFO);<br><br>		for (Iterator iterator = inClassFileDirs.iterator(); iterator.hasNext();) {
        	final ClassFileDir classFileDir = (ClassFileDir) iterator.next();
        	injectCallMonitoringForClasses(perfmonAopInjector, classFileDir.getClassFiles() );
		}
	}<br><br>	private void injectMethodExecutionsMonitoring(
			final PerfmonAopInjector perfmonAopInjector) {<br><br>		log(&quot;Going to inject monitoring into method *executions*...&quot;, Project.MSG_INFO);<br><br>		try {
			perfmonAopInjector.monitorConfiguredMethodExecutions();
		} catch (Exception e) {
			String msg = e.toString();
			if (e instanceof CannotCompileException) {
				if (e.getMessage().indexOf(&quot;no such class&quot;) &gt;= 0) {
					msg = &quot;A class cannot be found. Make sure that not only the classes to be &quot; +
							&quot;instrumented but also the classes used in the injected code are &quot; +
							&quot;in the class file file set. Cause: &quot; + e;
				}
			}
			throw new BuildException(&quot;Injecting monitoring into methods failed: &quot; + msg, e);
		}
	}<br><br>    private void injectCallMonitoringForClasses(final PerfmonAopInjector perfmonAopInjector,
    		final List classFiles) {
    	for (Iterator iterator = classFiles.iterator(); iterator.hasNext();) {
			final File classFile = (File) iterator.next();
			injectCallsMonitoringForClass(perfmonAopInjector, classFile);
		}
	}<br><br>    private void setInjectorClassPath(final PerfmonAopInjector perfmonAopInjector,
    		final List classFileDirs) {<br><br>    	for (Iterator iterator = classFileDirs.iterator(); iterator.hasNext();) {
			final ClassFileDir clasDir = (ClassFileDir) iterator.next();
	    	perfmonAopInjector.addClassDir(clasDir.getBaseDir());
		}
	}<br><br>	private void injectCallsMonitoringForClass(final PerfmonAopInjector perfmonAopInjector, final File classFile) {
		log(&quot;Processing file &quot; + classFile.getName() + &quot;...&quot;, Project.MSG_DEBUG);
		final String targetClass = relativeFileToClass(classFile);
		try {
			perfmonAopInjector.monitorConfiguredMethodCallsIn(targetClass);
		} catch (Exception e) {
			throw new BuildException(&quot;Injecting method calls monitoring into the class &quot; +
					classFile + &quot; failed.&quot;, e);
		}
    }<br><br>	private String relativeFileToClass(final File classFile) {
		final String dotSeparatedName = classFile.getPath()
			.replace(File.separatorChar, '.')
//			.replace('$', '.')
			;
		log(&quot;relativeFileToClass: Converting file '&quot; + classFile + &quot;' to '&quot; + dotSeparatedName +
				&quot;'.substring&quot;, Project.MSG_DEBUG);
		return dotSeparatedName.substring(
				0, dotSeparatedName.indexOf(&quot;.class&quot;));
	}<br><br>	private List collectTargetClassFileDirs() {
    	final List allClassFileDirs = new Vector();
		for (Enumeration e = inputFilesets.elements(); e.hasMoreElements();) {
        	final FileSet fileSet = (FileSet) e.nextElement();
            final DirectoryScanner scanner =
                    fileSet.getDirectoryScanner(getProject());<br><br>            final File classesDir = fileSet.getDir(getProject());
			final List inClassFiles = checkAddFiles(
            		classesDir,
            		scanner.getIncludedFiles());<br><br>			allClassFileDirs.add(new ClassFileDir(classesDir, inClassFiles));
        }
		return allClassFileDirs;
	}<br><br>	private void verifyInputs() {
		if (inputFilesets.size() == 0) {
            throw new BuildException(
                &quot;At least one class folder must be provided&quot;);
        }
		if(outputFolder == null || !outputFolder.isDirectory()) {
			throw new BuildException(&quot;The attribute outputFolder must be set to an existing folder; is: &quot; + outputFolder);
		}
	}<br><br>    /**
     * Reset state to default.
     */
    public void reset() {
        outputFolder = null;
        inputFilesets.removeAllElements();
    }<br><br>    private List checkAddFiles(final File classDir, final String[] classesRelative) {
    	final List inClassFiles = new Vector();<br><br>        for (int i = 0; i &lt; classesRelative.length; ++i) {
            final File file = new File(classesRelative[i]);
            if (!file.getName().endsWith(&quot;.class&quot;)) {
            	log(&quot;checkAddFiles: Ignoring non-class file &quot; + file, Project.MSG_WARN);
            } else if (file.getName().matches(&quot;.*\\$[0-9]+.class&quot;)) {
            	log(&quot;checkAddFiles: Ignoring the anonymous inner class &quot; + file, Project.MSG_WARN);
            } else {
            	inClassFiles.add(file);
            }
        }
        return inClassFiles;
    }<br><br>    /**
     * Set the logging level. Level should be one of
     * &lt;ul&gt;
     *  &lt;li&gt;error&lt;/li&gt;
     *  &lt;li&gt;warning&lt;/li&gt;
     *  &lt;li&gt;info&lt;/li&gt;
     *  &lt;li&gt;debug&lt;/li&gt;
     * &lt;/ul&gt;
     * &lt;p&gt;The default is &amp;quot;info&amp;quot;.&lt;/p&gt;
     * @param echoLevel the logging level
     */
    public void setLoglevel(final LogLevel echoLevel) {
        String option = echoLevel.getValue();
        if (option.equals(&quot;error&quot;)) {
            logLevel = PerfmonAopInjector.LOG_WARN;
        } else if (option.equals(&quot;warning&quot;)) {
            logLevel = PerfmonAopInjector.LOG_WARN;
        } else if (option.equals(&quot;info&quot;)) {
            logLevel = PerfmonAopInjector.LOG_INFO;
        } else {
            // must be &quot;debug&quot;
        	logLevel = PerfmonAopInjector.LOG_DEBUG;
        }
    }<br><br>    public void addConfiguredExecution(final MethodDescriptor methodExecution) {
    	addCallOrExecution(interceptedExecutions, methodExecution);
    }<br><br>    public void addConfiguredCall(final MethodDescriptor methodCall) {
    	addCallOrExecution(interceptedCalls, methodCall);
    }<br><br>    private void addCallOrExecution(final List destination, final MethodDescriptor method) {
    	method.validate();
    	destination.add(new MonitoredMethodDescriptor(
    			method.getType(), method.getName(), method.getMetric()));
    }<br><br>    //@Override
    public void log(String msg, int msgLevel) {
    	int actualLogLevel = msgLevel;
    	// Increase debug to info to make sure it's logged if desired level is debug
    	if (msgLevel == Project.MSG_DEBUG &amp;&amp; this.logLevel == PerfmonAopInjector.LOG_DEBUG) {
    		actualLogLevel = Project.MSG_INFO;
    	}
    	super.log(msg, actualLogLevel);
    }<br><br>    /**
     * Represents folder containing .class files.
     */
    public static class ClassFileDir {
    	private List classFiles;
    	private File baseDir;<br><br>		public ClassFileDir(File baseDir, List classFiles) {
			this.baseDir = baseDir;
			this.classFiles = classFiles;
		}
		public List getClassFiles() {
			return classFiles;
		}
		public File getBaseDir() {
			return baseDir;
		}
		public String toString() {
			return &quot;[dir=&quot; + baseDir + &quot;,classes=&quot; + classFiles + &quot;]&quot;;
		}
    }<br><br>    /**
     * The enumerated values for the level attribute.
     */
    public static class LogLevel extends EnumeratedAttribute {
        /**
         * @see EnumeratedAttribute#getValues
         * @return the strings allowed for the level attribute
         */
        public String[] getValues() {
            return new String[] {&quot;error&quot;, &quot;warning&quot;, &quot;info&quot;, &quot;debug&quot;};
        }
    }<br><br>    public static class MethodDescriptor {
    	private String type;
    	private String name;
    	private String metric;
		public String getType() {
			return type;
		}
		public void setType(String type) {
			this.type = type;
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public String getMetric() {
			return metric;
		}
		public void setMetric(String metric) {
			this.metric = metric;
		}
    	public void validate() throws BuildException {
    		String error = &quot;&quot;;
    		if (name == null) {
    			error += &quot;The attribute name is required for a method.&quot;;
    		}
    		if (type == null) {
    			error += &quot; The attribute type is required for a method.&quot;;
    		}<br><br>    		if (error.length() &gt; 0) {
    			throw new BuildException(error);
    		}
    	}
    }<br><br>}<br><br></code></pre><br><br>PS: If using maven, you'll be happy to know that Javassist is in a Maven repository (well, at least it has a pom.xml, so I suppose so).
<h3>Ant custom task resources</h3>
<ol>
	<li>Ant manual: <a href="https://ant.apache.org/manual/develop.html">Writing Your Own Task</a> - incl. <a href="https://ant.apache.org/manual/develop.html#nested-elements">Supporting nested elements</a> (you only need create&lt;name&gt;, add&lt;name&gt;,  or addConfigured&lt;name&gt;)</li>
	<li>Rob Lybarger: <a href="https://www.developer.com/java/article.php/3630721/Introduction-to-Custom-Ant-Tasks.htm">Introduction  to Custom Ant Tasks</a> (2006) - the basics</li>
	<li>Rob Lybarger: <a href="https://www.developer.com/java/ent/article.php/10933_3636196_1/More-on-Custom-Ant-Tasks.htm">More on Custom Ant Tasks</a> (2006) - about nested elements</li>
	<li>Stefan Bodewig: <a href="https://www.oracle.com/technology/pub/articles/bodewig_taskwriters.html">Ant 1.6 for Task Writers</a> (2005)</li>
</ol>
++++
