{:title "Most interesting links of July",
 :date "2010-08-02",
 :layout :post,
 :tags ["java" "performance"],
 :tags-orig ["IO" "java" "jdbc" "patterns" "performance"],
 :categories ["Languages" "Top links of month"],
 :extra-css #{}
}

++++
This month about performance, the Java language and patterns, the development process, and a few interesting news.<br><br><!--more--><br><br>Performance
<ul>
	<li><a href="https://www.dzone.com/links/r/jdbc_performance_tuning_with_fetch_size.html">JDBC performance tuning with fetch size</a> - how a query processing was reduced from 45m to 35s by increasing the fetch size from 10 to 5000 (it returns 500k records and runs fast on the DB server but slow on the app. server)</li>
	<li><a href="https://cacm.acm.org/magazines/2010/7/95061-youre-doing-it-wrong/fulltext#F1">You're Doing it Wrong - Think you've mastered the art of server performance? Think again.</a> An (theoretically) efficient algorithm is not enough, algorithms must take into account the hardware and how it is used to be truly efficient - "What good is an O(log2(n)) algorithm if those operations cause page faults and slow disk operations? For most relevant datasets an O(n) or even an O(n^2) algorithm, which avoids page faults, will run circles around it."</li>
	<li><a href="https://www.dzone.com/links/r/java_io_faster_than_nio_old_is_new_again.html">Java IO Faster Than NIO â€“ Old is New Again!</a> - demystyfying NIO - surprisingly, contrary to the widespread belief, asynchronous IO is usually by 25% faster than blocking IO. By the author of a mail server handling large load. See also the comments (when NIO can be faster, the influence of kernel, JVM versions, ...)</li>
</ul>
Java &amp; patterns
<ul>
	<li><a href="https://www.dzone.com/links/r/java_quicktip_fluent_interfaces.html">Java QuickTip: Fluent Interfaces</a> - I like Fluent interfaces a lot, because, well, they're so fluent, meaning easy to read and nice to work with. This article is only a short example, a real-world API using the fluent concept is e.g. <a href="https://mockito.googlecode.com/svn/tags/latest/javadoc/org/mockito/Mockito.html#3">Mockito</a>.</li>
	<li><a href="https://jeremymanson.blogspot.com/2008/11/what-volatile-means-in-java.html">What Volatile Means in Java</a> - something we should all know but only few really do; applies since JVM 1.5</li>
	<li><a href="https://www.martinfowler.com/ap2/range.html">M. Fowler - the Range pattern</a> - a great example of object-oriented thinking and Clean Code(TM) where abstraction hides implementation details, provides a much more readable code and a base for a really powerful object (think pen/closed ranges, comparing ranges), plus, of course, you have all the operations within the object and not in your business code that uses the Range. BTW, <a href="https://groovy.codehaus.org/Collections#Collections-Ranges">Groovy has ranges</a> as an element of the languages itself</li>
</ul>
The development process
<ul>
	<li><a href="https://www.dzone.com/links/r/clean_code_and_clean_tdd_cheat_sheets.html">Clean Code and Clean TDD Cheat Sheets</a></li>
	<li><a href="https://www.infoq.com/presentations/responsive-design">Kent Beck: Responsive Design</a> - this 1h presentation is really worth the time spent watching it; actually even if you watch only the first 7 minutes, where Kent talks about how he extracted the design and implementation patterns, you will gain a lot. A responsive design is a design that evovles through the time, always just "at the right moment", by responding to the feedback from customers, other people, the system etc. Kent talks about all the elements that take part in the design process, such as values, principles, patterns, design evolution strategies. Do not miss it!</li>
	<li><a href="https://www.dzone.com/links/r/why_i_dont_like_pair_programming_and_why_i_left_p.html">Why I Don't Like Pair Programming (and Why I Left Pivotal)</a> - It's always good to read about the dark side of any practice. The comments are also very useful, there are even links to two (not very positive) pair programming studies.</li>
</ul>
Other stuff &amp; news
<ul>
	<li><a href="https://www.dzone.com/links/r/the_five_most_important_algorithms.html">The most important algorithms in CS and maths</a> as candidates for the 5 most important algorithms. In other words, a lot of algorithms that I either knew and completely forgot or never knew at all. Sometimes it feels that the 5 years at uni were a waste ;-)</li>
	<li><a href="https://www.dzone.com/links/r/google_wants_you_to_be_an_html5_ninja.html">Introducing the Google's new web portal "HTML5 Rocks,"</a> which aggregates information on HTML5 and the latest web technologies and standards.</li>
	<li><a href="https://www.dzone.com/links/r/openstack_one_giant_leap_for_cloud_computing.html">OpenStack: One Giant Leap for Cloud Computing</a> - a new open-source cloud infrastructure project contributed to by Rackspace and NASA, joined by Citrix, Dell, Intel, AMD &amp; others</li>
</ul>
++++
