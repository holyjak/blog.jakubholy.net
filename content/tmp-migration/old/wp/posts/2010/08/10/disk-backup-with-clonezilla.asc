{:title
 "An encrypted backup of a disk/partition to a Samba share with Clonezilla",
 :date "2010-08-10",
 :layout :post,
 :tags ["DevOps"],
 :tags-orig ["backup" "encryption" "linux"],
 :categories ["Tools"],
 :extra-css #{}
}

++++
You will learn how to customize <a href="https://clonezilla.org/">Clonezilla</a> Live (v. 1.2.5-24) for an easy backup of a partition (or a disk) to an encrypted file stored on a remote Samba server and how to test the backup by restoring it to a VMware virtual machine. We will few scripts to simplify the task, including a custom Clonezilla startup script to mount a TrueCrypt volume on a Samba share.<br><br><strong>Content</strong>: <a href="#What-is-Clonezilla">What is Clonezilla?</a> | <a href="#Customizing-Clonezilla">Preparing Clonezilla for a custom backup</a> | <a href="#Backup-and-restore">Backup</a> | <a href="#Encryption-of-the-backup">Encryption of the backup</a> | <a href="#Testing-the-backup">Restoration and testing of the backup</a> | <a href="#The-complete-backup-encrypt-test-cycle">The complete backup - encrypt - test cycle</a> | <a href="#Summary">Summary</a><br><br>PS: If you are scared by the length of this post then read only "The complete backup – encrypt – test cycle" :-)<br><br><strong>Update 2010-09-23</strong>: Added "The complete backup – encrypt – test cycle", little reorganization.
<h2 id="What-is-Clonezilla">What is Clonezilla?</h2>
Clonezilla is a live Linux distribution containing tools for performing backup and restoration of disks and partitions. It is basically a collection of various open-source tools such as partimage and gzip and custom scripts that "glue" them together to create a single backup tool driven by a wizard-like user interface. You install it to a CD or USB flash disk, boot from that medium, answer few questions and a backup or a restoration may start.<br><br><!--more-->The normal mode of operation of Clonezilla is:
<ol>
	<li>You boot from the Clonezilla live CD or USB (<a title="Screenshot: clonezilla-live-boot-menu" href="https://clonezilla.org/screenshot/?in_path=/00_Clonezilla#02_clonezilla-live-boot-menu-gra.png">screenshot</a>)</li>
	<li>(Network connection may be or may be not set up based on the kernel boot parameters.)</li>
	<li>The Clonezilla script specified in the kernel boot parameters (default: ocs-live-general) is executed; it does a few things:
<ol>
	<li>It asks what to do (<a title="Screenshot: Start Clonezilla or console?" href="https://clonezilla.org/screenshot/?op=show&amp;filepath=album//00_Clonezilla/06_clonezilla-live-start-ocs-or-shell.png">screenshot</a>): start Clonezilla (the wizard) or enter command line; choose to start Clonezilla</li>
	<li>Use an image file or a physical partition (<a href="https://clonezilla.org/screenshot/?op=show&amp;filepath=album//00_Clonezilla/07_clonezilla-live-image-or-onthefly.png">screenshot</a>) as the target/source of the backup/restore?</li>
	<li>Next you are asked where to store the backup (<a href="https://clonezilla.org/screenshot/?op=show&amp;filepath=album//00_Clonezilla/08_prep-ocsroot.png">screenshot</a>).  The target device must be mounted as /home/partimag/. You can select a  local disk (such as a portable external disk connected via USB) or  select to enter the command line to mount something (e.g. a remote Samba  folder) manually.</li>
	<li>You are asked about what to do (<a href="https://clonezilla.org/screenshot/?op=show&amp;filepath=album//00_Clonezilla/09_ocs-sr-x.png">screenshot</a>): backup a disk, backup selected partition(s), restore a disk, restore partition(s), etc.</li>
	<li>You can select either Beginner or Advanced mode; the latter let you choose the compression algorithm and modify other options.</li>
	<li>Next, when doing a backup, you must choose the disk or partition to back up.</li>
	<li>Finally you can choose what to do when the operation is finished, such as turning the computer off, rebooting or nothing.</li>
	<li>After few confirmations the backup starts. The Clonezilla command created based on your choices is shown and also stored to a temporary file - you may want to run it directly from the command line the next time without going through the wizard (though you will still need to mount the target device).</li>
</ol>
</li>
	<li>Before, during, or after the backup you can enter the command line to do anything you need.</li>
</ol>
To become root in the command line execute "sudo su -".
<h3>Selected features</h3>
<ul>
	<li>Backup the whole disk or only a selected partition(s)</li>
	<li>Compression of the backup</li>
	<li>Works on the raw disk level, i.e. below the filesystem level</li>
	<li>Only backs up the used blocks on the source disk/partition, unused space of the disk doesn't add to the backup size</li>
	<li>Incremental backup is not supported</li>
</ul>
<h3>Limitations</h3>
<ul>
	<li>Cannot restore to a disk smaller than the backed-up disk even if the data on the original disk are smaller than the target disk (Actually a limitation of partimag.)</li>
	<li>Doesn't support encryption - but that can be added externally, see below</li>
	<li>Cannot restore to a partition of a different number (sda1 x sda2) or on a different disk (sda1 x sdb1) - but we will learn how to work around that</li>
</ul>
<h2 id="Customizing-Clonezilla">Preparing Clonezilla for a custom backup</h2>
First of all, download the USB flash disk version of Clonezilla Live (easier to customize), i.e. the .zip version (mine was clonezilla-live-1.2.5-24-i686.zip, with clonezilla 2.3.something installed) and unpack it to a USB flash disk (USB stick).<br><br>For setup and testing it's comfortable to be able to run Clonezilla in a VMware. My blog <a href="/2010/06/10/booting-from-a-usb-stick-in-vmware-player/">Booting from a USB stick in VMware Player</a> explains how to run an operating system installed on a USB flash disk in VMware, which doesn't support that out of the box.<br><br>The customizations:
<ul>
	<li><strong>Adding custom files</strong>: Most files in the Clonezilla distribution are read-only and any changes to them are ignored. There is a single folder where changes are persistent: &lt;USB stick with Clonezilla&gt;/live/, which is accessible as /live/image/live/ from within Clonezilla Live when it's running.
<ul>
	<li>Add here the necessary files: truecrypt (see <em>Encryption of the backup</em> - <em>TrueCrypt</em> below), scripts jh-my-mounts, jh-ocs-live-general (shown below)</li>
</ul>
</li>
	<li><strong>Customizing Clonezilla boot menu</strong> in /syslinux/syslinux.cfg (shown below): We will add our own entries to the boot menu with customized kernel startup parameters to set our prefered  default values for some options not to be asked for them each time, to  tune the environment (switch numlock on etc.), and to tell Clonezilla  what script it should run instead of its default one. Points of interest:
<ul>
	<li>Common customized boot parameters:
<ul>
	<li><code>ocs_numlk=on</code> - enable Num Lock upon startup</li>
	<li><code>ocs_live_keymap="NONE" ocs_lang="en_US.UTF-8"</code> - provide values for these options so that Clonezilla doesn't ask for them</li>
	<li><code>vga=normal</code> - on one PC I had some problems with the graphics in Clonezilla (likely something between framebuffer and NVidia), this setting resolved that</li>
</ul>
</li>
	<li>The boot configuration "<em>JH Clonezilla for Samba (Safe graphic)</em>"
<ul>
	<li>Networking is enabled (the default), Clonezilla will try to connect using DHCP</li>
	<li><code>ocs_live_run="/live/image/live/jh-ocs-live-general"</code> -  this script will be run upon startup instead of the default ocs-live-general; the main change being that when you select Start Clonezilla then it will mount the preconfigured Samba share as /mnt/backupbytovka/ and the latest TrueCrypt volume on it (if any) as /home/partimag using the functions from jh-my_mounts.sh</li>
</ul>
</li>
	<li>The boot configuration "<em>JH Clonezilla offline (Safe graphic)</em>"
<ul>
	<li><code>ip=frommedia</code> - disables network</li>
</ul>
</li>
	<li>Important: don't forget to comment out MENU DEFAULT for the original Clonezilla entry by inserting # in front of it</li>
</ul>
</li>
</ul>
<h3>Custom(ized) files</h3>
<h4>Customized syslinux/syslinux.cfg:</h4>
<ul>
	<li>Only the added/modified part displayed</li>
	<li>We add two entries and comment out an existing entry's line "MENU DEFAULT" by prepending it with #</li>
</ul>
<pre><code><br><br>...
label Clonezilla live without framebuffer
 MENU DEFAULT
 MENU LABEL JH Clonezilla for Samba (Safe graphic)
 kernel /live/vmlinuz
 append initrd=/live/initrd.img boot=live ocs_numlk=on noswap nolocales edd=on noprompt ocs_live_run=&quot;/live/image/live/jh-ocs-live-general&quot; ocs_live_extra_param=&quot;&quot; ocs_live_keymap=&quot;NONE&quot; ocs_live_batch=&quot;no&quot; ocs_lang=&quot;en_US.UTF-8&quot; vga=normal nomodeset nosplash
 TEXT HELP
 Disable console frame buffer support
 ENDTEXT<br><br>label Clonezilla live without framebuffer
 MENU DEFAULT
 MENU LABEL JH Clonezilla offline (Safe graphic)
 kernel /live/vmlinuz
 append initrd=/live/initrd.img boot=live ip=frommedia   ocs_numlk=on noswap nolocales edd=on noprompt ocs_live_run=&quot;ocs-live-general&quot; ocs_live_extra_param=&quot;&quot; ocs_live_keymap=&quot;NONE&quot; ocs_live_batch=&quot;no&quot; ocs_lang=&quot;en_US.UTF-8&quot; vga=normal nomodeset nosplash
 TEXT HELP
 Disable console frame buffer support
 ENDTEXT<br><br># Since no network setting in the squashfs image, therefore if ip=frommedia, the network is disabled. That's what we want.
label Clonezilla live
 # MENU DEFAULT
 # MENU HIDE
...<br><br></code></pre>
<h4>Custom Clonezilla script live/jh-ocs-live-general:</h4>
This script is run by Clonezilla when it boots and displays a menu-driven wizard. The modified parts are marked with ### JHn BEGIN ... ### JHn END. The important changes are:
<ol>
	<li>A script with helper functions is sourced</li>
	<li>When Start Clonezilla is invoked, the hardwired Samba share is mounted</li>
	<li>Then the latest TrueCrypt volume on the Samba share is mounted to /home/partimag</li>
	<li>When Clonezilla finishes the TrueCrypt volume and Samba share will be unmounted.</li>
</ol>
<pre><code>
#!/bin/bash
# Author: Steven Shiau
# License: GPL
# Description: Program to start saving or restoring image in Clonezilla live.<br><br># Load DRBL setting and functions
DRBL_SCRIPT_PATH=&quot;${DRBL_SCRIPT_PATH:-/opt/drbl/}&quot;<br><br>. $DRBL_SCRIPT_PATH/sbin/drbl-conf-functions
. $DRBL_SCRIPT_PATH/conf/drbl-ocs.conf
. $DRBL_SCRIPT_PATH/sbin/ocs-functions<br><br># load the setting for clonezilla live.
[ -e /etc/ocs/ocs-live.conf ] &amp;&amp; . /etc/ocs/ocs-live.conf<br><br># Get the live media mount point.
get_live_media_mnt_point<br><br># prepare the clonezilla live environment.
ocs-live-env-prepare<br><br>### JH1 BEGIN - mount my mounts [displays after the start clonezilla/enter shell dialog]
. /live/image/live/jh-my_mounts.sh
echo &quot;&gt;&gt;&gt;JH: Mounting Samba...&quot;
# mount_remote_samba2backupbytovka
mount_remote_samba2backupbytovka
echo &quot;&gt;&gt;&gt;JH: Going to mount TrueCrypt, provide its password when asked...&quot;
mount_truecrypt
### JH1 END<br><br># Do not ask powerer/reboot/choose (-p) in ocs-sr,  just use &quot;-p true&quot;. Since it might be in bterm, and Debian live &quot;Press Enter&quot; message when poweroff/shutdown might be coverd by bterm and user will not have any idea what's happening after choose poweroff/reboot.
# ocs_lang and ocs_live_extra_param are loaded from /etc/ocs/ocs-live.conf
# &quot;-n&quot; was added since we will run show-general-ocs-live-prompt after command clonezilla
clonezilla -l $ocs_lang -p true -n $ocs_live_extra_param<br><br>### JH2 BEGIN - umount my mounts...
echo &quot;&gt;&gt;&gt;JH: Umounting Truecrypt and Samba drives...&quot;
umount_all
### JH2 END<br><br># Show prompt
show-general-ocs-live-prompt
</code></pre>
<h4>Helper mount script live/jh-my_mounts.sh:</h4>
Noteworthy: we use whiptail to show a dialog that asks the user for his/her TrueCrypt volume password.<br><br><pre><code>
#!/bin/bash<br><br>##
## MOUNT THE ENCRYPTED SAMBA FOLDER FOR STORING BACKUPS
##
## Run as root. You may want to add it to the boot parameters as:
## ocs_prerun=&quot;/live/image/live/mount_backupbytovka.sh&quot;<br><br># 1. Mount the hardwired Samba share to the given mount point [default: /mnt/backupbytovka]
mount_remote_samba2backupbytovka() {
	if [ ! -z &quot;$1&quot; ]; then mpoint=&quot;$1&quot;; else mpoint=/mnt/backupbytovka; fi
	if [ ! -e &quot;$mpoint&quot; ]; then sudo mkdir &quot;$mpoint&quot; || die &quot;Failed to create the mountpoint '$mpoint'&quot;; fi<br><br>	sudo mount -t cifs -o username=&quot;bob&quot;,password=&quot;secret&quot; &quot;//172.24.4.77/bob&quot; $mpoint || die &quot;samba mount failed for mount point '$mpoint'&quot;
}<br><br>mnt_samba() {
	mount_remote_samba2backupbytovka &quot;$@&quot;
}<br><br># 2. Mount TrueCrypt the most recent TC volume in /mnt/backupbytovka to the given mount point [default: /home/partimag]
mount_truecrypt() {
	# IN PARAMS
	if [ ! -z &quot;$1&quot; ]; then mpoint=&quot;$1&quot;; else mpoint=/home/partimag; fi
	if [ ! -e &quot;$mpoint&quot; ]; then die &quot;The mountpoint '$mpoint' doesn't exist!&quot;; fi
	if [ ! -z &quot;$2&quot; ]; then tcVolumeFolder=&quot;$2&quot;; else tcVolumeFolder=/mnt/backupbytovka; fi
	if [ ! -d &quot;$tcVolumeFolder&quot; ]; then die &quot;The folder '$tcVolumeFolder', expected to containt the TrueCrypt volume, doesn't exist!&quot;; fi<br><br>	tcVolume=$(ls -1 -t &quot;$tcVolumeFolder&quot;/*.tc | head -n1)
	if [ ! -f &quot;$tcVolume&quot; ]; then die &quot;The Truecrypt volume '$tcVolume' (I looked for *.tc in $tcVolumeFolder) doesn't exist.&quot;; fi<br><br>	echo &quot;&gt;&gt;&gt;JH: Going to mount Truecrypt, provide its password when asked...&quot;
	truecryptPsw=$(whiptail --passwordbox &quot;Truecrypt Password&quot; 10 30 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)
	# Mount a volume prompting for nothing (no password, keyfile, whether to protect a hidden part.):
	# (Notice that specifying the psw on the command line isn't secure as it can be seen e.g. in the output of ps)
	/live/image/live/truecrypt/truecrypt -t -k &quot;&quot; --protect-hidden=no --password=&quot;$truecryptPsw&quot; &quot;$tcVolume&quot; &quot;$mpoint&quot;
}
umount_truecrypt() {
	# Dismount all mounted TC volumes:
	/live/image/live/truecrypt/truecrypt -t -d
}<br><br>die() {
	echo &quot;FATAL FAILURE: $1&quot;
	exit 1
}<br><br># 3. END
umount_all() {
	umount_truecrypt  || echo &quot;WARN: Truecrypt umount failed (/home/partimag)&quot;
	sudo umount /mnt/backupbytovka  || echo &quot;WARN: Samba umount failed (/mnt/backupbytovka)&quot;
}
</code></pre>
<h3>About Clonezilla file system customization</h3>
As  mentioned, with the exception of the folder live/, the Clonezilla  filesystem is read-only. During boot it is extracted from  live/filesystem.squashfs. It is <a href="https://drbl.sourceforge.net/faq/fine-print.php?fullmode=1&amp;path=./2_System/81_add_prog_in_filesystem-squashfs.faq">possible to modify this Squash file system used by Clonezilla</a> but I found it rather cumbersome and difficult and therefore recommend  to avoid it. (You need to install some tools with the correct versions,  "unsquash" the filesystem, modify it, "squash" it again, and use the  outcome file to replace the original one.)
<h2 id="Backup-and-restore">Backup</h2>
Restart your PC, boot from the USB flash disk with Clonezilla Live and  start the Clonezilla program - or your customized script - to perform  the backup.<br><br>Notice that by default Clonezilla splits the backup files into 2GB pieces, which  is very useful because we will store them to a TrueCrypt volume with  the FAT file system, which can't handle larger files.
<h3>Back up to a TrueCrypt volume on a Samba share or to an external disk?</h3>
If your space is limited you may want to do the backup in one step by storing it directly into a (new or existing) TrueCrypt volume on a Samba share. However I prefer first to create an unencrypted backup on an external disk connected directly to the computer and only then create a TrueCrypt volume on the share and move the backup there. That way the several hours long backup can't be interrupted by a network/Samba/TrueCrypt failure and also I know exactly how large TC volume I need to create to hold the backup.<br><br>Therefore I use the boot configuration "JH Clonezilla offline (Safe graphic)" to back-up to a local external disk and the boot config. "JH Clonezilla for Samba (Safe graphic)" to either back-up to Samba or to restore the encrypted remote backup.
<h3>Compression - observations</h3>
Clonezilla offers several compression algorithms differing in speed and compression ratio in the advanced mode. I've tried three of them:
<ul>
	<li>gzip: ~ 350MB/min, compressed to ~ 70% (ex.: 108 to 77GB, done in ~ 3hrs)</li>
	<li>lzo: ~ 650MB/m, compressed to 86%</li>
	<li>lzma? ~ the slowest compression is indeed slower by one order (few tens of MB/m)</li>
</ul>
The speed is from my Intel Core 2 Duo (2 cores at 2.1GHz) with a 5400 disk and may be quite different based on the power of your CPU and perhaps also disk speed.
<h2 id="Encryption-of-the-backup">Encryption of the backup</h2>
Clonezilla doesn't support encryption of the backup but you can use an external solution such as an encrypted volume or filesystem. I've considered <a href="https://help.ubuntu.com/9.04/serverguide/C/ecryptfs.html">eCryptfs</a>, which I normally use under Linux, and TrueCrypt.<br><br>Personally I'd prefer eCryptfs because it encrypts each file  individually and you don't need to create a container of a fixed size  but it only works under Linux and is more difficult to install (you need to include a support in the kernel etc.) and when I tried it the backup to an eCryptfs folder failed with the error "NT_STATUS_ACCESS_DENIED -&gt; CIFS VFS send error in read = -13". I guess there is some issue between eCryptfs and Samba. Therefore I've chosen TrueCrypt, which worked well.
<h3>TrueCrypt</h3>
<a href="https://www.truecrypt.org/">Truecrypt</a> makes it possible to create an encrypted "container", i.e. an encrypted file that can contain a filesystem and be mounted as a physical volume.<br><br>Advantages of truecrypt: mature and stable, cross-platform, all that is needed is a single binary.<br><br>Disadvantages: The size of the container must be specified in advance and be large enough to hold all the content, manipulation with such a large file is difficult. Under Linux it has only a command-line interface.<br><br>Working with TrueCrypt:
<ul>
	<li>Download Truecrypt 6.3a, the console-only version</li>
	<li>Run the extracted file and select not to install but to extract  .tar.gz; unpack it and move the bin/truecrypt to  /live/truecrypt/truecrypt</li>
	<li>Create an encrypted container on the Samba share either using the wizard (truecrypt -c mycontainer.tc) or by specifying all options on the command line
<ul>
	<li>During the process, select the defaults (AES, RIPEMD-160, fs FAT), enter 320 random characters</li>
	<li>Specifying all the options on the command line (in bash use $[77*1024**3] to convert 77GB to bytes):
<pre><code> truecrypt-console-6.3a --volume-type=normal --size=[size in  bytes] --encryption=AES --hash=RIPEMD-160 --filesystem=FAT -k &quot;&quot; -c truecryptvol.empty.tc</code></pre></li>
	<li>Creating a container of the size 110GB will take a couple of hours  based on the network/HDD speed (4h with 6.8MB/s) - TC must create and  write random data all over the disk</li>
	<li>Note: According to one source, <a href="https://homes.esat.kuleuven.be/~bosselae/ripemd160.html#Speed">SHA-1 is  slightly faster than RIPEMD</a> (~ by 1/6 under ideal conditions</li>
	<li>Note: You can of course choose other than the default options but I prefered to stick with them so that I don't need to remember what options I've chosen</li>
</ul>
</li>
	<li>Mount the volume: <em>truecrypt truecryptvol.tc /home/partimag</em>
<ul>
	<li>You'll be asked first for the truecrypt container password ("Enter password for
truecryptvol.tc:") and then for your user or administrator password ("Enter your user password or administrator password:"), unless running as root, because it's required to use/mount the loop device or so something.</li>
</ul>
</li>
	<li>Unmount all truecrypt volumes: <em>truecrypt -d</em></li>
</ul>
Later on we will see a script that helps to simplify the creation of a new volume with a sufficient size to put a backup image into it.
<h4>TrueCrypt Linux command-line options</h4>
The official documentation only describes rather limited Windows command-line options. Execute  <em>truecrypt -h</em> to learn about the options available under Linux (or see TrueCrypt's Main/CommandLineInterface.cpp).
<h2 id="Testing-the-backup">Restoration and testing of the backup</h2>
<h3>How to restore to a different disk and/or partition</h3>
Normally you can only restore to the same disk or partition. To go around this limitation you need to modify the backup files:
<ol>
	<li>To restore to a <strong>different disk</strong>, use (from within Clonezilla) the command  <em>cnvt-ocs-dev</em> to rename the backup files (you could also do it manually but this is a supported way). Example: <pre><code>cnvt-ocs-dev 2010-06-15-16-img sda sdb</code></pre></li>
	<li>To restore to a <strong>different partition</strong> you must change the partition number(s) manually by renaming for instance sda1.* to sda2.*:
<pre><code>for BKP in $(ls sda1.*); do BKPNEW=$(echo $BKP | sed &quot;s/sda1/sda2/&quot;); mv $BKP $BKPNEW; done</code></pre></li>
</ol>
If you try to restore a partition image to a different partition,  such as the backup of sda2 to sda1 then you will get an error like:<br><br><pre><code>Failed to restore partition image file /home/partimag/2010-06-15-16-img/sda1/* to /dev/sda1! Maybe this image is corrupt!</code></pre><br><br>Resources: The discussion <a href="https://sourceforge.net/projects/clonezilla/forums/forum/663168/topic/3657440">Restore partition to new harddrive</a>, another <a href="https://sourceforge.net/projects/clonezilla/forums/forum/663168/topic/2121018">related forum question</a>, and a <a href="https://drbl.sourceforge.net/one4all/techrpt.php?c=cnvt-ocs-dev">description of the cnvt-ocs-dev</a> utility.
<h3 id="Manualrestoreofthebackup">Manual restore of the backup</h3>
There are several cases when you may prefer to have full control over the restoration process, for example if <a href="https://bugs.launchpad.net/ubuntu/+source/linux-source-2.6.20/+bug/88746">Clonezilla's kernel causes the source/target USB disk to get disconnected</a> before it finishes ("usb 1-1: reset high speed USB device using ehci_hcd and address 2"). The process is well described in the Clonezilla FAQ <a href="https://drbl.org/faq/fine-print.php?path=./2_System/68_manually_partclone_restore.faq#68_manually_partclone_restore.faq">How to restore backup manually into a mountable .img file</a> (if partclone was used for the backup; it's <a href="https://drbl.org/faq/fine-print.php?path=./2_System/43_read_ntfsimg_content.faq#43_read_ntfsimg_content.faq">similar for ntfsclone</a> and thate are also <a href="https://www.idealworldinc.com/partclone-utils/">partclone-utils</a> that can read the image directly though you'll likely need to uncompress it  anyway ) - you need to join all the parts (.aa, .ab etc.) via cat and pass them to  the proper un-archiver and either store the complete uncompressed image or pass it directly tto the cloning tool for restoration.
<h4>Decompression</h4>
You need to join the backup parts (.aa, .ab, up to perhaps, .zz) and uncompress them. You can recognize the compression algorithm from the backup part name, for example sda1.ext4-ptcl-img.lzo.aa was copressed wih lzo, or by running the command file on the first part: file sda1.ext4-ptcl-img.lzo.aa =&gt; "sda1.ext4-ptcl-img.lzo.aa: lzop compressed data - version 1.020, LZO1X-1, os: Unix".<br><br><pre><code>cat sda1.ext4-ptcl-img.lzo.* | lzop -d -vvv &gt; sda1.ext4-ptcl-img</code></pre><br><br>Few notes
<ul>
	<li>I had to rename *.aa to *.a1 - for some reason bash didn't list is as the first file.</li>
	<li>To me it took ~ 13h to decompress an lzo-compressed image of the  output  size 197GB on 2-core Intel Atom 230 (1.6GHz) PC while reading   from&amp;writting to an external 5400 RPM disk</li>
</ul>
<h4>Restoration</h4>
You can recognize the tool used to create the image from its name, for example the name contains "ptcl" then Partclone was used to create it.<br><br>To restore the uncompressed image with partclone:<br><br><pre><code>sudo partclone.restore --restore_row_file -C -s sda1.ext4-ptcl-img -o sda1.ext4-ptcl-restored2.img</code></pre>
<ul>
	<li>To me it took &gt; 14h to restore  my image of a device with the size 282GB (70GB of that free) on 2-core Intel Atom 230 (1.6GHz) PC while reading    from&amp;writting to an external 5400 RPM disk</li>
	<li>The flag<strong> --restore_row_file</strong>, available since Partclone 0.2.16, is essential if you want to mount the image and avoid the following:
<pre><code>
shell$ mount -t ext4 -o loop,nosuid,nodev /media/mydisk/sda1.ext4-ptcl-restored.img /mnt
mount: wrong fs type, bad option, bad superblock on /dev/loop0,
       missing codepage or helper program, or other error
...
shell$ dmesg | tail
EXT4-fs (loop0): bad geometry: block count 16544941 exceeds size of device (16257568 blocks)
</code></pre><br><br>Many thanks to senden9 (Stefano Probst?) <a href="https://forum.ubuntuusers.de/topic/daten-aus-einem-clonzilla-image-holen/#post-2742750">for finding this solution</a>!!!</li>
</ul>
<h4>Access</h4>
To access the content of the restored image:<br><br><pre><code>sudo mount -t ext4 -o loop,nosuid,nodev /media/mydisk/sda1.ext4-ptcl-restored.img /mnt</code></pre>
<h4>Booting from the restored image with VMWare</h4>
<strong>TBD</strong>
<h3>Testing by restoring to VMWare</h3>
To test the backup, we will restore it to a virtual harddisk of a VMware virtual machine. It will be simpler if the disk name (such as sda or sdb) and the partition numbers match those of the backup. If not, you will need to modify the backup to match the name and number(s) as described above.<br><br>0. Preparation
<ul>
	<li>Add a virtual disk to a new or an existing VMware machine; it must be at least as large as the backed-up partition. I think it is unnecessary to allocate all the space immediately because the main bottleneck of the restoration will be the network and not the dynamic expansion of the harddisk file. Also, it may take few hours to create.</li>
</ul>
I. Restore the backup
<ul>
	<li>Run the vmware machine with that disk, booting from the USB stick with Clonezilla Live (see <a href="/2010/06/10/booting-from-a-usb-stick-in-vmware-player/">how to boot from an USB in VMware</a>)
<ul>
	<li>In the Clonezilla boot menu, choose the option that starts networking (JH Clonezilla for Samba)</li>
</ul>
</li>
	<li>Mount the volume holding the backup as /home/partimag; for a TrueCrypt volume on a Samba share:
<ul>
	<li><strong>Start Clonezilla</strong>, select the <strong>device-image</strong> mode, on the screen "Mount Clonezilla image directory" select "<strong>enter_shell</strong>"</li>
	<li>Thanks to the customized Clonezilla script, the Samba share should be mounted as /mnt/backupbytovka when you select to Start Clonezilla. You can also do it manually: <pre><code>cd /live/image/live; . jh-my_mounts.sh; mnt_samba</code></pre></li>
	<li>Mount the most recent TrueCrypt volume on the share to /home/partimag:
<pre><code>cd /live/image/live; . jh-my_mounts.sh; mount_truecrypt</code></pre><br><br>(you will be asked for a TC password)</li>
	<li>Verify the backup: ls /home/partimag/ =&gt; should contain files like sda2.ext3-ptcl-img.gz.aa, .ab etc.</li>
	<li>Execute 'exit' twice to get back to the Clonezilla dialog</li>
</ul>
</li>
	<li>Use <strong>fdisk to create a partition</strong> on the new large virtual disk for the backup restoration (you may want to do this and make a copy of the disk for future tests)
<ul>
	<li>You may want to create some small partitions first so that the actual target partition has the same number as the backed-up partition to avoid the need to adjust the backup</li>
	<li>To find the right disk, as root: # lsscsi - look for lines like "[...] disk VMWare, VMware Virtual S 1.0 /dev/sda"; use fdisk -l  to find out the disk size, which should be enough to recognize the right one</li>
	<li>Execute e.g. fdisk /dev/sdb and then
<ul>
	<li>Execute the commands 'c', 'u' as suggested by fdisk</li>
	<li>Create a partition with 'n' (select p as primary, the part. nr. 1, size as desired, ...) ...</li>
	<li>Make the partition bootable with 'a'</li>
	<li>Finally store the configuration with 'w'</li>
</ul>
</li>
	<li>If the disk name differs from the backup source disk, modify the backup using cnvt-ocs-dev as described above</li>
</ul>
</li>
	<li>Use clonezilla to restore to the disk (Example duration - estim. time &gt; 6h with 290MB/min, i.e. &lt;5MB/s)</li>
</ul>
II. Verify the restored backup
<ul>
	<li>Restart VMware and when booting press Esc to display the Boot menu (you may want to <a href="https://www.howtogeek.com/howto/16876/how-to-increase-the-vmware-boot-screen-delay/">increase the boot screen delay</a> to have enough time for that). You should be able to select a boot disk here but I wasn't able to expand the Hard Drive section =&gt; select &lt;Enter Setup&gt;  and on the Boot tab move the Hard Drive with the restored backup to the first place, F10 to save and boot from it.</li>
</ul>
<h2 id="The-complete-backup-encrypt-test-cycle">The complete backup - encrypt - test cycle</h2>
To sum it up, this is how I proceed with my backups:
<h3>1. Backup to a localy mounted flash disk</h3>
<ol>
	<li>Boot Clonezilla in the mode "JH Clonezilla offline (Safe graphic)"</li>
	<li>Backup a partition (sda2) to a localy mounted flash disk:
<ol>
	<li>Run the Clonezilla user interface (UI) and instruct it to mount the flash disk as the image storage</li>
	<li>Either continue with the UI or quit it and run manually the command saved from the previous run, in my case (slightly improved):
<pre><code>/opt/drbl/sbin/ocs-sr -q2 -c -j2 -z1 -i 2000 -p true saveparts $(date &quot;+%Y-%m-%d-%H&quot;)-img sda2</code></pre></li>
</ol>
</li>
</ol>
<h3>2. Move the backup image to a new remote TrueCrypt volume</h3>
<ol>
	<li>Boot your computer normally and run a terminal (of course you could do it from Clonezilla Live too)</li>
	<li>Start bash inside bash for further operations (the functions call <em>exit</em> upon failure and would thus close the terminal window)</li>
	<li>Mount the remote Samba folder:
<pre><code>$ source &lt;Clonezilla USB&gt;/live/jh-my_mounts.sh; mnt_samba</code></pre></li>
	<li>Create a TrueCrypt volume on it (for me this takes couple of hours, such as 5-6h for 90GB):
<pre><code>$ &lt;Clonezilla USB&gt;live/truecrypt/tc-create-volume-on-samba.sh &lt;size in GB or path to the Clonezilla image folder&gt;</code></pre></li>
	<li>Mount the TC volume:
<pre><code>$ mkdir /tmp/tcmount; mount_truecrypt /tmp/tcmount</code></pre></li>
	<li>Move the backup image folder into the volume:
<pre><code>$ mv &lt;Clonezilla image folder&gt; /tmp/tcmount/</code></pre></li>
	<li>Umount TrueCrypt and Samba:
<pre><code>$ umount_all</code></pre></li>
</ol>
Note: The functions mnt_samba, mount_truecrypt, umount_all are defined in &lt;Clonezilla USB&gt;/live/jh-my_mounts.sh.<br><br>The script live/truecrypt/<strong>tc-create-volume-on-samba.sh</strong>:<br><br><pre><code>
#!/bin/bash
## Create a new TrueCrypt volume on an already mounted Samba share
## with size either given or determined from the size of a folder given<br><br>die() {
	echo &quot;FATAL FAILURE: $1&quot;
	exit 1
}<br><br>## CHECK INPUTS
if [ $# -ne 1 ]; then
	die &quot;Usage: $0 &lt;size in GB or a path to a Clonezilla image folder&gt;&quot;
fi<br><br>SIZE_PARAM=&quot;$1&quot;
if [ &quot;$(echo '$SIZE_PARAM' | grep &quot;^[ [:digit:] ]*$&quot;)&quot; ]
then
	SIZE_GB=$SIZE_PARAM
	echo &quot;Volume size source: size in GB specified directly&quot;
else
	if [ -d &quot;$SIZE_PARAM&quot; ]
	then
		SIZE_GB=$(du -s -B 1G &quot;$SIZE_PARAM&quot; | cut -f1)
		echo &quot;Volume size source: computed from the size of the given folder&quot;
	else die &quot;Parameter 1 must be either the desired volume size in GB (an integer) or a folder whose size will be used to determine the volume size; was: '$SIZE_PARAM'&quot;
	fi
fi<br><br>SIZE_BYTES=$[$SIZE_GB*1024**3]
echo &quot;Volume size will be $SIZE_GB GB = $SIZE_BYTES B; based on $SIZE_PARAM&quot;<br><br>## CHECK ENVIRONMENT
MPOINT=/mnt/backupbytovka
if [ ! &quot;$(mount | grep $MPOINT)&quot; ]; then die &quot;The place where to create the volume, '$MPOINT', isn't ready: either it doesn't exist or Samba isn't mounted there&quot;; fi<br><br>TODAY=$(date &quot;+%F&quot;)
VOLUME=&quot;$MPOINT/truecryptvol.$TODAY.tc&quot;
echo &quot;&gt;&gt;&gt; Going to create the TrueCrypt volume ${VOLUME}. You'll be asked for a password for the volume and few other question. The creation may take few hours.&quot;
$(dirname $0)/truecrypt --volume-type=normal --size=$SIZE_BYTES --encryption=AES --hash=RIPEMD-160 --filesystem=FAT -k &quot;&quot; -c &quot;$VOLUME&quot;
</code></pre>
<h3>3. Verify the backup</h3>
<ol>
	<li>Boot Clonezilla as "JH Clonezilla for Samba (Safe graphic)" in a vmware image with a new, empty disk of a sufficient size
<ul>
	<li>This calls the custom Clonezilla startup script, which will mount Samba and the latest TrueCrypt volume</li>
	<li>Alternatively you could mount them manually:
<pre><code>$ cd /live/image/live; . jh-my_mounts.sh; mnt_samba &amp;&amp; mount_truecrypt</code></pre></li>
</ul>
</li>
	<li>Partition the new, empty vmware disk via <em>fdisk</em> as described above</li>
	<li>If needed, modify the backuped partition to have the same name as the target one
<ul>
	<li>To change the disk from <em>sda</em> to <em>sdb</em>: cnvt-ocs-dev &lt;image folder name&gt; sda sdb</li>
	<li>To change the partition number, rename all the files within the image folder:
$ for BKP in $(ls sda1.*); do BKPNEW=$(echo $BKP | sed "s/sda1/sda2/"); mv $BKP $BKPNEW; done</li>
</ul>
</li>
	<li>Run restore, i.e. exit the command prompt(s), which will return you back to the Clonezilla user interface, and instruct it to restore the partition (or I might save the command for that and run it from the command line)</li>
</ol>
<h2 id="Summary">Summary</h2>
We have learned how to add files to Clonezilla Live and modify its boot parameters to execute a customized script, and in general how to simplify the backup/restoration process tailored to our environment - namely using an encrypted TrueCrypt volume on a remote Samba share. We've also learned how to test the backup with Clonezilla and VMware by restoring it to a virtual disk and booting it with VMware.
<h2>Related resources</h2>
Clonezilla FAQ
<ul>
	<li><a href="https://drbl.org/faq/fine-print.php?path=./2_System/68_manually_partclone_restore.faq#68_manually_partclone_restore.faq">How to restore backup manually into a mountable .img file</a> (if partclone was used for the backup; it's <a href="https://drbl.org/faq/fine-print.php?path=./2_System/43_read_ntfsimg_content.faq#43_read_ntfsimg_content.faq">similar for ntfsclone</a> and <a href="https://www.idealworldinc.com/partclone-utils/">partclone-utils</a> can read the image directly though you'll likely need to uncompress it anyway ) - join all the parts (.aa, .ab etc.) via cat and pass that to the proper un-archiver and the result to the cloning tool
<ul>
	<li>To me it took ~ 13h to decompress an lzo-compressed image of the output size 197GB on 2-core Intel Atom 230 (1.6GHz) PC while reading from&amp;writting to an external 5400 RPM disk</li>
	<li>If your image names contains "ptcl" then Partclone was used to create it</li>
</ul>
</li>
</ul>
Possible problems
<ul>
	<li>Source/target USB disk disconnects after some time with st. like "usb 1-1: reset high speed USB device using ehci_hcd and address 2"  - this is likely caused by a bug in the USB 2 driver ehci_hcd present in some old and also new  (incl. some 2.6.31) kernels. See this <a href="https://bugs.launchpad.net/ubuntu/+source/linux-source-2.6.20/+bug/88746">bug and comments</a>. The only solution I can see is to try different kernel.</li>
</ul>
++++
