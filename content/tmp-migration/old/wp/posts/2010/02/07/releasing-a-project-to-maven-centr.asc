{:title "Releasing a project to Maven Central repository via Sonatype",
 :date "2010-02-07",
 :layout :post,
 :tags ["DevOps" "tool"],
 :tags-orig ["deployment" "Maven" "open_source" "oss"],
 :categories ["Tools"],
 :extra-css #{}
}

++++
If you have an open-source project and want it published into the Maven Central repository - even if it itself isn't build with maven - to make it visible to all Maven users without any special effort (at least once you set everything up), read on.<br><br>This is excatly what I wanted to do with my <a href="https://sourceforge.net/apps/mediawiki/jeeutils/index.php?title=DbUnit_Test_Skeleton">dbunit-embeddedderby-parenttest</a>, an extension of DbUnit that extremly simplifies setup of unit tests that need a database by using an embedded Derby DB and providing suitable defaults and utility methods.<br><br>The essential step is to deploy your artifacts to the Sonatype's OSS hosting repository, which is free for open-source project, and which will take care of hourly automatic synchronization with Maven Central once you release your artifacts to Sonatype, satisfy some requirements and let them know about it. There is a good <a href="https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide">guide for setting up hosting with Sonatype</a> but there a few tricky parts and that's why I've written down this blog.<br><br>The procedure is as follows:
<ol>
	<li>Mavenize your project. You don't actually need to build it with Maven, you only need to provide a maven metadata file (pom.xml). You may want to check <a href="https://jeeutils.svn.sourceforge.net/svnroot/jeeutils/tags/dbunit-embeddedderby-parenttest-1.0.2/pom.xml">my project's pom.xml v1.0.2</a> (or the <a href="https://jeeutils.svn.sourceforge.net/svnroot/jeeutils/trunk/DbUnitTestSkeleton/pom.xml">latest</a>) for inspiration and to see how I've configured the other things mentioned here.</li>
	<li>Follow the steps described in the <a href="https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide">guide for setting up hosting with Sonatype</a>:
<ol>
	<li>Sign up on the Sonatype repository manager Nexus at <a href="https://oss.sonatype.org/">http://oss.sonatype.org/</a></li>
	<li>Sign up on the Sonatype ticketing system at <a href="https://issues.sonatype.org/browse/OSSRH">https://issues.sonatype.org/browse/OSSRH</a></li>
	<li>Create a new ticket asking the creation of a maven repository for your project, see my <a href="https://issues.sonatype.org/browse/OSSRH-141">OSSRH-141</a> as an example<a href="https://issues.sonatype.org/browse/OSSRH-141">
</a></li>
	<li>Make sure that your pom.xml satisfies all the requirements for publishing to the Maven Central Repo, listed in the guide (SCM url, site url, no &lt;repositories&gt; etc.)</li>
	<li>Wait for creation of the repositories, once finished, a comment will be added to the ticket, which should also result in send an email notification to you</li>
</ol>
</li>
	<li>Build and sign your artifacts (see below)</li>
	<li>Deploy your artifacts to the new repository at Sonatype (see below)</li>
	<li>(optional?) Promote the published artifacts from the staging to the release repository (only applicable if you do not deploy directly to the release repo - but it seems obligatory to use staging now.)</li>
	<li>When the artifacts are in the release repository, add a comment to the original ticket asking for them to be published to Maven Central. For the first time they need to do it manually but since that on it will be synchronized automatically every hour</li>
</ol>
<h2>Build and sign your artifacts</h2>
Build your project's artifacts as you are used to, for example with <span style="font-family:courier new, courier, monospace;">mvn package</span> if you're a Maven guy or with <span style="font-family:courier new, courier, monospace;">ant</span>.<br><br>Next you need to sign them with your private key because valid signatures are one of the requirements for publishing to Maven Central. This is already well described in the article <a href="//www.sonatype.com/people/2010/01/how-to-generate-pgp-signatures-with-maven/">How to Generate PGP Signatures with Maven</a> so I'll only summarize it and add few tips.
<ol>
	<li>Create a new GPG or PGP key if you haven't one already. You can use the command-line application gpg or a GUI tool such as seahorse (under Ubuntu: Applications &gt; Accessories &gt; Passwords and Encryption Keys).</li>
	<li>Publish the key to the required PGP server pgp.mit.edu: <span style="font-family:courier new, courier, monospace;">
gpg --keyserver pgp.mit.edu --send-key &lt;ID of your key; for me it was 66AE163A&gt;</span></li>
	<li>Sign your files using either gpg directly or the maven-gpg-plugin (also described in the article mentioned above) - see below.</li>
</ol>
<h3>Signing with maven-gpg-plugin and automatic deployment</h3>
Using the maven-gpg-plugin has the advantage that running<br><br><span style="font-family:courier new, courier, monospace;">mvn deploy -DperformRelease=true -Dgpg.passphrase=**** -Dgpg.keyname=&lt;your key ID&gt;</span><br><br>will automatically sign your artifacts and deploy them together with the signatures. On the other hand, as with any plugin, its configuration and use may have some issues. (Setting the property performRelease=true is necessary in my case because I have configured the plugin to be actived only if this is set.)<br><br>Tips
<ul>
	<li>If the key you want to use for signing isn't your defaul key then you need to tell Maven which key to use by storing its id in the property <em>gpg.keyname</em> either by passing -Dgpg.keyname=... on the command line or setting it in the pom.xml as you can is in the mine.</li>
</ul>
<h3 id="SignDeployManually">Signing and deploying signatures manually</h3>
You may instead decide to sign your artifacts manually using directly gpg (or whatever tool you have), for example like this:<br><br><span style="font-family:courier new, courier, monospace;">gpg -u &lt;your key ID&gt; --sign --detach-sign -a target/dbunit-embeddedderby-parenttest.jar</span><br><br>This command would create the signature file <span style="font-family:courier new, courier, monospace;">target/dbunit-embeddedderby-parenttest.jar.asc</span>.<br><br>Next you will need to deploy the signature to the repository along with the original artifact:<br><br><span style="font-family:courier new, courier, monospace;">mvn deploy:deploy-file -Durl=http://oss.sonatype.org/service/local/staging/deploy/maven2 -DrepositoryId=nexus-releases -Dfile=target/dbunit-embeddedderby-parenttest.jar.asc -DpomFile=pom.xml -Dpackaging=asc</span>
<ul>
	<li>The <em>url</em> will be the same for everybody who wants to publish artifacts via a staging repository and not directly to to the release one otherwise you need to provide the URL of the release repository created for you by Sonatype.</li>
	<li>The <em>repositoryId</em> must correspond to a &lt;server&gt; record in your &lt;user home&gt;/.m2/.settings.xml with the same id and your login name and password  for oss.sonatype.org, it tells maven what credentials to use to authenticate with the target repository</li>
	<li>Beware that the name of the uploaded file isn't the same as of the local file being uploaded but is constructed by Maven from the artifactId, version, and optionally packaging and classifier provided in the pom.xml or on the command line</li>
</ul>
And perhaps also deploy the artifact itself if not done otherwise:<br><br><span style="font-family:courier new, courier, monospace;">mvn deploy:deploy-file
-Durl=http://oss.sonatype.org/service/local/staging/deploy/maven2
-DrepositoryId=nexus-releases
-Dfile=target/dbunit-embeddedderby-parenttest.jar -DpomFile=pom.xml</span>
<h4>Examples of manual deployment</h4>
The following examples show you how to deploy files if different names to the Sonatype's staging repository. They all use a common pom.xml (you'll perhaps want change the groupId and artifactId) and you will need to change the -DrepositoryId to correspond to the server id you've assigned to your Sonatype repository credentials in your settings.xml (discussed below).<br><br>The common pom.xml:
<pre> &lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;
        &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
        &lt;groupId&gt;eu.ibacz.pokusy.jakubholy&lt;/groupId&gt;
        &lt;artifactId&gt;smazMe&lt;/artifactId&gt;
        &lt;name&gt;dummy pokusny projekt&lt;/name&gt;
        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;       
&lt;/project&gt;
$ mvn deploy:deploy-file -Durl=http://oss.sonatype.org/service/local/staging/deploy/maven2 -DrepositoryId=nexus-releases -Dfile=smazMe.jar -DpomFile=pom.xml -Dpackaging=jar</pre>
=&gt; Uploading: http://oss.sonatype.org/service/local/staging/deploy/maven2/eu/ibacz/pokusy/jakubholy/smazMe/1.0-SNAPSHOT/smazMe-1.0-20100210.143500-1.jar
<pre>$ mvn deploy:deploy-file-Durl=http://oss.sonatype.org/service/local/staging/deploy/maven2 -DrepositoryId=nexus-releases -Dfile=smazMe.jar.asc -DpomFile=pom.xml</pre>
=&gt; Uploading: http://oss.sonatype.org/service/local/staging/deploy/maven2/eu/ibacz/pokusy/jakubholy/smazMe/1.0-SNAPSHOT/smazMe-1.0-20100210.143508-2.jar.asc
<pre> $  mvn deploy:deploy-file -Durl=http://oss.sonatype.org/service/local/staging/deploy/maven2 -DrepositoryId=nexus-releases -Dfile=smazMe-all.zip -DpomFile=pom.xml -Dpackaging=zip -Dclassifier=all</pre>
=&gt; Uploading:
http://oss.sonatype.org/service/local/staging/deploy/maven2/eu/ibacz/pokusy/jakubholy/smazMe/1.0-SNAPSHOT/smazMe-1.0-20100210.143513-3-all.zip
<pre>$  mvn deploy:deploy-file -Durl=http://oss.sonatype.org/service/local/staging/deploy/maven2 -DrepositoryId=nexus-releases -Dfile=smazMe-all.zip.asc -DpomFile=pom.xml -Dpackaging=zip.asc -Dclassifier=all</pre>
=&gt; Uploading:
http://oss.sonatype.org/service/local/staging/deploy/maven2/eu/ibacz/pokusy/jakubholy/smazMe/1.0-SNAPSHOT/smazMe-1.0-20100210.143524-4-all.zip.asc<br><br>Note: You may also supply the option -DuniqueVersion=false to avoid the addition of a generated number to file names.
<h2>Deploy your artifacts</h2>
Since we are going to deploy our artifacts to a Maven repository, we need to use Maven for that. We have a couple of ways of doing that: we can let Maven to deploy all that is necessary (which will also build and sign the artifact, if necessary), alternatively we can deploy already prepared artifacts manually, one by one, or finally we can do any of these using Maven Ant integration.<br><br>Notice that it's now required to publish artifacts via a staging repository instead
of directly to the release one so that you can review and have to approve them before they are actually release (details in the following section).
<h3>A. Deploying directly with Maven</h3>
Unless you decide to use the release plugin (which I do use), which does some neat and useful things such as creating an SVN tag, increasing the project's version etc., the deployment is as easy as executing<br><br><span style="font-family:courier new, courier, monospace;">mvn deploy -DperformRelease=true -Dgpg.passphrase=**** -Dgpg.keyname=&lt;your key ID&gt;</span><br><br>(see the section about maven-gpg-plugin to understand why I need these three properties).<br><br>There are two important configurations that make this possible. First of all, you must configure the target deployment repository in your pom.xml:
<pre>&lt;project ...&gt;
   ...
    &lt;distributionManagement&gt;
        &lt;repository&gt;
            &lt;id&gt;nexus-releases&lt;/id&gt;
            &lt;name&gt;Nexus Release Repository&lt;/name&gt;
            &lt;url&gt;http://oss.sonatype.org/service/local/staging/deploy/maven2/&lt;/url&gt;
        &lt;/repository&gt;
    &lt;/distributionManagement&gt;
&lt;/project&gt;</pre>
The &lt;id&gt; is arbitrary and the &lt;url&gt; is same for all, it's actually a kind of a virtual repository and the artifacts will be in reality deployed to a temporary repository based on your username.<br><br>Next you need to store your username and password for oss.sonatype.org under the same &lt;id&gt; as above in the file &lt;user home&gt;/.m2/settings.xml so that maven can authenticate with the repository:
<pre>&lt;settings&gt;
   ...
   &lt;servers&gt;
      &lt;server&gt;
         &lt;id&gt;nexus-releases&lt;/id&gt;
         &lt;username&gt;malyvelky&lt;/username&gt;
         &lt;password&gt;******&lt;/password&gt;
      &lt;/server&gt;
   &lt;/servers&gt;
&lt;/settings&gt;</pre>
<h4>Troubleshooting deployment failures</h4>
<h5>Error 401 (Unauthorized)</h5>
If the deployement fails with an error like this:
<pre>Error deploying artifact: Failed to transfer file: http://oss.sonatype.org/service/local/staging/deploy/maven2//net/jakubholy/testing/dbunit-embeddedderby-parenttest/1.0.2/dbunit-embeddedderby-parenttest-1.0.2.jar. Return code is: 401</pre>
(notice the error code <a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_Client_Error">401</a>) it most likely means that you haven't configured your username/password correctly or that the two IDs (repository id in pom.xml and server id in settings.xml) do not match.
<h5>Error 400 (Bad Request)</h5>
This error indicates that the repository manager has rejected your artifact for some reason. This may happen for example if you try to deploy a snapshot version into the staging repository, which is not allowed by its policy. (For snapshots you should reference the snapshot repository created for you as distributionManagement/snapshotRepository in your pom.xml.)
<h3>B. Deploying manually</h3>
If you have already built and signed your artifacts, you can deploy them manually with the mvn<a href="https://maven.apache.org/plugins/maven-deploy-plugin/deploy-file-mojo.html"> deploy:deploy-file goal</a> as in the example below:
<pre>$ mvn deploy:deploy-file-Durl=http://oss.sonatype.org/service/local/staging/deploy/maven2 -DrepositoryId=nexus-releases -Dfile=smazMe.jar.asc -DpomFile=pom.xml</pre>
See the section <a href="#SignDeployManually">Signing and deploying signatures manually</a> above for explanation and examples of deployment of different types of files (.jar, .zip, signatures).<br><br>In this case you do not need the <span style="font-family:courier new, courier, monospace;">distributionManagement</span> section in your pom.xml (because you're providing all the information on the command line) but you still need to provide your login and password for the target repository (option <span style="font-family:courier new, courier, monospace;">-DrepositoryId=...</span>) in your settings.xml as described above.<br><br>Of course you can run the deployment commands manually or for instance from Ant.
<h3>C. Deploying with Ant nad the Maven Ant Tasks</h3>
<strong>Update 10/2010</strong>: Sonatype user guide now contains the section <a href="https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-7c.StageArtifactswithAnt">7c. Stage Artifacts with Ant</a>.<br><br>You may also use the <a href="https://maven.apache.org/ant-tasks/index.html">Maven Ant Tasks</a> to invoke Maven operations from an Ant build including a <a href="https://maven.apache.org/ant-tasks/examples/install-deploy.html">task for file deployment</a>. It does basically the same as invoking mvn deploy:deploy-file from the command line but you can provide the repository credentials here without a need for settings.xml and you may also find this way of Maven invocation nicer than calling a command-line application.
<h2>Promote the published artifacts from the staging to the release repository</h2>
This step is only necessary if you deploy via the staging repository and not directly to the release repository. But according to a recent email by Juven Xu it seems to be now obligatory to deploy via staging:
<blockquote><em>Staging is one of the most outstanding features in Nexus Pro. We've
been provided you this service for a long time, but maybe you were not
aware of this. So I changed your release repository configuration and
you will no longer be able to deploy release artifacts directly into
the release repository. Instead, you should deploy your release
artifacts into the staging repository: <a href="https://email.seznam.cz/redir?hashId=2874787214&amp;to=http%3a%2f%2foss%2esonatype%2eorg%2fservice%2flocal%2fstaging%2fdeploy%2fmaven2%2f" target="_blank">http://oss.sonatype.org/service/local/staging/deploy/maven2/</a>,
then log in from Nexus UI, do things like closing staging repository,
and promoting the staged artifacts into your release repository.</em></blockquote>
If you are not familiar with Staging, it's well documented at <a href="https://email.seznam.cz/redir?hashId=2874787214&amp;to=http%3a%2f%2fwww%2esonatype%2ecom%2fbooks%2fnexus%2dbook%2freference%2fstaging%2ehtml" target="_blank">http://www.sonatype.com/books/nexus-book/reference/staging.html</a>.
<h3>New instructions (6/2011)</h3>
<ol>
	<li>Log in to oss.sonatype.com</li>
	<li>Click on "Staging Repositories" under Build Promotion</li>
	<li>Verify the content of the repository (in the bottom pane), check it, click Close, confirm</li>
	<li>Check the repo again, click "Release"</li>
	<li>You shall now see your artifacts in the release repository created for you (mine is http://oss.sonatype.org/content/repositories/jakubholy-releases/).</li>
	<li>In some hours (?) it should also appear in Maven Central</li>
</ol>
<h3>Old instructions</h3>
You must do the following to promote the deployed artifacts from the staging to the release repository:
<ol>
	<li>Log in to oss.sonatype.com</li>
	<li>In the right menu, click on "Staging" in the box called "Enterprise" (#1 in the screenshot) =&gt; you should see the "staging profile" named &lt;your project name&gt; (for me it was "net.jakubholy"; see #2)</li>
	<li>Click on your staging repository target ("net.jakubholy", #2) - you should see the individual repositories (some generated name such as net.jakubholy-028) within that including their status, which is "open" right after a deployment (which means that files may be still deployed and redeployed to this temporary repository)</li>
	<li>Verify that the project artifacts are as expected (see below)</li>
	<li>"Close" and "Promote" the staging repository to promote its content to the release repository: right-click on its status and you should see a little "context menu" with options Close and Drop, select Close (#3). You'll be asked for a description, which will be associated with that release. After some time you should also receive a confirmation email from the "Nexus Repository Manager" with the subject "Nexus: Staging Completed."</li>
	<li>"Promote" the closed staging repository to the release one in a way similar to closing it, only now seeing the current status as "closed" and selecting "Promote" from the context menu (beware: there may be some delay before this becomes possible), select your release repository as the target (Jakubholy Releases for me).</li>
	<li>You shall now see your artifacts in the release repository created for you (mine is http://oss.sonatype.org/content/repositories/jakubholy-releases/).</li>
</ol>
<img src="https://jroller.com/holy/resource/sonatype_oss-staging_repo.png" alt="Sonatype Repository Manager - closing a stagin repo." align="bottom" border="0" hspace="0" vspace="0" />
<h3>Required artifacts</h3>
[Since 2010-04-19] It is no required that you include -javadoc.jar along with -sources.jar with your artifacts otherwise you will not be allowed to promote. You can easily create them either with Maven or manually.
<h3>Verifying project artifacts before promoting from the staging repository</h3>
Before you promote the project's artifacts from the staging to the release repository you may want to check few things to be sure that the release is OK:
<ul>
	<li>Are all artifacts included?</li>
	<li>pom.xml:
<ul>
	<li>Is the version all right?</li>
	<li>Are the SCM URLs correct? (Should be set by the release plugin to the tag for that release.)</li>
</ul>
</li>
</ul>
<h2>When will the artifacts be available in Maven Central?</h2>
In ideal case within one hour, in reality it seems to be few hours, <a href="https://issues.sonatype.org/browse/NEXUS-4278">even 12h</a> sometimes.
<h2>Summary</h2>
We've learned how to create a maven repository at oss.sonatype.org, how to sign our artifacts with a private key, how to use the staging repository and finally how to get the released artifacts pushed to the Maven Central repository, where they will be available to all maven users out of the box.
<h2>Other useful links</h2>
<ul>
	<li>Check <a href="https://jeeutils.svn.sourceforge.net/svnroot/jeeutils/tags/dbunit-embeddedderby-parenttest-1.0.2/pom.xml">my project's pom.xml v1.0.2</a> (or the <a href="https://jeeutils.svn.sourceforge.net/svnroot/jeeutils/trunk/DbUnitTestSkeleton/pom.xml">latest</a>) to see how I've configured the stuff described above. It uses the maven-gpg-plugin and maven-release-plugin and deployes to the staging repository. (Beware that some comments in the file may be a bit out of date or inexact.)</li>
	<li>Documentation about deployment via a staging repository: <a href="https://www.sonatype.com/books/nexus-book/reference/staging-sect-deployment.html">http://www.sonatype.com/books/nexus-book/reference/staging-sect-deployment.html</a></li>
	<li>There is a pretty good article "<a href="https://java.dzone.com/articles/automating-releases-maven-0">Automating Releases With maven-release-plugin</a>"; check also its discussion for some pros and cons of the plugin</li>
</ul>
Unrelated but interesting:
<ul>
	<li>Maven and Sourceforge guide - <a href="https://docs.codehaus.org/display/MAVENUSER/MavenAndSourceforge">http://docs.codehaus.org/display/MAVENUSER/MavenAndSourceforge</a></li>
	<li><span style="text-decoration:line-through;">Maven SF plugin for building and deploying to SF: <a href="https://maven-plugins.sourceforge.net/maven-sourceforge-plugin/">http://maven-plugins.sourceforge.net/maven-sourceforge-plugin/</a></span> <em>for Maven 1 only</em></li>
</ul>
++++
