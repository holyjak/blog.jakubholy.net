{:title
 "Howto: JAX-WS service with XML Source input instead of JAXB-produced POJOs (similar to JAX-RPC with SOAPElement input)",
 :date "2010-12-29",
 :layout :post,
 :tags ["java" "api"],
 :tags-orig ["java" "jaxws" "webservice" "xml"],
 :categories ["j2ee" "Languages"],
 :extra-css #{}
}

++++
Sometimes you may want to create a JAX-WS webservice with its input defined by a proper, structured XSD yet accessing the input as raw XML object and not as POJOs produced by JAXB, similarly as with a JAX-RPC webservice having input of the type SOAPElement. This is possible using @WebServiceProvider with javax.xml.ws.Service.Mode.PAYLOAD.<br><br><!--more--><br><br><strong>JAXB input</strong> Normally you create a JAX-WS webservice by annotating a POJO with @WebService and related annotations and use JAXB annotations on your domain classes used in input and output of the web service (or you use wsimport and the JAXB compiler to produce these from a WSDL file).<br><br><strong>XML input</strong> But there is also an alternative way for accessing the input as XML data (not just a string containing XML!), in which case you basically bypass JAXB binding and thus you also don't need to generate any domain classes for your wsdl.<br><br>JAX-WS 2.0 specification, section 5.1 javax.xml.ws.Provider (page 77) explains the difference:
<blockquote>Java SEIs [JH: a native Java service endpoint interface] provide a high level Java-centric abstraction that hides the details of converting between Java objects and their XML representations for use in XML-based messages. However, in some cases it is desirable for services to be able to operate at the XML message level. The Provider interface offers an alternative to SEIs and may be implemented by services wishing to work at the XML message level.</blockquote>
<h2>Implementation example</h2>
This is how you would create such a web service, accessing its input as XML data represented by javax.xml.transform.Source:<br><br><strong>ExampleRawXmlServiceImpl.java:</strong><br><br><pre><code>
package example;<br><br>import javax.xml.transform.Source;
import javax.xml.ws.Provider;<br><br>@javax.xml.ws.ServiceMode(value=javax.xml.ws.Service.Mode.PAYLOAD)
@javax.xml.ws.WebServiceProvider(wsdlLocation=&quot;WEB-INF/wsdl/learningActivity/LearningActivity.wsdl&quot;
	, targetNamespace=&quot;http://w3.ibm.com/xmlns/ibmww/hr/learning/lms/br/la&quot;
	, serviceName=&quot;LearningActivityHttpService&quot;
	, portName=&quot;LearningActivityRawXml&quot;)
public class ExampleRawXmlServiceImpl implements Provider&lt;Source&gt; {
	@Override
	public Source invoke(final Source request) {
		// ...
		return null;
	}
}
</code></pre><br><br>(You perhaps don't need all the @WebServiceProvider attributes.)<br><br>The important things to notice:
<ul>
	<li>@WebServiceProvider is used instead of @WebService</li>
	<li>The ServiceMode is set to Payload and therefore the class has to implement Provider&lt;javax.xml.transform.Source&gt;. You could set it also to Message, in which case you'd get a complete SOAPMessage and thus you'd need to implement Provider&lt;SOAPMessage&gt;.</li>
</ul>
<h2>Working with the XML data (Source)</h2>
You will likely need to convert the input javax.xml.transform.Source to something usable. Here are few examples:
<strong>Converting Source to XML string:</strong><br><br><pre><code>
import java.io.StringWriter;
import import javax.xml.transform.*;
import javax.xml.transform.stream.StreamResult;
...
final StringWriter requestXmlWriter = new StringWriter();
final Transformer trans = TransformerFactory.newInstance().newTransformer();
trans.transform(request, new StreamResult(requestXmlWriter));
final String requestXml = requestXmlWriter.toString();
</code></pre><br><br><strong>Converting Source to DOM</strong> (copied from [1]):<br><br><pre><code>
import javax.xml.transform.dom.*;
import org.w3c.dom.Node;
...
DOMResult dom = new DOMResult();
Transformer trans = TransformerFactory.newInstance().newTransformer();
trans.transform(source, dom);
Node node = dom.getNode();
// do something with it ...
DOMSource src = new DOMSource (node);
</code></pre><br><br>Notice there is also javax.xml.transform.sax containing SAXResult and SAXSource.
<h2>Resources</h2>
<ol>
	<li>Article <a href="https://java.sun.com/developer/technicalArticles/xml/jaxrpcpatterns3/">Realizing Strategies for Document-Based Web Services With JAX-WS 2.0: Part 3 in a Series</a> by Sameer Tyagi, 2005 - section Switching Off Data Binding</li>
	<li>Blog <a href="https://blogs.sun.com/artf/entry/operating_at_the_xml_message">Operating at the XML Message Level in JAX-WS 2.0</a> by Art Frechette, 2006</li>
	<li>JAX-WS 2.0 specification (JSR 224)</li>
</ol>
++++
