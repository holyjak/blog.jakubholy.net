{:title
 "Add method tracing (params, result) to existing application w/o modifying it",
 :date "2008-09-26",
 :layout :post,
 :tags ["java" "library"],
 :tags-orig ["AOP" "java"],
 :categories ["Languages"],
 :extra-css #{}
}

++++
<p>
Have you ever needed to learn what's going on in a 3rd-party java application and yet didn't want to debug it and step through it? Were you wishing to be able to see what methods get called in what order together with their actual parameters and return values? There is a &quot;simple&quot; solution: AspectWerkz.</p><p>Quick start:</p><ol><li>Download&nbsp; <a href="https://aspectwerkz.codehaus.org/">AspectWerkz </a>(I had 2.0)</li><li>Create an aop.xml where you define what methods to observe</li><li>(Optional) Modify the tracer class</li><li>Run the target application with the aspect under Java 5 (AspectWerkz supports also older JVM but that's more tricky):</li></ol><p>$JRE5_HOME/bin/java <br />&nbsp;&nbsp;&nbsp; -javaagent:lib/aspectwerkz-jdk5-2.0.jar -Daspectwerkz.definition.file=/path/to/the/aop.xml<br />&nbsp;&nbsp;&nbsp; -cp &lt;some jars from lib/, see below&gt;:./bin:&lt;your classpath&gt;<br />&nbsp;&nbsp;&nbsp; yourpackage.YourMainClass</p><p>&nbsp;Classpath:<br />&nbsp;&nbsp; &nbsp;aspectwerkz-core-2.0.jar<br />&nbsp;&nbsp; &nbsp;aspectwerkz-2.0.jar<br />&nbsp;&nbsp; &nbsp;commons-collections.jar<br />&nbsp;&nbsp; &nbsp;commons-beanutils.jar<br />&nbsp;&nbsp; &nbsp;commons-logging.jar<br />&nbsp;&nbsp; &nbsp;dom4j-1.4.jar, qdox-1.4.jar, concurrent-1.3.1.jar, trove-1.0.jar (see aspectwerkz-2.0.jar's Manifest)</p><p>&nbsp;See: aspectwerkz-2.0\src\samples\examples\logging\* , aspectwerkz-2.0\src\samples\examples\proxy\tracing\*<br /></p><p>aop.xml example:</p><pre>&lt;!--  the aspectwerkz.definition.file --&gt;
&lt;aspectwerkz&gt;
    &lt;system id="aopRunttimeLoggerExample"&gt;
        &lt;package name="net.jakubholy.jeeutils.injectedlogger"&gt;
            &lt;aspect class="TracingAspect "&gt;
                &lt;!-- Expression: any methods in the package including constructors and excluding the aspect class --&gt;
                &lt;pointcut name="myPointcut" expression="( execution(* org.hibernate...*(..)) OR execution(org.hibernate.tool.hbm2x...new(..)) ) AND !within(net.jakubholy.jeeutils.injectedlogger.TracingAspect) AND !within(org.hibernate.tool.hbm2x.TemplateHelper) AND !within(org.hibernate.tool.hbm2x.AbstractExporter)"/&gt;
                &lt;advice name="beforeMethod" type="before" bind-to="myPointcut"/&gt;
                &lt;advice name="afterMethod" type="after" bind-to="myPointcut"/&gt;
            &lt;/aspect&gt;
        &lt;/package&gt;
    &lt;/system&gt;
&lt;/aspectwerkz&gt;
</pre><p><br />And now the tracing class itself:</p>
<pre><code>
package net.jakubholy.jeeutils.injectedlogger;<br><br>import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import org.apache.commons.beanutils.BeanUtils;
import org.codehaus.aspectwerkz.joinpoint.*;<br><br>/**
 * AspectWerkz aspect adding tracing of parameters and return values to methods.
 *
 * &lt;p&gt;
 * See aspectwerkz-2.0\src\samples\examples\proxy\tracing\TracingAspect.java -
 * some very good ideas.
 * &lt;/p&gt;
 *
 * &lt;p&gt;
 * In AspectWerkz definition file you should define this aspect like:
 * &lt;/p&gt;
 * &lt;pre&gt;&lt;code&gt;
 *      &lt;package name=&quot;net.jakubholy.jeeutils.injectedlogger&quot;&gt;
            &lt;aspect class=&quot;TracingAspect &quot;&gt;
                &lt;pointcut name=&quot;myPointcut&quot; expression=&quot;execution(* net.jakubholy...*(..)) AND !within(net.jakubholy.jeeutils.injectedlogger.TracingAspect)&quot;/&gt;
                &lt;advice name=&quot;beforeMethod&quot; type=&quot;before&quot; bind-to=&quot;myPointcut&quot;/&gt;
                &lt;advice name=&quot;afterMethod&quot; type=&quot;after&quot; bind-to=&quot;myPointcut&quot;/&gt;
            &lt;/aspect&gt;
       &lt;/package&gt;
 * &lt;/code&gt;&lt;/pre&gt;
 * &lt;p&gt;
 * Replace 'net.jakubholy' in the execution with the package you want to
 * enable tracing for. Examples:
 * &lt;/p&gt;
 * &lt;ul&gt;
 * &lt;li&gt;All subpackages of mypackage: &lt;code&gt;execution(* com.mycompany.mypackage...*(..)&lt;/code&gt;
 * &lt;li&gt;All methods in MyClass: &lt;code&gt;execution(* com.mycompany.mypackage.MyClass.*(..)&lt;/code&gt;
 * &lt;li&gt;All methods in MyClass: &lt;code&gt;execution(* ..MyClass.*(..)&lt;/code&gt;
 * &lt;li&gt;Only myMethod in MyClass: &lt;code&gt;execution(* com.mycompany.mypackage.MyClass.myMethod(..)&lt;/code&gt;
 * &lt;li&gt;Only public methods in mypackage: &lt;code&gt;execution(public * com.mycompany.mypackage...*(..)&lt;/code&gt;
 * &lt;li&gt;Constructors in mypackage and below: execution(com.mycompany.mypackage...new(..)) )
 * &lt;/ul&gt;
 *
 * TODO Add support for starting/stopping tracing when a configurable pattern (method+params+retval?) is encountered
 */
public class TracingAspect {
    private boolean doTrace = false;<br><br>    private void log(String logMsg) {
        final String threadId = &quot;thread #&quot; +
            Thread.currentThread().getId() + &quot;(&quot; + Thread.currentThread().getName() + &quot;)&quot;;
        // TODO use asynch. loggin e.g. via Log4J's asynch. appender
        if (doTrace) System.err.println(&quot;[TracingAspect &quot;+threadId+&quot;] &quot; + logMsg);
    }<br><br>    /**
     * 'Advice' called before a method or constructor.
     */
     public void beforeMethod(JoinPoint joinPoint) {
         Rtti rtti = joinPoint.getRtti();
         if (rtti instanceof MethodRtti) {
             MethodRtti methodRtti = (MethodRtti) rtti;<br><br>             if (!doTrace) {
                 doTrace = isStartTracingSignatureMatch(methodRtti);
                 log(&quot;INFO tracing enabled&quot;);
             }<br><br>             log(&quot;{BEFORE method &quot; + methodRtti.getDeclaringType().getName() + &quot;.&quot; + methodRtti.getName());
         } else if (rtti instanceof ConstructorRtti) {
             ConstructorRtti methodRtti = (ConstructorRtti) rtti;
             log(&quot;{BEFORE constructor &quot; + methodRtti.getName());
         } else {
             log(&quot;{ERROR: not a method! rtti=&quot; + rtti);
         }
     }<br><br>    /**
     * 'Advice' called after a method or constructor.
     */
     public void afterMethod(JoinPoint joinPoint) {
         Rtti rtti = joinPoint.getRtti();
         StringBuffer sb = new StringBuffer();<br><br>         if (rtti instanceof MethodRtti) {
             MethodRtti methodRtti = (MethodRtti) rtti;
             Object[] params = methodRtti.getParameterValues();
             Class[] ptypes = methodRtti.getParameterTypes();<br><br>             boolean stopTracing = doTrace &amp;&amp; isEndTracingSignatureMatch(methodRtti);<br><br>             if (doTrace) {
                 sb.append(methodRtti.getDeclaringType().getName() + &quot;.&quot; + methodRtti.getName() + &quot;(&quot;);
                 // Describe parameters
                 for (int i = 0; i &lt; params.length; i++) {
                     sb.append(ptypes[i].getName() + &quot;: &quot; + describe(params[i]))
                         .append((i+1 &lt; params.length)? &quot;, &quot; : &quot;&quot;);
                }<br><br>                 // Describe output
                 Object output = methodRtti.getReturnValue();
                 sb.append(&quot;): &quot;).append(methodRtti.getReturnType().getName()).append(&quot;: &quot;)
                     .append(describe(output));<br><br>                 // Log
                 log(&quot;AFTER method &quot; + sb + &quot;}&quot;);<br><br>                 if (stopTracing) {
                     log(&quot;INFO: tracing disabled; method=&quot; + methodRtti.getName());
                     doTrace = false;
                 }
             }
         } else if (rtti instanceof ConstructorRtti) {
             ConstructorRtti methodRtti = (ConstructorRtti) rtti;
             Object[] params = methodRtti.getParameterValues();
             Class[] ptypes = methodRtti.getParameterTypes();
             sb.append(&quot;constructor &quot; + methodRtti.getName() + &quot;(&quot;);<br><br>             // Describe parameters
             for (int i = 0; i &lt; params.length; i++) {
                 sb.append(ptypes[i].getName() + &quot;: &quot; + describe(params[i]))
                     .append((i+1 &lt; params.length)? &quot;, &quot; : &quot;&quot;);
            }
             sb.append(&quot;)&quot;);<br><br>             // Log
             log(&quot;AFTER constructor &quot; + sb + &quot;}&quot;);
         }
     }<br><br>     /**
      * Return a string representation of the &lt;var&gt;target&lt;/var&gt;
      * containing its properties and their values.
      * @param target
      * @return
      */
     private String describe(Object target) {
         String result;
         StringBuffer sb = new StringBuffer();<br><br>         // SPECIAL: Hibernate &amp; hbm2java generation
         // When running hbm2java, avoid InvocationTargetException &lt;- MappingException: entity class not found &lt;- ClassNotFoundException
         // for a class yet to generate
         if (target != null &amp;&amp; target.getClass().getName().startsWith(&quot;org.hibernate.mapping.&quot;)) {
             return target.toString();
         } // hibernate mapping<br><br>         if (target == null) {
             result = &quot;null&quot;;
         } else if (target.getClass().isArray()) {
             // ARRAY
             Object[] targetArray = (Object[]) target;
             sb.append(&quot;#&quot;).append(targetArray.length).append(&quot;[&quot;);<br><br>             for (int i = 0; i &lt; targetArray.length; i++) {
                sb.append(describe(targetArray[i]));
                if (i &lt; targetArray.length - 1) {
                    sb.append(&quot;, &quot;);
                }
            }<br><br>             sb.append(&quot;]&quot;);
             result = sb.toString();
         } else if (target instanceof Collection) {
             Collection targetColl = (Collection) target;
             sb.append(&quot;#&quot;).append(targetColl.size()).append(&quot;[&quot;);
             for (Iterator iter = targetColl.iterator(); iter.hasNext();) {
                Object element = (Object) iter.next();
                sb.append(describe(element))
                    .append(iter.hasNext()? &quot;, &quot; : &quot;&quot;);
            }
             sb.append(&quot;]&quot;);
             result = sb.toString();
         } else if (target instanceof String) {
             result = &quot;'&quot; + target + &quot;'&quot;;
         } else if (target.getClass().getName().startsWith(&quot;java.lang.&quot;)) {
             result = target.toString();
         } else {
             sb.append(&quot;{&quot;);<br><br>             try {
                 final String separ = &quot;, &quot;;
                 Map props = BeanUtils.describe(target);
                 for (Iterator iter = props.entrySet().iterator(); iter.hasNext();) {
                    Map.Entry nameValue = (Map.Entry) iter.next();
                    if (!&quot;class&quot;.equals(nameValue.getKey())) {
                    sb
                        .append(nameValue.getKey()).append('=')
                        .append(nameValue.getValue())
                        .append(separ);
                    }
                 } // for props<br><br>                 // remove trailing separator if present
                if (separ.equals(sb.substring( Math.max(0, sb.length() - 2 )))) {
                    sb.delete(sb.length() - 2, sb.length());
                }<br><br>             } catch (Throwable e) {
//                 e.printStackTrace();
                 sb.append(&quot;Exception examining the object &quot;)
                     .append(target)
                     .append(&quot;: &quot;)
                     .append(e);
                 System.err.println(sb);
             }
             sb.append(&quot;}&quot;);
             result = sb.toString();
         } // switch<br><br>         return result;
     }<br><br>     /**
      * Does the current method being instrumented match the signature
      * that should start tracing?
     * @param methodRtti
      * @return
      */
     private boolean isStartTracingSignatureMatch(MethodRtti methodRtti) {
         return true;
     }<br><br>     /**
      * Does the current method being instrumented match the signature
      * indicating we should stop tracing?
      * @param methodRtti
      * @return
      */
     private boolean isEndTracingSignatureMatch(MethodRtti methodRtti) {
         return false;// isStartTracingSignatureMatch(methodRtti);
     }
}
</code></pre>
++++
