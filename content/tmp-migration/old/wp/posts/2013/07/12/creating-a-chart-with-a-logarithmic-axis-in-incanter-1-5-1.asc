{:title "Creating A Chart With A Logarithmic Axis In Incanter 1.5.1",
 :date "2013-07-12",
 :layout :post,
 :tags ["clojure" "data"],
 :tags-orig ["clojure" "data" "incanter"],
 :categories ["General"],
 :extra-css #{}
}

++++
Incanter 1.5.1 doesn't support logarithmic axes, fortunately it is easy to add one manually.<br><br><strong>Update</strong>: <a href="https://github.com/liebke/incanter/pull/167">Pushed improved version to Incanter</a>.<br><br>This is how our final code will look like:<br><br><pre><code>
;; core and charts are the incanter namespaces
(defn plot-power []
  (let [fun #(Math/pow 10 %)
        y-axis (log-axis :label &quot;log(x)&quot;)
        chart (charts/function-plot fun 0 5)]
    (set-axis chart :y y-axis)
    (core/view chart :window-title &quot;LogAxis Test: Incanter fun plot&quot;)))
</code></pre><br><br><!--more--><br><br>And this is the supporting code:<br><br><pre><code>
(defn log-axis
&quot; Create a logarithmic axis.<br><br>  Beware: The data may not contain zero. Otherwise the chart will look
  rather strange (log doesn't like zeros).<br><br>  Options: :base (default 10) base of the logarithm; typically 2 or 10
    :label (default none) the label of the axis
&quot;
  [&amp; options]
  (let [opts (when options (apply assoc {} options))
        base (or (:base opts) 10)
        label (:label opts)]
    (doto (if label
            (LogAxis. label)
            (LogAxis.))
      (.setBase base)
      ;; Use normal numbers instead of 10^num, i.e. 1 inst. of 10^0.0
      (.setStandardTickUnits (NumberAxis/createIntegerTickUnits)))))<br><br>(defmulti set-axis
  &quot;Set the selected axis of the chart, returning the chart.
  (Beware: the axis' label will replace the x-label or y-label set previously on the chart.)<br><br>  Arguments:
    chart - the JFreeChart object whose axis to change
    dimension - depends on the plot type, f.ex. :x or :y for an XYPlot
    axis - the axis to set, an instance of ValueAxis<br><br>  Examples: (use '(incanter core charts))<br><br>    (doto (function-plot #(Math/pow 10 %) 0 5) (set-axis :x (log-axis
      :base 10, :label \&quot;log(x)\&quot;)) view)
&quot;<br><br>  (fn [chart dimension axis] (type (.getPlot chart))))<br><br>(defmethod set-axis org.jfree.chart.plot.XYPlot
  ([chart dimension axis]
     {:pre [(#{:x :y} dimension)]}
     (let [plot (.getXYPlot chart)]
       (if (= :x dimension)
         (.setDomainAxis plot axis)
         (.setRangeAxis plot axis)))
     chart))
</code></pre><br><br>Admittedly, this is a little overengineered with the multimethod, but there were reasons for it :-).
++++
