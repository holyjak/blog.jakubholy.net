{:title
 "Running A Leiningen/Ring Webapp As A Daemon Via Upstart (Ubuntu)",
 :date "2013-07-27",
 :layout :post,
 :tags ["clojure" "DevOps"],
 :tags-orig ["clojure" "DevOps" "linux"],
 :categories ["General"],
 :extra-css #{}
}

++++
Running a Java/Clojure app as a daemon on Linux used to be hard but is pretty simple with <a href="https://upstart.ubuntu.com/">Ubuntu Upstart</a> (<a href="https://upstart.ubuntu.com/cookbook/">docs</a>). The short story:
<ol>
	<li>Create an all-in one <a href="https://github.com/technomancy/leiningen/blob/master/doc/TUTORIAL.md#uberjar">uberjar</a> via "<kbd>lein with-profile production ring uberjar</kbd>" (using the <a href="https://github.com/weavejester/lein-ring#lein-ring">lein-ring</a> plugin; a simple <kbd>lein uberjar</kbd> would suffice for an app with a <code>main-</code> method)</li>
	<li>Create an upstart <kbd>&lt;service name&gt;.conf</kbd> file in /etc/init/</li>
	<li>Run <kbd>sudo start/stop/status &lt;service name&gt;</kbd></li>
</ol>
And of course it works with Puppet too.<br><br><!--more-->
<h2>Example /etc/init/mongodiffer.conf</h2>
Example Upstart config file for the service mongodiffer:<br><br><pre><code>
## Upstart config file (use 'start mongodiffer', 'stop mongodiffer')
## Note: Stdout and stderr will be captured in /var/log/upstart/mongodiffer.log
## (aside of the native log in /var/log/mongodiffer.log)
author &quot;Jakub Holy&quot;
description &quot;Start the MongoDiffer webapp on its default port (80)&quot;
start on (local-filesystems and net-device-up IFACE!=lo)
# Note: &quot;start on runlevel [2345]&quot; would also do but I want to be explicit that
# running it w/o network is meaningless
# Must run as root to be able to run on port 80; ugly but quick
#setuid mongodiffer
#setgid mongodiffer
exec java -jar /srv/mongodiffer/clj-analytics-mongodiffer-standalone.jar
## TODO: Consider enabling respawning
# respawn
## Try to restart up to 10 times within 5 min:
# respawn limit 10 300
</code></pre><br><br>The only necessary "<a href="https://upstart.ubuntu.com/cookbook/#stanzas-by-category">stanzas</a>" are "<a href="https://upstart.ubuntu.com/cookbook/#start-on">start on</a>" and "<a href="https://upstart.ubuntu.com/cookbook/#exec">exec</a>" (see also <a href="https://upstart.ubuntu.com/cookbook/#run-a-java-application">Upstart for Java apps</a>). We could also enable <a href="https://upstart.ubuntu.com/cookbook/#respawn">respawning</a> (both the stanzas) so that Upstart would try to start the service again if it crashes. (Of course Clojure service never crash ;-))
<h1>Logging</h1>
I use <a href="https://github.com/clojure/tools.logging#logging">tools.logging</a> with <a href="https://logback.qos.ch/">logback</a> (ch.qos.logback/logback-classic) and its <a href="https://logback.qos.ch/manual/appenders.html#RollingFileAppender">RollingFileAppender</a> with a <a href="https://logback.qos.ch/manual/appenders.html#SizeAndTimeBasedFNATP">SizeAndTimeBasedFNATP</a> to keep the logs to a reasonable size:<br><br><pre><code>
&lt;configuration&gt;<br><br>&lt;appender name=&quot;FILE&quot;&gt;
&lt;file&gt;/var/log/mongodiffer/mongodiffer.log&lt;/file&gt;
&lt;rollingPolicy&gt;
&lt;!-- rollover daily --&gt;
&lt;fileNamePattern&gt;/var/log/mongodiffer/mongodiffer-%d{yyyy-MM}.%i.log&lt;/fileNamePattern&gt;
&lt;timeBasedFileNamingAndTriggeringPolicy&gt;
&lt;!-- or whenever the file size reaches the size --&gt;
&lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;
&lt;/timeBasedFileNamingAndTriggeringPolicy&gt;
&lt;/rollingPolicy&gt;
&lt;encoder&gt;
&lt;pattern&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt;
&lt;/encoder&gt;
&lt;/appender&gt;<br><br>&lt;appender name=&quot;STDOUT&quot;&gt;
&lt;encoder&gt;
&lt;pattern&gt;%msg%n&lt;/pattern&gt;
&lt;/encoder&gt;
&lt;/appender&gt;<br><br>&lt;root level=&quot;info&quot;&gt;
&lt;appender-ref ref=&quot;FILE&quot; /&gt;
&lt;appender-ref ref=&quot;STDOUT&quot; /&gt; &lt;!-- Useful when running locally/dev --&gt;
&lt;/root&gt;
&lt;/configuration&gt;
</code></pre><br><br>Stdout and stderr of the service is automatically captured in /var/log/upstart/mongodiffer.log via the default <a href="https://upstart.ubuntu.com/cookbook/#console-log">console log</a> stanza. I haven't been able to find out what to do to make sure that it won't grow infinitely.
<h2>Serving static resources from a Ring uberjar</h2>
<ol>
	<li>Put the resources under a directory in resources, f.ex. resources/static/ (=&gt; e.g. resources/static/js/zepto/zepto.min.js)</li>
	<li>Configure the wrap-resource Ring middleware: "(wrap-resource "static")"</li>
	<li>Refer to the resources using the path after static (e.g. "/js/zepto/zepto.min.js")</li>
</ol>
++++
