{:title "JDBC: What resources you have to close and when?",
 :date "2013-02-18",
 :layout :post,
 :tags ["java" "methodology"],
 :tags-orig ["best practices" "java" "jdbc"],
 :categories ["Languages"],
 :extra-css #{}
}

++++
I was never sure what resources in JDBC must be explicitely closed and wasn't able to find it anywhere explained. Finally my good colleague, Magne Mære, has explained it to me:
<blockquote>In JDBC there are several kinds of resources that ideally should be closed after use.  Even though every Statement and PreparedStatement is specified to be implicitly closed when the Connection object is closed, you can't be guaranteed when (or if) this happens, especially if it's used with connection pooling. You should explicitly close your Statement and PreparedStatement objects to be sure. ResultSet objects might also be an issue, but as they are guaranteed to be closed when the corresponding Statement/PreparedStatement object is closed, you can usually disregard it.</blockquote>
Summary: Always close PreparedStatement/Statement and Connection. (Of course, with Java 7+ you'd use the try-with-resources idiom to make it happen automatically.)<br><br>PS: I believe that the close() method on pooled connections doesn't actually close them but just returns them to the pool.<br><br>A request to my dear users: References to any good resources would be appreciate.
++++
