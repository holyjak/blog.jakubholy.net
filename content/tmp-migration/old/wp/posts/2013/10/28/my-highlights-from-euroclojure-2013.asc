{:title "My Highlights From EuroClojure 2013",
 :date "2013-10-28",
 :layout :post,
 :tags ["clojure"],
 :tags-orig ["clojure" "conference"],
 :categories ["Languages"],
 :extra-css #{}
}

++++
<strong></strong><a href="https://euroclojure.com/2013/programme/">EuroClojure 2013</a> was a nice, small conference. The talks were mostly interesting and often useful and it was wonderful to meet in reality people I only knew from the virtual life or from stories. You can get an impression what it was like from the <a href="https://twitter.com/search?q=%23euroclojure&amp;src=tyah">#euroclojure tweets</a>.<br><br>Below are some noteworthy things from the talks and chats.<br><br><!--more-->
<h2>Other stuff</h2>
<ul>
	<li><a href="https://thechangelog.com/rich-hickeys-greatest-hits/">Rich Hickey’s Greatest Hits</a> - links to the most popular talks (currently 6) such as Simple Made Easy</li>
	<li><a href="https://github.com/juliangamble/clojure-ants-simulation">Rich Hiceky's demo simulation of Ants</a> in Clojure - high concurrency, no locking</li>
</ul>
<h2>Slides and code from the talks</h2>
Go to<a href="https://lanyrd.com/2013/euroclojure/coverage/"> EuroClojure 2013 at Lanyrd for links to slides and source code</a> used in the talks.
<h2>Talks</h2>
Here are some things I have found worth remembering from <a href="https://euroclojure.com/2013/programme/">the programme</a>.
<h3>Side notes</h3>
The MOOC <a href="https://www.complexityexplorer.org/online-courses/1">Introduction to Complexity</a> has been mentioned and recommended.<br><br>The Clojure-driven drone project <a href="https://github.com/jarppe/sormilla">Sormilla</a> at GitHub is an example of using Stuart Sierra's Reload pattern to be able to realod code cleanly w/o restarting REPL, see the interface Service. (I cannot find this part of the code at GitHub and it is 2m old, perhaps the changes with this aren't there yet?) Using clojure/tools.namespace‎'s reload[-all]<br><br>Ruby programmers are perhaps more open-minded towards Clojure than experienced Java devs?
<h3>Zach Tellman's keynote: States and Nomads: Handling Software Complexity</h3>
Abstractions are essentially simplifications that try to hide complexity by either treating multiple moving parts as one or by ignoring some relationships between the moving parts. Therefore all abstractions are imperfect and there are always situations where the underlying complexity leaks through. <strong>Every abstraction (library, framework) has thus a boundary beyond which it isn't useful anymore due to the underlying complexity leaking through.</strong> A civilized discussion should focus on discovering the boundary rather than claiming that something is rubbish because you tried to use it outside of its boundary of usefulness or claiming that it is a silver bullet.<br><br><strong>Local and contextual quality</strong>: Christopher Alexander, the <a href="https://en.wikipedia.org/wiki/A_Pattern_Language">father of design patterns</a>, examines one special "<a href="https://www.google.no/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;ved=0CCgQFjAA&amp;url=http%3A%2F%2Fwww.cs.tut.fi%2F~kk%2Fwebstuff%2FFoundationofpatterns.pdf&amp;ei=mrNeUqV_hIbgBOyegJgG&amp;usg=AFQjCNHe2t5fXFUwFsml2wI33eMCXPzDxg&amp;sig2=0oMuxJ3E6Z4gPUT-99ozMQ&amp;bvm=bv.54176721,d.bGE">quality without a name</a>" that embodies that a design is good. It is hard to describe and is special by depending very much on the local context and cannot be described and prescribed generally, in the absolute platonic way. How does this quality apply to software?
<blockquote>There is a central quality which is the root criterion of life and spirit in a man, a town, a building, a wilderness. This quality is objective and precise, but it cannot be named.<br><br>- Ch. Alexander: <a href="https://books.google.no/books?id=H6CE9hlbO8sC&amp;pg=PA17&amp;lpg=PA17&amp;dq=alexander+%22quality+without+name%22&amp;source=bl&amp;ots=4v-IcjmakL&amp;sig=WYwUx2KuEGqGqGemT-b9m0IHaCE&amp;hl=en&amp;sa=X&amp;ei=mrNeUqV_hIbgBOyegJgG&amp;ved=0CEAQ6AEwAw#v=onepage&amp;q=alexander%20%22quality%20without%20name%22&amp;f=false">The Timeless Way of Building</a>, Volume 8, page ?19?</blockquote>
Zach's reading list containing f.ex. <a href="https://dreamsongs.net/Files/PatternsOfSoftware.pdf">Gabriel, Richard P. Patterns of Software</a> is interesting
<h3>Liberator – free your data with RFC 2616</h3>
<a href="https://clojure-liberator.github.io/liberator/">Liberator</a> is a REST library for Clojure with <a href="https://clojure-liberator.github.io/liberator/tutorial/debugging.html">great troubleshooting capabilities</a>, having a log of past requests and for each of them the decision steps it went through, complete with a graph.
<h3>James Reeves: Functional 3D Game Design</h3>
A 3D game has ~ 16 ms/frame which is not too short for using clojure.<br><br>Performance and reliability oppose each other when going from the least performant, brute force, through caching to mutability =&gt; when in doubt, use brute force (i.e. old good Clojure without perf. optimization). Caching is often good enough.<br><br>Uses the library <a href="https://github.com/hugoduncan/criterium">Criterium</a> for benchmarking.
<h3>Jen Smith: Common Clojure Smells</h3>
<a href="https://dl.dropboxusercontent.com/u/18288740/talks/clojuresmells.pdf">Slides (pdf).</a><br><br>Overview (<a href="https://twitter.com/RiczWest/status/389775123642716160">via Richard West</a>):<br><br><img class="alignnone" alt="OOP and Clojure smells and sources" src="https://o.twimg.com/2/proxy.jpg?t=HBhaaHR0cDovL2kwLndwLmNvbS9jaGFuZ2VhcmMuZmlsZXMud29yZHByZXNzLmNvbS8yMDEzLzEwLzIwMTMxMDE0LTE3MjgyNS5qcGc_Zml0PTE2MDAlMkMxNjAwFPQNFOwLABYAEgA&amp;s=ecWX4SMKV81ks96306581zBv18D0SFjpEe5eb2KY9fo" width="890" height="758" /><br><br>Some of the code smells from OOP apply to Clojure as well, perhaps with some modifications (too large class =&gt; too large namespace) but Clojure has also some of its own, such as:
<ul>
	<li> Magic Keys - if many functions need to know about keys within (= structure of) a map =&gt; harder to maintain =&gt; try to decouple</li>
	<li>Locally scoped atoms</li>
	<li>Indirection by partiality - many derived functions using (partial .. )</li>
	<li>Macromania - overuse of macros</li>
	<li>Excessive use of lazy evaluation - a troubleshooting issue since an error may appear much later when the lazy seq is evaluated, far from where it originates =&gt; consider evaluating seqs at borders of responsibility (modules, ...)</li>
	<li>Many discrete steps with a final one that executes the seq (a.k.a. long pipelines; map + filter + reduce + ...) - an error in the middle will be hard to troubleshoot =&gt; break down</li>
	<li>Parens proliferation (a.k.a. over-nesting, doing too many things at once) =&gt; break into multiple functions, use -&gt;</li>
</ul>
Hopefully this will be a start of a growing collection of Clojure code smells
<h3>Stuart Halloway's keynote: Narcissistic Design</h3>
A thought-provoking presentation about "tips" for increasing complexity including a masked criticism of (bad) unit testing (many tests with different setup, ...). It is worth listening to and thinking about.<br><br>See also <a href="https://teropa.info/blog/2013/10/15/euroclojure-2013-narcissistic-design.html">Tero Parviainen's extensive summary of the Narcissistic Design</a> talk.<br><br><a href="https://nofluffjuststuff.com/conference/reston/2013/11/session?id=30015">Narcissistic Design recorded at NoFluffJustStuff.com</a>.<br><br>The 10 steps to job security are:
<ol>
	<li>Use OO, and don't forget those setter methods!</li>
	<li>Prefer APIs over data.</li>
	<li>Start with DSLs.</li>
	<li>Always connect (and never enqueue).</li>
	<li>Create abstractions for information (i.e. wrap all data in specific objects/classes)</li>
	<li>Use static typing across subsystem boundaries.</li>
	<li>Put language semantics on the wire. (Instead of using a language-agnostic data language like json, edn, or hessian.)</li>
	<li>Write <em>lots</em> of unit tests.</li>
	<li>Leverage context.</li>
	<li>Update information in place.</li>
</ol>
#3 DSLs: When designing, always proceed in this order:
<ol>
	<li>Design an information model</li>
	<li>Design an API</li>
	<li>Design DSL</li>
</ol>
People often start at 3 and neglect 3/2, f.ex. SQL is just a DSL without an API and no information model.<br><br>Small x big: It is not only important that you fix bugs or solve problems, you should also ask whether you are actually solving the big problems / defects. Some approaches help with small bugs / design problems but that is not enough.<br><br>Complexity: Work around problems in a layer above rather than fixing them where they are. Ex.: fixing shortcomings of Java in Clojure (f.ex. Java allows multiple instances of false) - duing this guarantees increased complexity.
<h3>Paul Bellamy &amp; Martin Trojer: Using Clojure to Serve The Internet of Things</h3>
<a href="https://github.com/martintrojer/euroclojure-demo">https://github.com/martintrojer/euroclojure-demo</a> - including code for Arduion, clojure webapp collecting tweets, etc.<br><br>Xively started originally as a Rails app, storing both metadata and data from the customer's devices in PostgreSQL. This didn't work well since most devices sent data in the same time (full hour, ...) and Rails/PG did not handle the spikes well.<br><br>They have therefore replaced PG with Cassandra nad considered Node.js (but were discouraged by testimonials from large apps and callback hell) and Go (too new at the time) until they settled for Clojure b/c it was coold and had first-class quality driver for Cassandra (which alone got the performance 10* up).<br><br>They liked Leiningen (even for a Java app) and simple multithreading with pmap. Internally the app uses RabbitMQ.<br><br>Currently replacing REST in devices-server communication with better <a href="https://mqtt.org/">Message Queue Telemetry Transport (MQTT)</a> and<br><br>Wins
<ul>
	<li>Powerful abstractions - immutable data structures, Lisp power, ....</li>
	<li>Much more declarative than Rails</li>
	<li>Language aesthetics - elegant composability of core functions, ...</li>
	<li>Much better performance than Rails (but then, R. wasn't created for performance)</li>
</ul>
Pains
<ul>
	<li>JVM startup time - partially countd by using <a href="https://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded">Stuart Sierra's Reload workflow</a> to minimize REPL restarts</li>
	<li>Hard to read / use stack traces (especially from anonymous functions in lazy collections)</li>
	<li>It is easy to get confusing version clashes in Leiningen when an app and its dependency depend on different versions of the same lib - whatever lands first on classpath is loaded (some lein. plugins may help?)</li>
	<li>Tooling is most mature around Emacs</li>
	<li>No debugger =&gt; println-based troubleshooting (ritz isn't there yet) (my tip: see <a href="https://github.com/MichaelDrogalis/night-vision">night-vision.goggles/introspect-ns!</a>)</li>
</ul>
<h3>Clifton Cunningham (CEO) &amp; Jon Pither (dev): Newspaper Massacre</h3>
Lot of inspiring stuff here. Daily Mail had 14 years old legacy up with intertwined CMS, publishing platform, and Oracle DB, over 300k LoC of Java/JSP/JS that everybody feared to touch. They did two great things: (1) The CEO decided to foster teams that take end-to-end ownership,  have minimal make-your-own process, do not fear change. (2) They modified the old system to publish events via messaging (initially Mule) whenever anything important happened (new article, ...), these were stored together with the data as JSON in ElasticSearch.<br><br>Thanks to that, Jon &amp; Co. were able to create a Clojure app proof of concept that was able to render the non-trivial front page of Daily Mail in a week, without coupling to the old system. During the following 6 months, they were able to replace the publishing part of the software that has grown for 14 years.<br><br>Technologies:
<ul>
	<li><a href="https://mustache.github.io/">Moustache</a> for templating - it is cross-language, can also render in the browser for more dynamism, and is fron-end dev friendly</li>
	<li>Zookeeper and its Clojure wrapper <a href="https://avout.io/">Avout</a> for shared configuration (=&gt; every service has atom(s) that get updated when the config is changed, can use Clojure's <a href="https://clojuredocs.org/clojure_core/clojure.core/add-watch">add-watch</a> on the atoms to be able to react to the changes</li>
	<li>Riemann with Logstash and Graphite for monitoring exceptions and other events of interest</li>
	<li>Redis as a golden hammer :) for different things</li>
	<li>Memcached for pure data caching (which is perhaps not an ideal situation)</li>
	<li>Apache Camel (that replaced Mule) for integration and messaging (though not really happy with it)</li>
</ul>
Future plans/ideas:
<ul>
	<li>Use Datomic instead of ElasticSearch - it has a define schema (x amorphic JSON), it is possible to get snapshot of data at any time for troubleshooting, ...</li>
	<li>core.contracts and perhaps core.typed or Prismatic's Schema to make the data more defined</li>
</ul>
Some of the code lives at <a href="https://github.com/mailonline">https://github.com/mailonline</a>
<h3>Ryan Greenhall: Templating In Clojure</h3>
Noteworthy:
<ul>
	<li>Hiccup not suitable for fron-end devs not comfortable with Clojure</li>
	<li>Enlive breaks easily when relying on selectors and the structure of a page changes (though, reportedly, the proper use is predictor-based rather then selector-based)</li>
	<li><a href="https://github.com/ryangreenhall/clj-jade">clj-jade</a> - Java+clojure implementation of <a href="https://jade-lang.com/">Jade</a> templating, which is, if I understand it correctly, a combination of <a href="https://en.wikipedia.org/wiki/Haml">HAML</a> (conscise syntax for HTML) and minimalistic templating</li>
	<li>Personally, I would also give a try to <a href="https://mustache.github.io/">Mustache</a> for Clojure (if you can live with HTML's verbosity)</li>
</ul>
Related and interesting: <a href="https://github.com/bitemyapp/clojure-template-benchmarks">clojure-template-benchmarks</a> - many templating libs included.
<h3>Christophe Grand: Megarefs</h3>
GitHub: <a href="https://github.com/cgrand/megaref">https://github.com/cgrand/megaref</a><br><br>Far more detailed <a href="https://teropa.info/blog/2013/10/16/megarefs.html">notes by Tero Parviainen</a>.<br><br>As you might know, Datomic uses a single atom to hold its state. I have been wondering how to manage my state as a huge map in one atom (and atoms referenced by an atom seemed strange ...). Now Christophe has clearly thought about the same and came with a nice solution.<br><br>In the first iteration, megaref was just a combination of update-in and swap! but later got better by trying to avoid update conflicts on unrelated branches of the state tree/map (e.g. [:a :b] and [:a :c] as oppossed to the conflicting [:a :b] and [:a :b :c]) and being smart about what to protect against concurrenct access. In the backround, it can use atoms, STM, or (coming) agents to handle concurrent access to the map.<br><br>Unless your app is CPU bound, it is worth giving a try for holding its state.
<h3>Frazer Irving: Enterprise integration with Clojure</h3>
About the <a href="https://www.amazon.com/o/asin/0321200683/ref=nosim/enterpriseint-20">Enterprise Integration Patterns</a> book: written by smart people but in a boring style and very prescriptive (i.e. "this is how to do it" instead of a discussion)<br><br>Experiences with integration platoforms/tools from Daily Mail:
<ul>
	<li>Initially used Mule - but nobody understood or wanted to understand its tons of Spring XML files</li>
	<li>Currently using Apache Camel and its <a href="https://github.com/clumsyjedi/clj-camel-holygrail">Holy Grail</a> Clojure DSL (with ActiveMQ underneath) but not perfectly happy with it
<ul>
	<li>Camel implements Enterprise Integration Patterns from the book; the disadvantage is that it constraints thinking to these patterns only</li>
	<li>Hard things are hard (inst. of "possible")</li>
	<li>Positive: mature, plenty of adapters, ...</li>
</ul>
</li>
	<li>Tried following clojure tools
<ul>
	<li><a href="https://github.com/ztellman/lamina">Lamina</a> (a tool for "describing and analyzing streams of data") - not primarily for enteprise integration (EI); implements channels but currenlty supports only HTTP and websockets (not JMS, ...); good: visualization of what happened to a message, i.e. what &amp; why it went though</li>
	<li><a href="https://github.com/clojurewerkz/eep">EEP</a> (Embedded Event Processing) - young and experimental, not designed for EI</li>
</ul>
</li>
</ul>
++++
