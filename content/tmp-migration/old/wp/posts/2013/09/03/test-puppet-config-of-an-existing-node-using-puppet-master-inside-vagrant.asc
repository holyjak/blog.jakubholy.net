{:title
 "Test Puppet config of an existing node using Puppet Master via Vagrant",
 :date "2013-09-03",
 :layout :post,
 :tags ["DevOps" "tool"],
 :tags-orig ["DevOps" "puppet" "vagrant"],
 :categories ["Testing"],
 :extra-css #{}
}

++++
Are you using Puppet in the client-server setup and want to test the configuration for a particular node without actually changing it? You can do that by fooling Puppet Master into believing that a Vagrant virtual machine (VM) is that node and applying it there. The process is simple: you essentially only need to get the nodes' cert/private key and supply them to Puppet (and likely make sure that the hostname <em>puppet</em> can be resolved from within the VM). Let's see it in detail.<br><br><!--more--><br><br>PS: Credit to my colleague Mikael for discovering the cert+key trick.
<h2>Solution</h2>
I suppose that you have already installed <a href="https://www.vagrantup.com/">Vagrant</a> and <a href="https://www.virtualbox.org/">Virtual Box</a> (VMWare should/could work too), if not, install them and read <a href="https://docs.vagrantup.com/v2/getting-started/index.html">Getting Started</a>.<br><br>Create the Vagrant VM to use for the test. In some directory, which I will call <em>&lt;vagrantdir&gt;</em> from now on, run <em>vagrant init</em> to create a <em>Vagrantfile</em>.<br><br>Next, get <code>/var/lib/puppet/ssl/certs/&lt;hostname&gt;.pem</code> and <code>/var/lib/puppet/ssl/private_keys/&lt;hostname&gt;.pem</code> from the target node. Put them into <em>&lt;vagrantdir&gt;/ssl/(certs|private_keys)/&lt;hostname&gt;.pem</em>. The directory will be visible inside the VM as <em>/vagrant/ssl</em>.<br><br>Update the <em>Vagrantfile</em> to use the <a href="https://www.vagrantbox.es/">OS box</a> or <a href="https://cloud-images.ubuntu.com/vagrant/">Ubuntu base box</a> you want (e.g. <em>config.vm.box_url = "http://files.vagrantup.com/precise32.box"</em>) and set up the following provisioners (run in order of appearance), replacing <em>targetnode.example.com</em> with the actual hostname of the target node and <em>puppet.example.com</em> with the Puppet Master's hostname:<br><br><pre><code>
## Vagrantfile snippet
  # 1) Get the signed certificate needed to connect to Puppet Master as the given node
  # Get it from /var/lib/puppet/ssl/certs/&lt;hostname&gt;.pem
  # Note: A fresh agent has only private and public key (gets cert when signed?)
 config.vm.provision :shell,
      :inline =&gt; &quot;mkdir -p /etc/puppet/ssl; cp -r /vagrant/ssl /etc/puppet&quot;
  config.vm.provision &quot;puppet_server&quot; do |puppet|
    # BEWARE: Into /etc/hosts, add &lt;puppet master's IP&gt; puppet so that file://[puppet]/.. can work
    puppet.puppet_server = &quot;puppet.example.com&quot;
    puppet.puppet_node = &quot;targetnode.example.com&quot;
    puppet.options = [&quot;--no-daemonize&quot;, &quot;--onetime&quot;, &quot;--verbose&quot;, &quot;--debug&quot;] # add &quot;--env&quot;, &quot;myEnvName&quot; to test a particular environment
  end
··
  config.vm.hostname = &quot;targetnode.example.com&quot;
</code></pre><br><br>When you run <em>vagrant up</em>, the VM should come up, get its keys, connect to the Puppet Master, and obtain and apply the configuration from it.
<h2>Caveats</h2>
The VM runs on your computer so it likely won't have access to the same network resources (services etc.) as the real node. It will also likely have different devices (important if you run in EC2 and mount EBS disks etc.) unless you manage to configure Virtual Box / the OS to be more like what Puppet expects.<br><br>For example in our case we needed to add "<em>ln -sf /bin/true /sbin/dhclient</em>" to the shell provisioner to mock dhclient because otherwise it was run by our setup and got blocked forever.<br><br>If you happen to replace <em>/etc/sudoerrs</em>, you will need to re-enable the user <em>vagrant</em> (who is in the <em>admin</em> group) to run everything without providing a password. One way to do it is to run the following command from inside the VM (you could even add a third provisioner to run it after Puppet but it would not be run if Puppet failed):<br><br><pre><code>echo -e &quot;vagrant\n&quot; | sudo -S sed -i '$ a\vagrant  ALL=(ALL) NOPASSWD:ALL' /etc/sudoers</code></pre>
<h2>Note on versions</h2>
Tested with Puppet 2.7.x, Vagrant 1.2.7, Virtual Box  4.2.16 on OS X 10.7.
++++
