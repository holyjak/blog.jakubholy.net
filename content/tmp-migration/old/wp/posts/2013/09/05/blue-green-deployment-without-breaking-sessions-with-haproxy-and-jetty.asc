{:title
 "Webapp Blue-Green Deployment Without Breaking Sessions/With Fallback With HAProxy",
 :date "2013-09-05",
 :layout :post,
 :tags ["java" "DevOps"],
 :tags-orig ["continuous_deployment" "DevOps" "java"],
 :categories ["General"],
 :extra-css #{}
}

++++
<strong>Use case</strong>: Deploy a new version of a webapp so that all new users are sent to the new
version while users with open sessions continue using the previous version
(so that they don't loose their precious session state). Users of the new version
can explicitely ask for the previous version in the case that it doesn't work as expected and vice versa.<br><br><strong>Benefits</strong>: Get new features to users that need them as soon as possible without affecting
anybody negatively and without risking that a defect will prevent users from achieving their goal
(thanks to being able to fall back to the previous version).<br><br><!--more--><br><br>An alternative to sticky sessions would be to use an external, shared session store (for example Redis). But the overhead and complexity of that wasn't worth the gains in this case.
<h2>Implementation</h2>
<h3>Configuration</h3>
We will run two instances of our service, on two different ports, with HAProxy in front of them. We will use HAPRoxy's health checks to trick it into believing that one of the instances is partially unwell. HAProxy will thus send it only the existing sessions, while sending all new ones to the other, "fully healthy," instance.<br><br>Notice that even though I run both HAProxy and the instances on the same machine, they could also live on different ones.<br><br>There are actually two solutions. The first one, described here, is simpler, but clients will experience a downtime of ~ 5 sec when an instance actually really is not available (f.ex. crashes). The other solution doesn't suffer from this drawback but requires the ability to reach the instance through two different ports (or perhaps hostnames) for the health checks. Both <a href="https://haproxy.1wt.eu/download/1.3/doc/architecture.txt">solutions are well described in HAProxy's "architecture" document</a>: "<em>4.1 Soft-stop using a file on the servers</em>" (though we will use a dynamic servlet instead of a static file) and "<em>4.2 Soft-stop using backup servers</em>".<br><br>Now go to GitHub to see <a href="https://github.com/holyjak/experiment-blue-green-jetty">the proof of concept implementation</a> and read the two sections, 4.1 and 4.2, referenced above. The implementation uses a simple Java webapp running on Tomcat and can be run either on a Linux machine or via <a href="https://www.vagrantup.com/">Vagrant</a>. Follow the instructions and information in the readme.<br><br>The webapp needs to implement support for settable health checks. In our case, the servlet enables POSTs to <code>/health/(enable|disable)</code> to set the availability status and HEAD requests to <code>/health</code> that return either OK or SERVICE UNAVAILABLE based on the status.
<h3>Deployment</h3>
The deployment is simple:
<ol>
	<li>Figure out which zone - blue or green - is the current and the previous one - f.ex. by having recorded it into a file.</li>
	<li>(Optional) Check that the previous instance has no active sessions and take it down. (Not implemented in the PoC.)</li>
	<li>Deploy over the previous instance (copy the new binary from a remote repository, S3 or whatever)</li>
	<li>Start the newly deployed instance and verify that it is well, record its zone as the active one.</li>
	<li>Switch over: Tell the old instance to start reporting to HAProxy that it is unavailable and the new one to report itself as healthy.</li>
	<li>Drink a cocktail and enjoy.</li>
</ol>
See the actual <a href="https://github.com/holyjak/experiment-blue-green-jetty/blob/master/haproxy-vm/deploy-new-build.sh">implementation in the PoC project</a>.
<h3>Let me see!</h3>
An old version of the app running in the blue zone (localhost:8080, reloaded in a browser tab where it was opened before the new deployment):<br><br><a href="https://lh6.googleusercontent.com/-LUNJMI0O-zk/UipRcxIUeTI/AAAAAAAACp8/onSVyOzOgME/s800/Blue-GreenPoC-old.jpg"><img alt="" src="https://lh6.googleusercontent.com/-LUNJMI0O-zk/UipRcxIUeTI/AAAAAAAACp8/onSVyOzOgME/s800/Blue-GreenPoC-old.jpg" width="800" height="86" /></a> PoC - old version of the app<br><br>A new version of the app in the green zone (localhost:8080, in a new browser):<br><br><a href="https://lh4.googleusercontent.com/-2rRlE3pBGJU/UjmfEgDECcI/AAAAAAAACq8/wnxRJ8tWuEg/s800/Blue-GreenPoC-new-1.jpg"><img alt="" src="https://lh4.googleusercontent.com/-2rRlE3pBGJU/UjmfEgDECcI/AAAAAAAACq8/wnxRJ8tWuEg/s800/Blue-GreenPoC-new-1.jpg" width="800" height="83" /></a> PoC - the new version of the app<br><br>A part of HAProxy's stats page reporting about the zones (localhost:8081):<br><br><a href="https://lh6.googleusercontent.com/-faEc0DWsiQ8/UipRcylsXhI/AAAAAAAACp0/_qZX8dLVlg4/s800/Blue-GreenPoC-haproxy-stats.jpg"><img class="  " alt="" src="https://lh6.googleusercontent.com/-faEc0DWsiQ8/UipRcylsXhI/AAAAAAAACp0/_qZX8dLVlg4/s800/Blue-GreenPoC-haproxy-stats.jpg" width="800" height="85" /></a> PoC - HAProxy's stats page with the old version (blue) pretending to be down so that new requests go to green
<h2>Credits</h2>
Thanks to my colleague Stein Kvarud for the inspiration to use HAProxy.
<h2>Conclusion</h2>
It is very easy to set up downtime-less blue-green deployment that doesn't break existing sessions and provides the ability to go back to the previous version.
++++
