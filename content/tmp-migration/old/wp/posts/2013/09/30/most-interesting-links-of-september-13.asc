{:title "Most interesting links of September '13",
 :date "2013-09-30",
 :layout :post,
 :tags
 ["book"
  "clojure"
  "design"
  "JavaScript"
  "methodology"
  "DevOps"
  "library"
  "performance"
  "data"],
 :tags-orig
 ["agile"
  "aws"
  "bigdata"
  "book"
  "clojure"
  "design"
  "ethics"
  "framework"
  "JavaScript"
  "lean"
  "performance"
  "shell"
  "toyota"],
 :categories
 ["General" "Languages" "Testing" "Tools" "Top links of month"],
 :extra-css #{}
}

++++
<h2>Recommended Readings</h2>
<ul>
	<li><a href="https://highscalability.com/blog/2013/9/13/stuff-the-internet-says-on-scalability-for-september-13-2013.html">Stuff The Internet Says On Scalability For September 13, 2013</a> - a collection of interesting performance related articles with summaries (via <a href="twitter.com/_dagi">@_dagi</a>)</li>
	<li><a href="https://www.thoughtsofaleanguy.com/2013/07/can-you-copy-culture-nummi-story.html">Can you copy a culture? The NUMMI story</a> (audio/<a href="https://www.thisamericanlife.org/radio-archives/episode/403/transcript">transcript</a>) - how the GM factory with the worst workforce has been turned around via a good application of <a href="https://www.toyota-global.com/company/vision_philosophy/toyota_production_system/">Toyota Production System</a> - "a truly inspiring story of human potential and how systems can be designed to bring the best or worst of of people." And how GM failed to learn from it and to copy Toyota's culture.</li>
	<li><a href="https://www.reactivemanifesto.org/">The Reactive Manifesto</a> - why to write reactive SW - "<em>Reactive applications represent a balanced approach to addressing a wide range of contemporary challenges in software development. Building on an event-driven, message-based foundation, they provide the tools needed to ensure scalability and resilience. On top of this they support rich, responsive user interactions. We expect that a rapidly increasing number of systems will follow this blueprint in the years ahead.</em>"</li>
	<li><a href="https://moot.it/blog/technology/frameworkless-javascript.html">Frameworkless JavaScript – Why Angular, Ember, or Backbone don't work for us</a> [Moot discussion platform] (via <a href="https://javascriptweekly.com/">JavaScriptWeekly</a>) Me: Frameworks are not always evil, but are likely overused and there are good cases when rolling your own solution is the best way. Why in Moot? Because the want a minimal API (no framework methods), small code size, small and familiar code base, no dependency hell and external package updates, no lock-in to technology that will be gone in few years, need WebSockets not REST. "<em>Moot uses native pushState for managing URLs, John Resig's "<a href="https://ejohn.org/blog/javascript-micro-templating/">micro templating</a>" for views, and internal communication between model and views happens with a custom event library. There is no router or automatic data-binding.</em>" The looked at Angular, Ember, Backbone. "<em>As a result of our combined perfectionism and minimalism, Moot is an extremely lightweight, manageable, and independent web application [..]</em>"</li>
	<li>NYT: <a href="https://mobile.nytimes.com/2013/09/18/business/global/eiji-toyoda-promoter-of-toyota-way-dies-at-100.html">Eiji Toyoda, Promoter of the Toyota Way and Engineer of Its Growth, Dies at 100</a> - learn about the life of one of the founders of lean thinking</li>
	<li>Gojko Adzic: <a href="https://gojko.net/2013/09/01/how-we-solved-our-1-product-management-problem/">How we solved our #1 product management problem</a> - valuable experience of false assumptions, learning from users, and a much helpful UI remake: even if you build a product to scratch your itch, you have to test it with real users</li>
</ul>
Big data
<ul>
	<li><a href="https://www.chrisstucchio.com/blog/2013/hadoop_hatred.html">Don't use Hadoop - your data isn't that big</a> - a great post about the downside of Hadoop and that there are much better options (large disks, large RAM, Pandas/R/Postgres) for data up to few TBs. "In addition to being more difficult to code for, Hadoop will also nearly always be slower than the simpler alternatives."</li>
	<li><a href="readwrite.com/2013/09/18/gartner-on-big-data-everyones-doing-it-no-one-knows-why"> Gartner On Big Data: Everyone's Doing It, No One Knows Why</a> - golf talk / hype -driven initiatives FTW! "According to a recent Gartner report, 64% of enterprises surveyed indicate that they're deploying or planning Big Data projects. Yet <em>even more acknowledge that they still don't know what to do with Big Data</em>."</li>
	<li><a href="https://www.draconianoverlord.com/2013/01/22/what-makes-spark-exciting.html">What makes Spark exciting</a> - why it might be a good replacement for Hive/Hadoop, based on experiences with H/H: "Hive has served us well for quite a while now. [...]  That said, it has gotten to the point where Hive is more frequently invoked in negative contexts (“damn it, Hive”) than positive. (Primarily due to being hard to test, hard to extend.)" "We had heard about Spark, but did not start trying it until being so impressed by the Spark presentation at AWS re:Invent [..] that we wanted to learn more. [..] Spark, either intentionally or serendipitously, addresses both of Hive’s primary shortcomings, and turns them into huge strengths. (Easy to test, extend.) [..] I find the codebase small and very easy to read, [..] –which is a nice consolation compared to the daunting codebases of Hadoop and Hive." Cons.: Spark is only pre-1.0, the author hasn't yet tested it heavily.</li>
	<li><a href="https://www.lifehack.org/articles/work/10-ways-make-your-office-fun-work.html">10 Ways to Make Your Office Fun To Work In</a> - because we spend there plenty of our time so why not have a pleasant/cosy, inspiring environment? Some tips: plants, not-your-boring-enteprprise-look-and-feel, open it to the nature (I <a href="https://cdn-5.lifehack.org/wp-content/files/2013/09/SelgasCanoOffice.jpg">want this!</a>), design it as home, not office, provide play space (I am too into work to want to play but having a resting place for a nap is st. I'd love).</li>
</ul>
Books
<ul>
	<li>Book: <a href="https://aosabook.org/en/index.html">The Architecture of Open Source Applications</a> (via <a href="https://twitter.com/rmz/status/380498719629512704">@rmz</a>) - learn by studying architectures of existing systems - "<em>In these two books, the authors of four dozen open source applications explain how their software is structured, and why. What are each program's major components? How do they interact? And what did their builders learn during their development?</em>"</li>
	<li>Book: <a href="https://pragprog.com/book/pb7con/seven-concurrency-models-in-seven-weeks">Seven Concurrency Models in Seven Weeks: When Threads Unravel</a> - "<em>how to exploit different parallel architectures to improve your code’s performance, scalability, and resilience</em>" - threads &amp; locks, actors, FP + immutability/futures/promisses, Software Transactional Memory etc., GPU, MapReduce on clusters, ... (<a href="https://media.pragprog.com/titles/pb7con/intro.pdf">intro</a>) Personally, I would prefer from theory to practice approach and mention of <a title="Communicating sequential processes" href="https://en.wikipedia.org/wiki/Communicating_sequential_processes">CSP</a> (-&gt; Go's channels, core.async) and more.</li>
	<li><a href="https://www.linkedin.com/today/post/article/20130925133311-291225-amazon-ceo-jeff-bezos-had-his-top-execs-read-these-three-books?_mSplash=1">Books Amazon CEO requires his top execs to read</a> (<a href="https://www.amazon.com/dp/0060833459/?tag=googhydr-20&amp;hvadid=4236656515&amp;hvpos=1t1&amp;hvexid=&amp;hvnetw=g&amp;hvrand=676821285912340695&amp;hvpone=12.18&amp;hvptwo=&amp;hvqmt=e&amp;hvdev=c&amp;ref=pd_sl_90ud7q00cb_e" target="_blank">The Effective Executive</a> by Peter Drucker, <a href="https://www.amazon.com/Innovators-Solution-Creating-Sustaining-Successful/dp/1578518520/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1380049194&amp;sr=1-1&amp;keywords=The+Innovator%27s+Solution+by+Clayton+Christensen" target="_blank">The Innovator's Solution</a> by Clayton Christensen, <a href="https://www.amazon.com/Goal-Process-Ongoing-Improvement/dp/0884271951/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1380049210&amp;sr=1-1&amp;keywords=The+Goal+by+Eliyahu+Goldratt" target="_blank">The Goal</a> by Eliyahu Goldratt)</li>
</ul>
Other
<ul>
	<li><a href="https://m.phys.org/news/2013-09-stanford-carbon-nanotube-technology.html">Stanford engineers build computer using carbon nanotube technology</a> (via <a href="https://twitter.com/RiczWest"><s>@</s>RiczWest</a>)</li>
	<li>NYT: <a href="https://mobile.nytimes.com/blogs/opinionator/2013/09/15/the-banality-of-systemic-evil/">The Banality of Systemic Evil</a> - a good article about human tendency to "obey the system" thus potentially causing evil - and thus the need to resist the system, as heroic individuals such as Snowden, Hammond, Schwartz, Manning. See the famous <a href="https://en.wikipedia.org/wiki/Eichmann_in_Jerusalem">Eichmann in Jerusalem</a> for how "doing your job" can create evil - "<em>[..] what happens when people play their “proper” roles within a system, following prescribed conduct with respect to that system, while remaining blind to the moral consequences of what the system was doing — or at least compartmentalizing and ignoring those consequences.</em>" (Tip: The book <a href="https://www.amazon.com/Moral-Mazes-World-Corporate-Managers/dp/0199729883">Moral Mazes</a> explores the ethics of decision making within several corporate bureaucracies =&gt; mid-managers rules of life: (1) never go around your boss, (2) tell the boss what she wants to hear, (3) drop what she wants dropped, (4) anticipate what the boss wants so that she doesn't need to act as a boss to get it, (5) do not report something the boss does not want reported, cover it up; the the job &amp; keep your mouth shut.) "<em>The bureaucracy was telling him [Snowden] to shut up and move on (in accord with the five rules in “Moral Mazes”), but Snowden felt that doing so was <a href="https://www.policymic.com/articles/47355/edward-snowden-interview-transcript-full-text-read-the-guardian-s-entire-interview-with-the-man-who-leaked-prism">morally wrong</a>.</em>" "<em>[..] there can be no expectation that the system will act morally of its own accord. Systems are optimized for their own survival and preventing the system from doing evil may well require breaking with organizational niceties, protocols or laws.</em>"</li>
	<li><a href="https://www.fairphone.com/">Fairphone</a> - "<em>A seriously cool smartphone that puts social values first</em>" (likely the only one not built by poorly paid workers and creating too much ecological burden), for just €325. You can see detailed <a href="https://www.fairphone.com/wp-content/uploads/2013/09/Fairphone_Cost_Breakdown_and_Key_Sept2013.pdf">cost breakdown</a>, <a href="https://www.fairphone.com/wp-content/uploads/2013/04/20130910_List-of-Suppliers.pdf">list of suppliers</a>, <a href="https://buy-a-phone-start-a-movement.fairphone.com/specs/">specs</a>, and essentially everything. This is, in my opinion, super cool! Go and <a href="https://www.fairphone.com/#story">read the story!</a></li>
</ul>
<h2>Clojure Corner</h2>
<ul>
	<li><a href="https://github.com/mcohen01/amazonica">Amazonica</a> - "A comprehensive Clojure client for the entire Amazon AWS api."</li>
	<li>Talk <a href="https://www.infoq.com/presentations/ritz-clojure">Ritz, The Missing Clojure Tooling</a> (40min, 9/2013) - thanks to this I finally understood how to use Ritz but it still seems not to work well, f.ex. setting a breakpoint always reported "Set 0 breakpoints" (lein ritz/middleware 0.7.0, nrepl-ritz.el 0.7.1); according <a href="https://clojure-log.n01se.net/date/2013-08-18.html#03:00a">to callen</a>, debug-repl is simpler and nicer if you only care about local vars and evaluation. To try ritz: use M-x nrepl-ritz-jack-in, then M-x nrepl-ritz-break-on-exception, exec. f.ex. "(/ 1 0)". In the poped-up buffer, t or enter to show frame locals, e to eval a code in the context of the frame etc. If you managed to trigger the debug buffer through a breakpoint, the actions lists would contain STEP etc. (See fun. nrepl-ritz-line-breakpoint)</li>
	<li>C. Grand's <a href="https://github.com/cgrand/spreadmap">spreadmap</a> - "library to turn Excel spreadsheets in persistent reactive associative structures" =&gt; access content via map functions; changing a value updates formula cells using it</li>
	<li><a href="https://hugoduncan.org/post/alembic_reloads_your_project_clj_dependencies/">Alembic Reloads your Leiningen project.clj Dependencies</a> - add a dependency to your project.clj w/o needing to restart your REPL (just call <em>(alembic.still/load-project)</em>, provided you have it in your lein dependencies). Limitations: cannot remove deps or change versions.</li>
	<li><a href="https://programming-puzzler.blogspot.no/2013/09/defeating-stack-overflows.html">Defeating stack overflows</a> - techniques for transforming mutually recursive calls etc. into something that won't blow the stack - "Priming the pump" (memoize subresults first), core.async</li>
	<li>Google Groups: <a href="https://groups.google.com/forum/m/#!msg/clean-code-discussion/S2NQ65OZ0b8/phZ6A4AjrlQJ">Clean Architecture for Functional Programming</a> - How do the Clean Architecture and the Clean Code best practices apply to FP (Clojure/Haskell)? Some points: OOP isn't worse than FP, only people do class-oriented programming instead; OO better e.g. for UIs, combining them (func. core, imperative shell) can be sometimes best. Some clean arch. patterns are actually more like functions - "<em>Interactors and Presenters, for example, do not maintain any state of their own.  Even those objects that do imply some kind of state, such as entities and gateways, keep that state hidden behind boundaries and present a functional interface instead.</em>"</li>
	<li><a href="https://github.com/MichaelDrogalis/night-vision">night-vision</a>: <a href="https://michaeldrogalis.tumblr.com/post/62057930801/handy-super-light-weight-debugging-utility">Handy, super light weight debugging utility</a> - add it to your lein profile and then call <code>(night-vision.goggles/introspect-ns! '&lt;name of ns&gt;)</code> and it will print each entry/exit of a function within the scope of the namespace with the argument/return values</li>
	<li><a href="https://www.lispcast.com/nil-punning">Nil Punning (Or Null Pointers Considered Not So Bad)</a> - a great post about why nil in Clojure is not bad contrary to Java's null (because it is actually an object, you can call functions on it, treat it as false/empty list/map/set, most core functions work on it)</li>
</ul>
<h2>Tools/Libs</h2>
<ul>
	<li><a href="https://bmizerany.github.io/roundup/">Roundup: Shell script test framework</a> (via <a href="https://twitter.com/ruudud">@ruudud</a>) - seems to be simple, easy; see <a href="https://bmizerany.github.io/roundup/roundup.5.html">roundup(5)</a> for more details</li>
</ul>
++++
