{:title
 "Escaping the Zabbix UI pain: How to create a combined graph for a number of hosts using the Zabbix API",
 :date "2013-03-20",
 :layout :post,
 :tags ["DevOps" "python"],
 :tags-orig ["ops" "python" "zabbix"],
 :categories ["General"],
 :extra-css #{}
}

++++
<div id="main-content">
<div><br><br>This post will answer two questions:
<ul>
	<li>How to display the same item, f.ex. Processor load, for a number of hosts on the same graph</li>
	<li>How to avoid getting crazy from all the slow clicking in the Zabbix UI by using its API</li>
</ul>
I will indicate how it could be done with plain HTTP POST and then show a solution using the Python library for accessing the Zabix API.<br><br>The problem we want to solve is to create a graph that plots the same item for a number of hosts that all are from the same Host group but not all hosts in the group should be included.<br><br><!--more-->
<h2 id="EscapingtheZabbixUIpainHowtocreateacombinedgraphforanumberofhostsusingtheZabbixAPI- ZabbixAPI"> Zabbix API</h2>
Zabbix API is a REST API introduced in 1.8 that enables the management of Zabbix resources such as items, triggers, and graphs. The resources are connected together via IDs so you usually need to get a resource by its name, extract its id, and use that to get related resources.<br><br>The <a href="https://www.zabbix.com/documentation/1.8/api" rel="nofollow">API documentation in v1.8</a> is ... lacking so I usually read the <a href="https://www.zabbix.com/documentation/2.2/manual/api/reference" rel="nofollow">v2.2 documentation</a> then check the corresponding page and example in 1.8 and how it will work. The documentation occasionally contains mistakes so don't trust it. (F.ex. <a href="https://www.zabbix.com/documentation/1.8/api/item/get" rel="nofollow">item.get</a>'s <em>filter</em> should be an array but in fact is an object.) It also isn't clear, for get, when fields are ORed and when ANDed and whether you can do anything about it.<br><br>There are multiple libraries for the Zabbix API, I've chosen Python because I like it and the <a href="https://github.com/gescheit/scripts/blob/master/zabbix/zabbix_api.py" rel="nofollow">zabbix_api.py</a> because it seems to be maintained and developed. I had an issue in authorization with it but managed to work around it.
<h3 id="EscapingtheZabbixUIpainHowtocreateacombinedgraphforanumberofhostsusingtheZabbixAPI-UsingtheAPI">Using the API</h3>
<h4 id="EscapingtheZabbixUIpainHowtocreateacombinedgraphforanumberofhostsusingtheZabbixAPI-Authenticationauthorization">Authentication &amp; authorization</h4>
You usually first authenticate with Zabbix and use the auth token you get from it in all subsequent calls.<br><br><strong>Catch</strong>: Zabbix API must be enabled for the user<br><br>The Zabbix user used for communication with the API must be authorized to use the API (there is a check box for that in Zabbix administration). In our configuration this is off by default and, in our case, users must be added to the Zabbix api group.<br><br>If you do not have access, you will be able to authenticate with the API but other requests will fail with "No API access".
<h4 id="EscapingtheZabbixUIpainHowtocreateacombinedgraphforanumberofhostsusingtheZabbixAPI-Commongetattributes">Common get attributes</h4>
The get requests have some <a href="https://www.zabbix.com/documentation/2.2/manual/api/reference_commentary#common_get_method_parameters" rel="nofollow">common attributes</a> such as
<ul>
	<li>output = (extend|shorten|refer|...) - how much to include in the output (refer =&gt; only ids, extend =&gt; as much as possible)</li>
	<li>filter - we will see this below</li>
</ul>
<h2 id="EscapingtheZabbixUIpainHowtocreateacombinedgraphforanumberofhostsusingtheZabbixAPI-Implementation">Implementation</h2>
<h3 id="EscapingtheZabbixUIpainHowtocreateacombinedgraphforanumberofhostsusingtheZabbixAPI-CreatingagraphwithHTTPPOST">Creating a graph with HTTP POST</h3>
You communicate with the API ny posting JSON to it. The easiset thing is to execute
<div>
<div>
<div>
<div id="highlighter_325333">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div title="Hint: double-click to select code">
<div><code>curl -i -n -X POST --header </code><code>"Content-Type: application/json"</code> <code>-d@- https:</code><code>//zabbix.example.com/api_jsonrpc.php</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
and paste the JSON there, add a new line and press Control-D to finish the input.<br><br>Authenticate with Zabbix:
<div>
<div>
<div>
<div id="highlighter_368134">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div title="Hint: double-click to select code">
<div><code>curl -i -n -X POST --header </code><code>"Content-Type: application/json"</code> <code>-d@- https:</code><code>//zabbix.example.com/api_jsonrpc.php</code></div>
<div><code>{</code></div>
<div><code>    </code><code>"jsonrpc"</code><code>: </code><code>"2.0"</code><code>,</code></div>
<div><code>    </code><code>"method"</code><code>: </code><code>"user.authenticate"</code><code>,</code></div>
<div><code>    </code><code>"params"</code><code>: {</code></div>
<div><code>        </code><code>"user"</code><code>: </code><code>"my zabbix username"</code><code>,</code></div>
<div><code>        </code><code>"password"</code><code>: </code><code>"my precious"</code></div>
<div><code>    </code><code>},</code></div>
<div><code>    </code><code>"auth"</code><code>: </code><code>null</code><code>,</code></div>
<div><code>    </code><code>"id"</code><code>: </code><code>0</code></div>
<div><code>}</code></div>
<div><code>=&gt;</code></div>
<div><code>{</code><code>"jsonrpc"</code><code>:</code><code>"2.0"</code><code>,</code><code>"result"</code><code>:</code><code>"2dddea29e1d37b9f90069dd129d7a66d"</code><code>,</code><code>"id"</code><code>:</code><code>0</code><code>}</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<ul>
	<li>I believe the value of id isn't important but you need to provide some to get a reasonable response; 0, 1, 2 work fine.</li>
</ul>
Get all items in the Host group Analytics production, using the auth token:
<div>
<div>
<div>
<div id="highlighter_921932">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div title="Hint: double-click to select code">
<div><code>{</code></div>
<div><code>"jsonrpc"</code><code>:</code><code>"2.0"</code><code>,</code></div>
<div><code>"method"</code><code>:</code><code>"item.get"</code><code>,</code></div>
<div><code>"params"</code><code>:{</code></div>
<div><code>    </code><code>"output"</code><code>:</code><code>"shorten"</code><code>,</code></div>
<div><code>    </code><code>"filter"</code><code>: {</code><code>"description"</code><code>: </code><code>"Processor load15"</code><code>},</code></div>
<div><code>    </code><code>"group"</code><code>: </code><code>"Analytics production"</code><code>,</code></div>
<div><code>    </code><code>"select_hosts"</code><code>: </code><code>"extend"</code><code>,</code></div>
<div><code>    </code><code>"limit"</code><code>: </code><code>10</code></div>
<div><code>},</code></div>
<div><code>"auth"</code><code>:</code><code>"2dddea29e1d37b9f90069dd129d7a66d"</code><code>,</code></div>
<div><code>"id"</code><code>:</code><code>2</code></div>
<div><code>}</code></div>
<div><code>=&gt; [{</code><code>"itemid"</code><code>:</code><code>"40002"</code><code>,</code><code>"hosts"</code><code>:[{</code><code>"maintenances"</code><code>:[..],</code><code>"hostid"</code><code>:</code><code>"10242"</code><code>,</code><code>"proxy_hostid"</code><code>:</code><code>"10381"</code><code>,</code><code>"host"</code><code>:</code><code>"my-server.example.com"</code><code>,</code><code>"dns"</code><code>:</code><code>"my-server.example.com"</code><code>,...}]},{</code><code>"itemid"</code><code>:</code><code>"40003"</code><code>,...</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
Well, we will skip the rest and go to the real fun - the Python API.
<h3 id="EscapingtheZabbixUIpainHowtocreateacombinedgraphforanumberofhostsusingtheZabbixAPI-Creatingagraphwithzabbixapipy">Creating a graph with zabbix_api.py</h3>
Some notes:
<ol>
	<li>I had troubles with authorization, I had to specify user &amp; password both in the constructor (for http basic auth. headers) and call the login method to make it work; in theory, only one of these two shall be necessary. (I might have made a mistake somewhere.)</li>
	<li>There are some advantages over curl such as not needing to specify unimportant attributes such as request id and having automatic mapping between Python lists/dicts and JSON.</li>
</ol>
Before we show the code, let's see how to use it:
<div>
<div>
<div>
<div id="highlighter_238188">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div title="Hint: double-click to select code">
<div><code>bash$ ipython</code></div>
<div><code>In [</code><code>1</code><code>]: %run create_graph.py</code></div>
<div><code>In [</code><code>2</code><code>]: g = ZabbixGrapher(user=</code><code>"my zabbix user"</code><code>, passwd=</code><code>"my precious"</code><code>)</code></div>
<div><code>20</code><code>: url: https:</code><code>//zabbix.example.com/api_jsonrpc.php</code></div>
<div><code>20</code><code>: HTTP Auth enabled</code></div>
<div><code>20</code><code>: Sending: {</code><code>"params"</code><code>: {</code><code>"password"</code><code>: </code><code>"my precious"</code><code>, </code><code>"user"</code><code>: </code><code>"my zabbix user"</code><code>}, </code><code>"jsonrpc"</code><code>: </code><code>"2.0"</code><code>, </code><code>"method"</code><code>: </code><code>"user.authenticate"</code><code>, </code><code>"auth"</code><code>: </code><code>""</code><code>, </code><code>"id"</code><code>: </code><code>0</code><code>}</code></div>
<div><code>20</code><code>: Response Code: </code><code>200</code></div>
<div><code>Logged in, auth: c417623c2d72e0f14ddab044429b80e7</code></div>
<div></div>
<div><code>In [</code><code>3</code><code>]: g.create_graph(</code><code>"CPU iowait on data nodes(avg1)"</code><code>, item_key=</code><code>"system.cpu.util[,iowait,avg1]"</code><code>, item_descr = None, host_group = </code><code>"Analytics staging"</code><code>, hostname_filter_fn = lambda dns: </code><code>"-data"</code> <code>in dns)</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
The long, scary code itself:
<div>
<div><b>create_graph.py</b></div>
<pre><code>
import logging
import sys<br><br>from zabbix_api import ZabbixAPI, ZabbixAPIException<br><br>BOLD = &quot;&#092;&#048;33[1m&quot;
RESET = &quot;&#092;&#048;33[0;0m&quot;<br><br>class Palette:
    last_idx = 0
    colors = [&quot;C04000&quot;, &quot;800000&quot;, &quot;191970&quot;, &quot;3EB489&quot;, &quot;FFDB58&quot;, &quot;000080&quot;,
              &quot;CC7722&quot;, &quot;808000&quot;, &quot;FF7F00&quot;, &quot;002147&quot;, &quot;AEC6CF&quot;, &quot;836953&quot;,
              &quot;CFCFC4&quot;, &quot;77DD77&quot;, &quot;F49AC2&quot;, &quot;FFB347&quot;, &quot;FFD1DC&quot;, &quot;B39EB5&quot;,
              &quot;FF6961&quot;, &quot;CB99C9&quot;, &quot;FDFD96&quot;, &quot;FFE5B4&quot;, &quot;D1E231&quot;, &quot;8E4585&quot;,
              &quot;FF5A36&quot;, &quot;701C1C&quot;, &quot;FF7518&quot;, &quot;69359C&quot;, &quot;E30B5D&quot;, &quot;826644&quot;,
              &quot;FF0000&quot;, &quot;414833&quot;, &quot;65000B&quot;, &quot;002366&quot;, &quot;E0115F&quot;, &quot;B7410E&quot;,
              &quot;FF6700&quot;, &quot;F4C430&quot;, &quot;FF8C69&quot;, &quot;C2B280&quot;, &quot;967117&quot;, &quot;ECD540&quot;,
              &quot;082567&quot;]<br><br>    def next(self):
        self.last_idx = (self.last_idx + 1) % len(self.colors)
        return self.colors[self.last_idx]<br><br>class ZabbixGrapher:<br><br>    def __init__(self, user, passwd, log_level=logging.INFO):<br><br>        try:
            # I had to spec. user+psw here to use Basic http auth to be able
            # to log in even though I supply them to login below;
            # otherwise the call failed with 'Error: HTTP Error 401: Authorization Required'
            self.zapi = ZabbixAPI(
                server=&quot;https://zabbix.example.com&quot;,
                path=&quot;/api_jsonrpc.php&quot;,
                user=user, passwd=passwd,
                log_level=log_level) # or DEBUG<br><br>            # BEWARE: The user must have access to the Zabxi API enabled (be
            # in the Zabbix API user group)
            self.zapi.login(user, passwd)
            print &quot;Logged in, auth: &quot; + self.zapi.auth
        except ZabbixAPIException as e:
            msg = None
            if &quot;&quot; in str(e):
                msg = &quot;Connection to Zabbix timed out, it's likely having temporary problems, retry now or later'&quot;
            else:
                msg = &quot;Error communicating with Zabbix. Please check your authentication, Zabbix availability. Err: &quot; + str(e)<br><br>            print BOLD + &quot;\n&quot; + msg + RESET
            raise ZabbixAPIException, ZabbixAPIException(msg), sys.exc_info()[2]<br><br>    def create_graph(self,
                     graph_name=&quot;CPU Loads All Data Nodes&quot;,
                     item_descr=&quot;Processor load15&quot;,
                     item_key=None,
                     host_group=&quot;Analytics production&quot;,
                     hostname_filter_fn=lambda dns: &quot;-analytics-prod-data&quot; in dns and (&quot;-analytics-prod-data01&quot; in dns or dns &gt;= &quot;aewa-analytics-prod-data15&quot;),
                     #show_legend = True - has no effect (old Z. version?)
                     ):<br><br>        palette = Palette()
        try:<br><br>            items = self.get_items(item_descr = item_descr, item_key = item_key, host_group = host_group)<br><br>            if not items:
                raise Exception(&quot;No items with (descr=&quot; + str(item_descr) +
                                &quot;, key=&quot; + str(item_key) + &quot;) in the group '&quot; +
                                host_group + &quot;' found&quot;)<br><br>            # Transform into a list of {'host':.., 'itemid':..} pairs,
            # filter out unwanted hosts and sort by host to have a defined order
            item_maps = self.to_host_itemid_pairs(items, hostname_filter_fn)
            item_maps = sorted(
                filter(lambda it: hostname_filter_fn(it['host']), item_maps),
                key = lambda it: it['host'])<br><br>            if not item_maps:
                raise Exception(&quot;All retrieved items filtered out by the filter function; orig. items: &quot; +
                                str(item_maps))<br><br>            # The graph will be created on the 1st item's host:
            graph_host = item_maps[0]['host']<br><br>            ## CREATE GRAPH
            # See https://www.zabbix.com/documentation/2.0/manual/appendix/api/graph/definitions
            graph_items = []<br><br>            for idx, item in enumerate(item_maps):
                graph_items.append({
                        &quot;itemid&quot;: item['itemid'],
                        &quot;color&quot;: palette.next(),
                        &quot;sortorder&quot;: idx
                        })<br><br>            graph = self.zapi.graph.create({
                    &quot;gitems&quot;: graph_items,
                    &quot;name&quot;: graph_name,
                    &quot;width&quot;:900,
                    &quot;height&quot;:200
                    #,&quot;show_legend&quot;: str(int(show_legend))
                    })<br><br>            print &quot;DONE. The graph %s has been created on the node %s: %s.&quot; % (graph_name, graph_host, str(graph))
        except Exception as e:
            msg = None
            if &quot;No API access while sending&quot; in str(e):
                msg = &quot;The user isn't allowed to access the Zabbix API; go to Zabbix administration and enable it (f.ex. add the group API access to the user)'&quot;
            else:
                msg = &quot;Error communicating with Zabbix. Please check your request and whether Zabbix is available. Err: &quot; + str(e)<br><br>            print BOLD + &quot;\n&quot; + msg + RESET
            raise type(e), type(e)(msg), sys.exc_info()[2]<br><br>    def get_items(self, item_descr = None, item_key = None, host_group = None):
        if not item_descr and not item_key:
            raise ValueError(&quot;Either item_key or item_descr must be provided&quot;)<br><br>        ## GET ITEMS to include in the graph
        # See (Zabbix 2.0 so not 100% relevant but better doc)
        # https://www.zabbix.com/documentation/2.0/manual/appendix/api/item/get
        filters = {}
        if item_descr: filters[&quot;description&quot;] = item_descr
        if item_key: filters[&quot;key_&quot;] = item_key<br><br>        return self.zapi.item.get({
                &quot;output&quot;:&quot;shorten&quot;,
                &quot;filter&quot;: filters,
                &quot;group&quot;: host_group,
                &quot;select_hosts&quot;: &quot;extend&quot;
                })<br><br>    @staticmethod
    def to_host_itemid_pairs(items, hostname_filter_fn):
        # List of (host, itemid) pairs sorted by host
        items_by_host = []<br><br>        for item in items:
            itemid = item['itemid']
            dns = item['hosts'][0]['dns']<br><br>            if hostname_filter_fn(dns):
                items_by_host.append({&quot;host&quot;: dns, &quot;itemid&quot;: itemid})<br><br>        return items_by_host
</code></pre><br><br></div>
<h2 id="EscapingtheZabbixUIpainHowtocreateacombinedgraphforanumberofhostsusingtheZabbixAPI-Conclusion">Other ways</h2>
As my colleague Markus Krüger has noted:
<blockquote>
<div>You could also use auto registration or auto discovery to add hosts to groups, then extract aggregated data across all hosts in the host group. (Granted, that only works if you want data from <em>all</em> hosts in the group - but if you don't want the data, don't add the host to that group.) That way, no manual work is needed to add monitoring and graphing across multiple instances winking into and out of existence.</div>
<div>Some links:</div>
<div><a href="https://www.zabbix.com/documentation/2.0/manual/discovery/auto_registration" rel="nofollow">Auto registration</a> (2.0 docs, but should be fairly accurate for 1.8.3 as well)</div>
<div><a href="https://www.zabbix.com/documentation/1.8/manual/auto-discovery" rel="nofollow">Auto discovery</a></div>
<div><a href="https://www.zabbix.com/documentation/1.8/manual/config/host_groups" rel="nofollow">Host groups</a></div>
<div><a href="https://www.zabbix.com/documentation/1.8/manual/config/items#aggregated_checks" rel="nofollow">Aggregated checks</a></div>
That being said, Zabbix is still fairly awkward to work with.</blockquote>
This makes it possible to get aggregate metrics such as avg, max, min, sum of a metric for the whole host group. Using auto iscovery and auto registration makes it possible to assign hosts to groups automatically.
<h2>Conclusion</h2>
Using the API is easy and quick, especially with Python. Working the the UI is so slow and painful that I really recommend using the API.<br><br></div>
</div>
++++
