{:title "From Stateful Iteration in Python to Stateless Clojure",
 :date "2013-03-18",
 :layout :post,
 :tags ["clojure" "python"],
 :tags-orig ["clojure" "python" "statelessness"],
 :categories ["General"],
 :extra-css #{}
}

++++
I have a piece of Python code that leverages a stateful object and was wondering how to reimplement it in the inherently stateless Clojure, without resorting to its facilities for managing state. It turns out to be simple and beautiful.<br><br>The core of the code is a for loop that transform a list of maps, while also using input from another iterator-like object, a Palette. The Palette has the method next() that remembers the last color used and returns the next one. Here it is:<br><br><pre><code>
class Palette:
    last_idx = 0
    colors = [&quot;C04000&quot;, ...]<br><br>    def next(self):
        self.last_idx = (self.last_idx + 1) % len(self.colors)
        return self.colors[self.last_idx]<br><br>graph_items = []<br><br>for idx, item in enumerate(item_maps):
    graph_items.append({
            &quot;itemid&quot;: item['itemid'],
            &quot;color&quot;: palette.next(),
            &quot;sortorder&quot;: idx
            })
</code></pre><br><br>In Clojure, we would rather have no such state (for reasons I won't discuss now). However, when writing idiomatic Clojure, we actually don't need to.<br><br>We will use the fact that <em>map</em> - the function that can transform collection items - can take not just one but any number of collections, iterating over all of them in parallel. Instead of using the stateful palette.next(), we will create an infinite sequence of (repeating) colors and pass it into <em>map</em> together with the <em>items</em> collection. We want also the index of the items so we pass in a third sequence, the range from 0 to infinity. The map function will be thus called with (the current index, the current item, the current color).<br><br>Using infinite sequences is quite common (and elegant) in Clojure.<br><br>This is what the code could look like:<br><br><pre><code>
;; An infinite sequence of the colors (starting
;; again with the 1st one, when all exhausted)
(def palette (cycle [&quot;C04000&quot; &quot;...&quot;]))<br><br>(defn make-graph-items [items]
  (map
   (fn [idx item color] {&quot;itemid&quot; (item &quot;itemid&quot;), &quot;color&quot; color, &quot;sortorder&quot; idx})
       (range) items palette))<br><br>(def graph-items (make-graph-items items))
</code></pre>
<h2>Conclusion</h2>
Statelessness is not scary. It is fun.<br><br><em>Disclaimer: I am only learning both Python and Clojure.</em>
++++
