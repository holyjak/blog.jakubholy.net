{:title
 "Patterns of Effective Delivery - Challenge Your Understanding Of Agile (RootsConf 2011)",
 :date "2013-06-22",
 :layout :post,
 :tags ["book" "architecture" "methodology"],
 :tags-orig
 ["agile"
  "architecture"
  "effectivity"
  "favourite"
  "lean"
  "patterns"
  "review"
  "team"],
 :categories ["General"],
 :extra-css #{}
}

++++
Highlights from <a href="https://dannorth.net/">Dan North</a>'s excellent, inspiring, and insightful <a href="https://vimeo.com/24681032">talk Patterns of Effective Delivery</a> at RootConf 2011. North has a unique take on what agile development is, going beyond the established (and rather limitied and rigid) views. I really recommend this talk to learn more about effective teams, about North's "shocking," beyond-agile experience, and for great ideas on improving your team.<br><br>The talk challenges the absolutism of some widely accepted principles of "right" software development such as TDD, naming, the evilness of copy&amp;paste. However the challenge is in a positive way: it makes us think in which contexts these principles really help (in many) and when it might be more effective to (temporarily) postpone them. The result is a much more balanced view and better undestanding of their value. A lot of it is inspired by the theory (and practice) of <a href="https://commitment-thebook.com/">Real Options</a>.<br><br>What are Patterns of Effective Delivery?
<ul>
	<li>Patterns - strategies that work in a particular context - and <em>not</em> in another (too often we forget the context and to consider the context where a strategy doesn't work / is contra-productive); beware: a part of the context is the experience of the developer; for unexperienced devs it might be better to just stick to a process and applying TDD etc. all the time than trying to guess when they are appropriate and when not without having the experience to decide it right</li>
	<li>Effective - optimize for something: volume of SW produced? time to market? learning/discovery? certanity? user experience?</li>
	<li>Delivery - get stuff that is useful out of the door; software is not important, the utility it provides is; know why you write the SW to be able to get better at it</li>
</ul>
<!--more--><br><br>Some of the patterns take years to master and require investment to learn and start getting the benefits. You might need to try (and fail) a few times before getting them right.<br><br>Disclaimer: These are notes that make sense to me. They will likely make only limited or none sense to people that haven't heard the talk. It would be best to go and listen to it instead.
<h2>Selected patterns</h2>
<strong>Spike and Stabilize</strong> (or throw away): traditionally we decide whether we are writing production-grade code (with high rigour such as TDD) or just a throw-away spike before we start coding - i.e. at the moment when we know the least about it. We should rather not decide this uprofnt but "exercise the option of investing into the quality" later, based on experience. Start as a spike and if the code proves valuable, stabilize it, refactor, test etc. Evolve the code based on experience (good naming, quality), defer the commitment to the quality of the code =&gt; optimize for learning<br><br>Ex. of spike-and-stabilize regarding test naming: originally named <em>blah</em> - don't know what it should do yet, experimenting, when the code evolves into st. meaningful, name it properly, according to that.<br><br><strong>Ginger Cake</strong> - copy and paste code, rip unrelevant things out until the only important things left, then write tests around; may end up with code that is similar *but not in the ways expected* =&gt; if started with abstracting, it would be the wrong abstraction. It says: "We know and respect DRY but are not slaves to it."<br><br><strong>Short SW Half-Life</strong>: 1) We don't care about the SW but the utility it gives us; if writing it gives us better ideas, we can delete it and do the better thing; 2) how would you write the code if 1/2 of it - but you don't know which half - would be gone in a few weeks? =&gt; start simple (see Spike &amp; St.); extract commonalities, improve quality etc. for code that has already been around for a while and has proven itself useful; Some architecture styles lend themselves better to such quick evolution - small, focused services (popularly known as <a href="https://www.infoq.com/presentations/Micro-Services">micro services</a> (<a href="https://2012.33degree.org/pdf/JamesLewisMicroServices.pdf">slides</a>, esp. p.42+)).
"Look at the code as it evolves and decide what to invest in." (The investment includes thinking about the design.) All code is not equal.<br><br><strong>Create Urgency</strong> - to change a paradigm, the way of thinking, people must be desperate, have no more options, and have the knowledge what to do. =&gt; apply when learning st. new - do it on st. real, under self-inflicted pressure. Ex.: Commit to do an app, with a crazy deadline, using the new tech =&gt; urgency, no more options. Forces to learn only the parts you really need x diff. than what tutorials teach.<br><br><strong>Socratic Testing</strong> (coaching style) - don't tell the team what's wrong with their code, which is threatening and thus hard to accept. Pair with them on writing test and to support the test, make "helper" classes etc. that you'd like to see in the prod code. If they really are useful, they will spot it and decide to pull them into the prod code. Make them the hero, don't tell but ask.<br><br><strong>Fits In My Head</strong> - we need code that we can understand and reason about (x big classes, methods, complex models, ...). Keep the code simple, optimize for understandability, readability, obviousness, .... Build Shared Idioms in the team - so that the team members would, given the same context, arive to the same decisions/design. Something should only differ from the usual way of doing it when there is a good reason for i; thus a difference provides a hint, difference is data. F.ex.: all communication over ZeroMQ, only at one place through shared memory - this indicates there is some, most likely performance, reason for it; communication means shouldn't be picked randomly, ad-hoc.<br><br><strong>TDD</strong> - a pattern that, in a *particular context*, may make you much more effective
<h2>Bonus: Micro Services</h2>
From James Lewis's talk <a href="https://www.infoq.com/presentations/Micro-Services">Micro Services: Java, the Unix Way</a> (2013) - especially <a href="https://2012.33degree.org/pdf/JamesLewisMicroServices.pdf">slides</a> 42+:
<ul>
	<li>Use web, do not bypass it - REST, JSON; standardised application protocols and message semantics</li>
	<li>Small with a single responsibility (does one thing, fits into one's head, small enough to rewrite and throw away rather than maintain)</li>
	<li>Containerless and installed as well behaved Unix services (executable jar with embedded Jetty + rc.d start scripts and config files)</li>
	<li>Avoid unnecessary coupling - Domains in different bounded contexts should be distinct – and its ok to have duplication, physical separation to enforce it ; there will be common code, but it should be library and infrastructure code; leverage Conway's Law to support decoupling</li>
	<li>Provisioned automatically: "The way to manage the complexity of many small applications is declarative provisioning" (including instance count, scaling, load balancing)</li>
	<li>Status aware and auto-scaling - in-app status pages, monitored =&gt; autoscaling</li>
	<li>Each service is entirely decoupled from it’s clients, scalable, testable and deployable individually</li>
</ul>
Decomposition: product =&gt; set of capabilities (e.g. monitoring, reporting, fulfillment, user) =&gt; each implemented by a set of small apps/services and exposing a uniform interface of Atom Collections. The capabilities form the project by interacting via a uniform interface - HTTP (=&gt; reverse proxies etc.), HATEOS (link relations drive state changes – its an anti-corruption layer that allows the capability to evolve independently of its clients), Standard media types (usable by many types of clients)<br><br>Explict tips from the talk:
<ol>
	<li>Divide and conquer Start on the outside and model business capabili3es</li>
	<li>Use Conway’s Law to structure teams (and enforce decoupling)</li>
	<li>The Last Responsible Moment - Don’t decide everything at the point you know least</li>
	<li>Be of the web, not behind the web</li>
	<li>If something is important, make it an explicit part of your design (reify) - ex.: inst. of services creating users by posting to /user, they post a user creation request and get response immediatelly, the user created eventually (reminds me of futures)</li>
	<li>Favour service choreography over orchestration</li>
	<li>Use hypermedia controls to decouple services</li>
</ol>
Some tools used: <a href="https://www.simpleframework.org/">SimpleWeb</a>/Jetty, Abdera for Atom, <a href="https://smoothiecharts.org/">Smoothie charts</a> (JS charts for streaming data), Coda Hale's <a href="https://github.com/codahale/metrics">metrics</a>, Graphite. Ops: Fabric with boto, AWS, Puppet, ... .<br><br>But: NO SILVER BULLETS - This stuff is hard - Versioning, Integration, Testing, Deployment; eventual consistency hard for people to wrap head around; ... .<br><br>Note: Comoyo.com, powered by a number of ex-googlers and other smart people, does the same thing. So does, I believe, <a href="https://techblog.netflix.com/">Netflix</a>.
<h2>Related</h2>
If you liked this, you might also like Dan North's presentations <a href="https://vimeo.com/68215534">Accelerating Agile: hyper-performing teams without the hype</a> and <a href="https://vimeo.com/68226771">Patterns of Effective Teams</a> at NDC Oslo 2013.
++++
