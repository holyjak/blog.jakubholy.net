{:title "Most interesting links of November '13",
 :date "2013-11-30",
 :layout :post,
 :tags
 ["scala"
  "book"
  "testing"
  "security"
  "clojure"
  "legacy"
  "methodology"
  "DevOps"
  "nodejs"],
 :tags-orig
 ["agile"
  "book"
  "clojure"
  "continuous_deployment"
  "diy"
  "legacy"
  "mongodb"
  "nodejs"
  "SbE"
  "scala"
  "security"],
 :categories ["General" "Languages" "Top links of month"],
 :extra-css #{}
}

++++
<h2>Recommended Readings</h2>
Some interesting topics this time despite me spending lot of time on the <a href="https://class.coursera.org/reactive-001/">Principles of Reactive Programming</a> course: Java x Node.js, REST x other future-proof architectures, scary legacy code. Of course, also plenty of Clojure.<br><br>People, organizations, teams, development:
<ul>
	<li><a href="https://www.thinkers50.com/blog/chris-argyris-1923-2013-appreciation/">Chris Argyris (1923-2013): An Appreciation - Thinkers 50</a> - recently departed Ch. Argyris is a person whose work you should know, if a bit interested in learning and organizations and how they (dis)function; and since we all work in organizations and want our work to be pleasant, this means all of us. We all want to work in orgs that do double-loop learning, i.e. they actually evovle as they learn. "<em>Argyris argued that organizations depend fundamentally on people and that personal development is and can be related to work.</em>" Now stop and go read it!</li>
	<li>Bob Marshall: <a href="https://flowchainsensei.wordpress.com/2013/10/12/the-antimatter-principle/">The Antimatter Principle</a> - "<em>the only principle we need for becoming wildly effective at collaborative knowledge work</em>" - can be summarized as "attend to folks' needs" (importantly, including your own) =&gt; find out what people actually need, interpret their behavior (including anger, seemingly irrational or stupid requests etc.) in terms of needs; mastering this will make you excell in communication and effective work. Read the post to find out more.</li>
	<li><a href="https://www.fibonaccikittens.com/2013/11/26/one-idea-one-commit/">It’s a state of mind: some practical indicators on doing agile vs. being agile</a> - are you agile or are just "doing agile"? Read on ti find out, if you dare! F.ex. "<em>Non Agile teams have a process that slows the review of the changes.</em>" Cocnlusion: "<em>An Agile mindset is just that – a state of mind, a set of values. Its a constant questioning, and an opening up to possibilities. Its a predisposition to produce great things.</em>"</li>
	<li><a href="https://johannesbrodwall.com/2013/11/27/humble-architects/">Johannes Brodwall:  Humble architects</a> - how to avoid being an architect that does more harm than good, as so many out there? Some tips: Don't assume stupidity, Be aware that you might be wrong, Be careful with technology (i.e. simplicity beats everything; applies so much to us developers too!), Consistency isn't as important as you think (or beware context), Tactical reuse in across systems is suboptimization (i.e. reuse has a cost), separate between (coding) rules and dogma (i.e. is that way unsafe, incomprehensible, or just a heresy w.r.t. a dogma?) Very valuable insights into creating good technical solutions and teams that work.</li>
	<li><a href="https://lizkeogh.com/2013/11/30/the-dream-team-nightmare-a-review/">Liz Keogh's The Dream Team Nightmare: a Review</a> - a very good review of this adventure-style book about coaching "agile" teams through (around?) common pitfalls, provides a good base for deciding whether you shall read the book (Liz essentially says yes)</li>
	<li><a href="https://www.fibonaccikittens.com/2013/11/26/one-idea-one-commit/">Fibonacci Kittens: One Idea One Commit</a> - a short story of coming from biannual releases to frequent release of individual features; I link to this primarily to spread optimism, if this company managed it then, perhaps, we other can too?</li>
	<li><a href="https://www.thinkers50.com/blog/chris-argyris-1923-2013-appreciation/">The Eternal Struggle Between Business and Programmers</a> - "Business: More features! Now! Programmers: More refactoring! Now!" How can we resolve this eternal conflict of needs? This post reveals how the two parties can find a common ground and mutual understanding (beware, everybody must give up on something) and thus work together rather than against each other.</li>
</ul>
Coding, architecture, legacy
<ul>
	<li><a href="https://z.caudate.me/why-the-future-is-not-restful/">Why the future is NOT RESTful</a> - always refreshing to read something against the mainstream; "<em>REST is not fit for the next generation of smart client applications because it has not been designed for smart clients.</em>" According to the author, a smart client app stack needs: "1. persistence (storage and query), 2. documents/orm (conversion to tree-like datastructures), 3. data authorization (once authenticated), 4. pub/sub (websocket communications), 5. client db (client-side caching and querying), 6. templating (presentation level)" <a href="https://www.meteor.com/">Meteor.js</a> has nearly all but #3 thanks to mongodb (1+2), <a href="https://www.meteor.com/blog/2012/03/21/introducing-ddp">dpp</a> (4), mongo on the client (5), <a href="https://www.meteor.com/blog/2012/08/31/introducing-spark-a-new-live-page-update-engine">spark</a> (6). The author considers a similar but Clojure-based stack (with Datomic, Angular etc.) and looks at authorization possibilities. "<em>Secured, personalised, CRUD operations are the future to a more simplified web.</em>" We may agree or not but it certainly is worth reading.</li>
	<li>Michael Feathers (of Working Effectively With Legacy fame): <a href="https://michaelfeathers.typepad.com/michael_feathers_blog/2013/11/unconditional-programming.html">Unconditional Programming</a> - "<em>Over and over again, I find that better code has fewer if-statements, fewer switches, and fewer loops. Often this happens because developers are using languages with better abstractions. [..] The problem with control structures is that they often make it easy to modify code in bad ways.</em>" Includes a nice example of replacing if-else with much more readable and safer code.</li>
	<li><a href="https://www.viva64.com/en/a/0083/">The Quality of Embedded Software, or the Mess Has Happened</a> - an interesting and scary read about terrible spaghetti code (and hardware) that makes some Toyotas to accelerate when the driver tries to break; 11,000 global variables, the key function showing so high cyclomatix complexity that "<em>makes it impossible not only to test but even maintain this program in any way.</em>" Then 80k violations of the car industry coding standard cannot surprise. And a safety control that does not work. Interesting that a great manufacturer may have so terrible IT (and Toyota isn't the only one).</li>
	<li><a href="https://mortoray.com/2013/11/27/the-string-type-is-broken/">The string type is broken</a> - the String type is M. Feathers' favourite example of a leaky abstraction - most languages fail to process/split/count less common Unicode characters properly, the fact that String is implemented as a series of bytes leaks through (UTF-16 langs like Java); worth reading to be aware of the limitations</li>
</ul>
Languages
<ul>
	<li><a href="https://yogthos.net/blog/49-Why+I%27m+Productive+in+Clojure">Why I'm Productive In Clojure</a> - some interesting points about simplicity, consciousness, interactive development, power without overwhelming fatures, etc. "<em>With it [Clojure] I can always easily derive a solution to a particular problem from a small set of general patterns. [..] However, the number of ways that these concepts can be combined to solve all manner of problems appears to be inexhaustible.</em>"</li>
	<li><a href="https://www.paypal-engineering.com/2013/11/22/node-js-at-paypal/">Node.js at PayPal</a> - PayPal is switching from Java to Node.js (among others to promote language consistency) and, as a part of that, has implemented the same app in Node and Java; results: Node was done earlier, had less code, performed better (though, as <a href="https://twitter.com/dkvasnickajr/status/406727039169732608">Daniel Kvasnička pointed out</a>, "<em>Comparing Node.js and servlet-based archs is not fair... compare Node with <a href="https://vertx.io/">@vertx_project</a></em> and you'll get a whole different story ;)"; also, as <a href="https://twitter.com/headius/status/411272451536846849">Charles Nutter said</a>, "<em>The <a href="https://twitter.com/PayPal"><s>@</s>PayPal</a> numbers for their Java to Node move are absurd. A JVM app doing 1.8 pages/s isn't slow...it's broken.</em>")</li>
	<li><a href="https://www.ibm.com/developerworks/java/library/mo-nodejs-1/index.html">IBM: Developing mobile apps with Node.js and MongoDB, Part 1: A team's methods and results</a> - also IBM has implemented the same (REST) app once with Java and DB2, once with Node and Mongo where Node+Mongo required less work and performed better; one of the great wins was having JSON as a native structure everywhere instead of transforming from/to it so Mongo is, in my opinion, an important factor in this particular case</li>
	<li><a href="https://dynamicsofprogramming.blogspot.ch/2013/11/benefits-of-scala-in-cs1.html">Dynamics of Programming: Benefits of Scala in CS1</a> - reasons for and experiences with using Scala in an introductory computer science course, worth reading; some of the advantages over Java are consistency (.asInt on String and Double vs. casting/parsing, no "primitive" types), REPL with time inference good for learning, functional style enables focus on what rather than how; quite persuasive arguments</li>
</ul>
Security
<ul>
	<li><a href="https://www.renesys.com/2013/11/mitm-internet-hijacking/">The New Threat: Targeted Internet Traffic Misdirection</a> - did you know that internet traffic to any site can be made to go through a particular server without anybody noticing? This has been observed repeatedly in the wild, for banks and other sites. Rather make sure you use strong encryption (NSA-approved, of course ;)).</li>
	<li><a href="https://arstechnica.com/security/2013/10/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/">A (relatively easy to understand) primer on elliptic curve cryptography</a> - Everything you wanted to know about the next generation of public key crypto - you cannot just read this, you have to study it, which I did not; but it looks good and I guess the time will come when I will come back to it</li>
</ul>
Other
<ul>
	<li>Prezi:<a href="https://prezi.com/vs4kqcgamhy5/intro-to-specification-by-example/"> Intro to Specification By Example - a journey, not a destination</a> (W. King; via <a href="https://twitter.com/mortenberg">@mortenberg</a>) - a nice presentation that can be used to introduce SbE, with focus on the important things (collaboration) and some practical experiences</li>
	<li><a href="https://katrinatester.blogspot.co.nz/2013/11/mind-maps-and-automation.html">Mind Maps and Automation</a> (via <a href="https://twitter.com/gojkoadzic"><s>@</s>gojkoadzic</a>) - a smart idea to use a mind map to display break-down of the status of testing of a system (red/orange/green) instead of just one indicator, based on the observations that managers &amp; co. never drill down below the first indicator</li>
	<li><a href="https://kosmothink.com/2013/11/13/2636/">MIT Technology Review: 10 Breakthrough Technologies 2013</a> - for those interested in the future - f.ex. ultra-efficient solar power, supergrids - highly efficient DC power grids, additive manufacturing - on the verge of using 3-D printing to make jet parts, memory implants</li>
	<li><a href="https://sugru.com/">Sugru - a genius DIY material</a> for improving anything; also, very nice <a href="https://sugru.com/story">A partial visual history of sugru</a> (via Bjørn Remseth)</li>
</ul>
<h2>Clojure Corner</h2>
<ul>
	<li><a href="https://github.com/stuartsierra/component">Stuart Sierra's Component</a> - a library for making it easier to implement Stuart's <a href="https://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded">reloadable workflow</a>; a component is something that can be started, stopped, and depend on other components so that it is easier to do interactive REPL development</li>
	<li>Logan Linn: <a href="https://loganlinn.com/blog/2013/11/18/clojureconj-2013/">Clojure/conj 2013</a> - a pretty good overview of the conference</li>
	<li><a href="https://caribou.github.io/caribou/docs/outline.html">Caribou</a> - "<em>the kernel of usefulness that has emerged from years of this basic practice</em>"- a new Clojure web framework - seems to be interesting</li>
	<li><a href="https://cemerick.com/2013/11/18/results-of-the-2013-state-of-clojure-clojurescript-survey/">Results of the 2013 State of Clojure &amp; ClojureScript survey</a> and drill-down into <a href="https://tech.puredanger.com/2013/11/19/state-of-clojure-language-features/">what features people want</a> - the most interesting fact is how many more participants use Clojure in production than last year and perhaps also the relatively wide adoption of Datomic among the respondents. Light Table has become the 3rd most popular dev. env., after Emacs and Vim. Some of the most mentioned language features requested were types (=&gt; core.typed, Prismatic's Schema), better error reporting (=&gt; <a href="https://github.com/scgilardi/slingshot">slingshot</a>, <a href="https://github.com/MichaelDrogalis/dire">dire</a>, <a href="https://github.com/mmcgrana/clj-stacktrace">clj-stacktrace</a>, <a href="https://github.com/AvisoNovate/pretty">io.aviso:pretty</a>, etc.), debuger (though progress is being made)</li>
	<li><a href="https://www.packtpub.com/clojure-high-performance-programming/book#overview">Book: Clojure High Performance Programming</a></li>
	<li><a href="https://java.dzone.com/articles/improving-clojure-feedback">Improving Clojure Feedback : Stack Traces</a> - making Clojure stacktraces more usable by filtering out noise and linking to relevant content - <a href="https://github.com/AvisoNovate/pretty">io.aviso:pretty</a>,  <a href="https://github.com/AvisoNovate/twixt">io.aviso:twixt</a></li>
	<li>Clojure Dev discussion: <a href="https://groups.google.com/forum/m/#!topic/clojure-dev/lWXYrjaDuIc">Hashing strategies - Executive summary</a> - "<em><em></em>In Clojure, however, it is far more common than in Java to use longs, vectors, sets, maps and compound objects comprised of those components (e.g., a map from vectors of longs to sets) as keys in other hash maps.  It appears that Java’s hash strategy is not well-tuned for this kind of usage.  Clojure’s hashing for longs, vectors, sets, and maps each suffer from some weaknesses that can multiply together to create a crippling number of collisions.<em></em></em>" Ex.: An implementation of N-Queens took forever, spending most time on hash collisions. But be calm, smart Clojurians are working on a solution.</li>
	<li><a href="https://blog.datomic.com/2013/11/datomic-pro-starter-edition.html">Datomic Pro Starter Edition</a> - Datomic with all storages, Datomic Console, a year of updates, full Datomic programming model; limitations: no HA transactor, no integrated memcached, max 2 peers and 1 transactor</li>
</ul>
<h2>Tools/Libs</h2>
<ul>
	<li><a href="https://www.airpair.com/">AirPair.com</a> - a new site that enables developers to get help from other devs via remote pairing, code review, code mentoring etc. - a good opportunity to get help / help others (and earn something); I haven't tried it but it sounds pretty interesting</li>
</ul>
MongoDB web stacks
<ul>
	<li><a href="https://www.meteor.com/">Meteor</a>: JS frontend + MongoDB backend with changes in the DB pushed live to the clients, i.e. MongoDB is used both as the "application server" and storage. It seems great for apps where users need to collaborate in real-time with each other, certainly great for quick proof of concepts etc.; worth checking out; it also comes with free (at least for start?) hosting so really good for prototyping - "a<em>n open-source platform for building top-quality web apps in a fraction of the time.</em>" The <a href="www.meteor.com/screencast">intro screencast</a> will give you a good overview (10 min).</li>
	<li><a href="https://mean.io/">Mean.io</a> - MEAN (Mongo, Express, Angular, Node) stack Boilerplate - frontend, backend and storage using the same language and some of the most popular technologies (not that popular = best fit for you :)); it seems to be very new but since it just glues together 4 popular and documented technologies, that should not be an obstacle. There is an <a href="https://blog.mongodb.org/post/49262866911/the-mean-stack-mongodb-expressjs-angularjs-and">intro on the MongoDB blog</a>.</li>
</ul>
Other
<ul>
	<li><a href="https://www.busybox.net/">BusyBox</a> (get <a href="https://intgat.tigress.co.uk/rmy/busybox/index.html">latest win binary</a> from Tigress.co.uk) - reportedly a better POSIX env for Windows than gow, Cygwin, et al.</li>
</ul>
<h2>Favourite Quotes</h2>
<blockquote>[..] no organization should exist unless it is "of service" to its employees, its customers, its community.
<em>- <a href="https://twitter.com/tom_peters/status/406081167453343744">@Tom_Peters 28/11</a></em></blockquote>
<blockquote>I hope you'll agree that there is a certain amount of irony involved in having to write repetitive code
- <em>Dmitri Sotnikov in <a href="https://yogthos.net/blog/49-Why+I%27m+Productive+in+Clojure">Why I'm Productive In Clojure</a></em></blockquote>
Happy teams are productive teams but:
<blockquote>Morale is 95% a function of the prevailing system (the way the work works). Which in turn is a function of the prevailing collective mindset
- <a href="https://twitter.com/flowchainsensei/status/399498969686233088">@flowchainsensei Nov 10th</a></blockquote>
++++
