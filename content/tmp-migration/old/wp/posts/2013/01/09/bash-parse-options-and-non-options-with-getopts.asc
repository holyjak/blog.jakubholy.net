{:title "Bash: Parse Options And Non-Options With Getopts",
 :date "2013-01-09",
 :layout :post,
 :tags [],
 :tags-orig ["bash"],
 :categories ["General"],
 :extra-css #{}
}

++++
Parsing script or function options and non-option arguments is easy in Bash with <code>getopts</code> but there are some catches, such as the need to reset OPTIND. We will se how to do it using <code>getopts</code>, <code>shift</code>, and <code>case</code>.<br><br>The code below will parse the function arguments and remove them so that $1 will refer to the first non-option argument (i.e. not starting with -). You would invoke it f.ex. asÂ  <code>latest_recur -x Hello -a '*.txt'</code>.<br><br><pre><code>
# Find the latest files under the current dir, recursively; options:
# -a list all, not only 30 latest
#  - pattern passed to find's -name; ex.: &quot;*.log.processed&quot;
function latest_recur {
   local show_all=
   OPTIND=1
   while getopts &quot;ax:&quot; opt; do
      case $opt in
         a) show_all=yes ;;
         x) echo &quot;You said: $OPTARG&quot; ;;
         \?) echo &quot;Invalid option: -$OPTARG&quot; &gt;&amp;2; return 1;;
     esac
   done
   shift $((OPTIND-1))<br><br>   if [ -z &quot;$1&quot; ]; then NAME_ARG=&quot;&quot;; else NAME_ARG=&quot;-name $1&quot;; fi
   find -type f $NAME_ARG | xargs --no-run-if-empty stat --format '%Y :%y %n' | sort -nr | if [ -z &quot;$show_all&quot; ]; then head -n 30 -; else cat -; fi
}
</code></pre>
<ul>
	<li>#5, #9 the variable used to store the flag must be defined/reset first</li>
	<li><strong>#6</strong> OPTIND is a global variable pointing to the next argument that getopts should parse; you <strong>must reset it manually</strong> (otherwise the next call to the function will ignore its arguments)</li>
	<li>#7 getopts parses one by one all the supported options (a, x here) and stores them into $opt;</li>
	<li>#10, #11 the value passed to the option (Hello, *.txt) is stored into the variable OPTARG</li>
	<li><strong>#14</strong> we must manually shift away the processed option arguments so that the first non-option argument ('*.txt') will become argument number 1 as you can see at #16; OPTIND is set by getopts</li>
</ul>
<code>Getopts</code> can do quite a lot. It supports short options with or without arguments such as "-lht", "-l -h -t", "-l -I '*.swp'". It can also report/ignore unknown arguments etc., see <a href="https://linux.about.com/library/cmd/blcmdl1_getopts.htm">its brief documentation</a> and this <a href="https://wiki.bash-hackers.org/howto/getopts_tutorial">small getopts tutorial</a>. Briefly said, getopts takes opstring and varname; opstring is a list of letters optionally followed by ':' to indicate that that flag requires a value; varname is the name of the variable to store the flag name into. If you put : in front of the opstring (":ax:") then it will not complain about unknown options or missing arguments for options that require them.
++++
