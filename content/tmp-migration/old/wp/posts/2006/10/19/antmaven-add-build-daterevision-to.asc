{:title
 "Ant/Maven: Add build date/revision to the generated JAR's Manifest",
 :date "2006-10-19",
 :layout :post,
 :tags [],
 :tags-orig [],
 :categories ["Tools"],
 :extra-css #{}
}

++++
I'll explain how to get build time info and svn revision into the buildedjar/ear in Maven or Ant.<br /><br><br>
<h4>1. Maven</h4><br><br><p>If you want to have the build date of a JAR built by Maven in its Manifest
file, paste the following lines at the beginning of your maven.xml:</p>
<pre><code>&lt;tstamp/&gt;
&lt;j:set value="JarBuildDate var="maven.jar.manifest.attributes.list" /&gt;
&lt;j:set value="${DSTAMP}" var="maven.jar.manifest.attribute.JarBuildDate" /&gt;</code></pre><br><br><p>Explication:</p>
<ol>
  <li><code>&lt;tstamp/&gt;</code> executes the Ant's task Tstamp, which
    defines the variables DSTAMP (date in the form YYYYMMDD), TODAY (MMMM dd
    yyyy) and TSTAMP (hhmm).</li>
  <li>The property <code>maven.jar.manifest.attributes.list</code> tells the
    jar:jar goal what entries to add into the resulting manifest. Attention:
    value="JarBuildDate" and =" JarBuildDate" define 2 different variables,
    i.e. whitespaces are very significant. You must also comply with the
    definition of valid manifest entriy names. The variable may hold multiple
    entries separated by a comma. Side note: what happens, if the variable is
    already set? Is the old value preserved or overwritten?</li>
  <li><code>maven.jar.manifest.attribute.JarBuildDate</code> sets the value
    for the manifest entry defined in the ...list property.</li>
</ol><br><br><h4>2. Ant</h4>
<pre><code>&lt;!-- Create manifest with build time info --&gt;
&lt;manifest file="ear-MANIFEST.MF"&gt;
                 &lt;attribute name="MyBuild-Date" value="${DSTAMP}" /&gt;
                 &lt;attribute name="MyBuild-Time" value="${TSTAMP}" /&gt;
                 &lt;attribute name="MyBuild-Svn-Revision" value="${svn.version}" /&gt;
&lt;/manifest&gt;<br><br>&lt;jar manifest="ear-MANIFEST.MF" .. /&gt; &lt;!-- the same for an &lt;ear .. --&gt;</code></pre><br><br><p>Explanation: It's basically the same as for maven. The task 'manifest'
generates a manifest file.</p><br><br><h4>3. Get SVN revision</h4>
<p>Warning:<em>This only works with the plain-text format of .svn/entries, not with the older XML format.</em></p>
<p>To get an SVN revision of you project at the time of building, you can use
the following task to get the revision number into the property svn.version
(requires ant &gt;= 1.6):</p>
<pre><code>&lt;loadfile
   property="svn.version" srcFile=".svn/entries" failonerror="true"&gt;
   &lt;filterchain&gt;
      &lt;headfilter lines="6"/&gt;
      &lt;tokenfilter&gt;
         &lt;filetokenizer/&gt;
         &lt;replaceregex pattern=".*[\r\n]+dir[\r\n]+([0-9]+)[\r\n]+http://.*"
            flags="s" replace="\1"/&gt;
      &lt;/tokenfilter&gt;
   &lt;/filterchain&gt;
&lt;/loadfile&gt;</code></pre><br><br><p>Explanation:<br />
.svn/entries is a SVN file having something like this somewhere at its
beginning:</p>
<pre><code>8<br><br>
dir
7946
http://example.com/svn/repos//Projects/MyProject</code></pre>
<ul>
  <li><code>headfilter</code> takes first 6 lines of the file</li>
  <li><code>filetokenizer</code> gets all those lines into 1 string</li>
  <li><code>replaceregexp</code> finds the revision number in it and replaces
    all the string with this number</li>
  <li>the result is stored into the property <code>svn.version</code></li>
</ul>
++++
