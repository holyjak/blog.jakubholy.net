{:title "Framework Joy: Load in Hibernate Updates Data",
 :date "2014-03-31",
 :layout :post,
 :tags [],
 :tags-orig ["hibernate"],
 :categories ["j2ee"],
 :extra-css #{}
}

++++
Would you ever guess that this line<br><br><pre><code>
// Load Buyer from DB by id using Spring's HibernateTemplate:
final Buyer traveller = (Buyer) hibernateTemplate.load(Buyer .class, new Long(id));
</code></pre><br><br>could lead to a constraint-validation exception during a batch update or delete and re-insert rows (loosing all columns Hibernate does not know about)? I was quite surprised.<br><br>In particular buyer's bonusCards get deleted and re-inserted, because Hibernate believes that the collection of cards is dirty, even though it has just loaded it from the DB. I am not exactly sure why (<a href="https://www.javacodegeeks.com/2012/03/hibernate-performance-tips-dirty.html">preventing false positives in dirty checks requires some black magic</a>), this is the configuration:<br><br><pre><code>
&lt;class name=&quot;Buyer&quot; ...&gt;
...
    &lt;set name=&quot;bonusCards &quot; table=&quot;bonus_cards&quot;&gt;
        &lt;key column=&quot;buyer_id&quot;/&gt;
        &lt;composite-element class=&quot;BonusCard&quot;&gt;
            &lt;property name=&quot;number&quot; column=&quot;number&quot; not-null=&quot;false&quot;/&gt;
            &lt;property name=&quot;expiredate&quot; column=&quot;expdate&quot;/&gt;
            ...
        &lt;/composite-element&gt;
    &lt;/set&gt;
&lt;/class&gt;
</code></pre><br><br>Of course Hibernate certainly has good reasons to update and delete+re-insert data upon load and we could certainly get rid of (some of) these updates by configuring Hibernate better. But it still demonstrates nicely the hidden cost of using a complex framework - in this case, it behaves quite unexpectedly and requires extensive knowledge to set up properly and to troubleshoot.
++++
