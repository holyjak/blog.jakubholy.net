{:title "Notes From CodeMesh 2014",
 :date "2014-11-03",
 :layout :post,
 :tags ["clojure"],
 :tags-orig ["clojure" "conference" "quickcheck"],
 :categories ["Languages" "Testing" "Tools"],
 :extra-css #{}
}

++++
My consise highlights from CodeMesh 2014.<br><br><a href="https://gist.github.com/philandstuff/f9f95030acff9a14fa76">Philip Potter has very good CodeMesh notes as well</a>, as usually.<br><br><span style="color:#ff0000;"><strong>TODO: Check out the papers mentioned in the  <a style="color:#ff0000;" href="https://www.codemesh.io/codemesh2014/eric-redmond">NoSQL is Dead talk</a>. (&lt;- slides)</strong></span>
<h2>Tutorial: QuickCheck (John Hughes)</h2>
<h5>General</h5>
<ul>
	<li>QC =&gt; Less code, more bugs found</li>
	<li>QC tests are based on models of the system under test - with some kind of a simple/simplified state, legal commands, their preconditions, postconditions, and how they impact the state. The model is typically much smaller and simpler than the imple code.</li>
	<li>QuickCheck CI (<a href="https://quickcheck-ci.com/">quickcheck-ci.com</a>) - free on-line service for running CI tests for a GitHub project. Pros: You don't need QC/Erlang locally to play with it, it provides history of tests (so you never loose a failed test case), it shows test coverage also for failed tests so you see which code you can ignore when looking for the cause.</li>
	<li>See John's GitHub repo with examples - <a href="https://github.com/rjmh/">https://github.com/rjmh/</a></li>
</ul>
<h5>Shrinking (a.k.a. simplification)</h5>
<ul>
	<li>Doesn't just make the example shorter by leaving things out by tries a number of strategies to simplify the exmple, typically defined by the corresponding generators - f.ex. numbers are simplified to 0, lists to earlier elements (as in "(elements [3, 4, 5])") etc.</li>
	<li>You may implement your own shrinking strategies. Ex.: Replace a command with "sleep(some delay)" - so that we trigger errors due to timeouts. (A noop that just waits for a while is simpler than any op).</li>
</ul>
<h5>Bug discovery</h5>
<ol>
	<li>Run QC; assuming a test failed:</li>
	<li>Instead of diving into the implementation, use first QC to check your hypothesis of what constitutes "bad input" by excluding the presumed bad cases - f.ex. "it fails when input has 8 characters" =&gt; exclude tests with 8 and rerun, if you find new failures you know the hypothesis doesn't cover all problems - and you will perhaps refine it to  "fails when it has a multiple of 8 chars etc. We thus learn more about the wrong behavior and its bounds. Assumption we want to verify: No (other) tests will fail.</li>
	<li>Do the opposite - focus on the problem, i.e. modify the test case to produce only "bad cases". Assumption we want to verify: all tests will fail.</li>
</ol>
<h5>QC vs. example-based testing</h5>
QC code tends to be 3-6* smaller than implementation (partly thanks to the consiseness of Erlang) and fairly simple.<br><br>The case of Vovlo: 3k pages of specs, 20 kLOC QC, 1M LOC C implementations, found 200 bugs and 100 problems (contradictions, unclarities) in the specs. It took 2-3 years of working on it on and off.<br><br>Erlang dets storage race conditions: 100 LOC QC, 6 kLOC Erlang impl.
<h5>Testing stateful stuff</h5>
Invoke dfferent API calls ("commands") until one of presumabely legal calls fails due to an accumulated corrupted state. This is an iterative process where we evolve our model of the system - commands, their preconditions (when they can be legally invoked), postconditions, and our repreentation of the state.<br><br>Ex.: Testing of a circular queue. Commads: push (legal on non-full queue), get (legal on non-empty), create new =&gt; generates sequences of new and pushs and gets.
<h5>Testing race conditions</h5>
Precondition: Run on a multicore PC or control the process scheduler.
<ul>
	<li>There are many possible correct results (valid interleavings) of parallel actions =&gt; impractical to enumerate and thus to test with example-based tests</li>
	<li>Correct result is such that we can order (interleave) the concurrently executed actions such that we get a sequential execution yielding the same result. F.ex. an incorrect implementation of a sequence number generator could return the same number to two concurrent calls - which is not possible if the calls were done sequentially.</li>
</ul>
<h5>Testing data structures</h5>
Map the DS to a simpler one and use that as the model - f.ex. a list for a tree (provided there is a to_list function for the tree).
<h2>Tutorial: Typed Clojure (Ambrose Bonnaire-Sergeant)</h2>
Note: The documentation (primarily introductory one) could be better
<h5>Resources</h5>
<ul>
	<li><a href="https://typedclojure.org/">typedclojure.org</a> and <a href="https://github.com/typedclojure">typedclojure@GitHub</a></li>
	<li><a href="https://github.com/typedclojure/core.typed-example">core.typed-example</a> (currently little outdated but in the process of updating)</li>
	<li><a href="https://gist.github.com/frenchy64/51eef88234e2a2eb3c77">Prismatic Schema vs. typed.clojure</a> by Ambrose - pros and cons of both</li>
	<li><a href="https://github.com/typedclojure/lein-typed">lein-typed</a> - plugin to check your code (<code>lein typed check</code>)</li>
</ul>
<h5>Defining types</h5>
<ol>
	<li>separately: (ann ..)</li>
	<li>around: wrap in (ann-form &lt;defn&gt; &lt;type def.&gt;)</li>
	<li>inside: use t/fn, t/defprotocol etc.</li>
</ol>
<h5>Gradual introduction of typed.clojure</h5>
<ul>
	<li>wrap everything in (t/tc-ignore ...)</li>
	<li>for unchecked fns you depend on, add (ann ^:no-check somefn [...])</li>
	<li>If you stare at a type error, consider using contracts (prismatic/Schema or pre/post conds etc.)</li>
</ul>
<h5>Other</h5>
<ul>
	<li>f.ex. Cursive, Vim (,...?) have support for clojure.typed - show type errors in the source ....</li>
	<li>core.typed has # deps =&gt; don't use in prod - see https://github.com/typedclojure/core.typed-example/blob/master/project.clj</li>
</ul>
<h2>Keynote: Complexity (Jessica Kerr, Dan North)</h2>
<ul>
	<li>Always have tasks of all three types: research (=&gt; surface conplexity), kaizen (cont. improvement, improvement of the imprv. process), coding - these 3 interlave the whole time</li>
	<li>A team needs skills in a number of areas, it isn't just coding - evaluation of biz valuedelivered, monitoring, programming, testing, deployment, DB, FS, networks, ... .</li>
</ul>
<h2>Keynote: Tiny (Chad Fowler)</h2>
Keep things tiny to be efficient (tiny changes, tiny teams, tiny projects, ...).
<ul>
	<li>Research by armies and in SW dev [TODO: find the two slides / qsm, Scrum] shows that teams of max 5-6 work best
<ul>
	<li><strong>Teams of 7+ take considerably more time and thus money</strong> (5* more wrt. one study) to complete the same thing</li>
	<li>=&gt; small, autonomous teams with separate responsabilities (decomosition, SRP etc. FTW!)</li>
</ul>
</li>
	<li>Human capacity to deal with others is limited - one company creates a new department whenever size exceeds 100</li>
	<li>Big projects fail; Standish CHAOS report - only cca 10% larger projects succeed compared to nearly 80% of small ones (summed together: 39% succeed)</li>
	<li>Note: 1 month is not a short iteration</li>
</ul>
<h2>Distributed Programming (Reid Draper)</h2>
<h5>RPC is broken</h5>
- it tries to pretend a remote call is same as local but:
<ul>
	<li>what if the call never returns?</li>
	<li>the connection breaks? (has the code been executed or not yet?)</li>
	<li>what about serialization of arguments (file handles, DB conn.,...)</li>
</ul>
It ignores the special character of a remote code and the 8 fallacies of distributed progr.
<h5>Message passing</h5>
is batter than RPC. There is also less coupling as the receiver itself decides what code to call for a specific message.
<h5>Bloom</h5>
The <a href="https://www.bloom-lang.net/features/">Bloom lang</a> from the <a href="https://boom.cs.berkeley.edu/">BOOM research</a> project explores new, better ways of distributed programming. Currently implemented as a Ruby DSL.<br><br>From its page (highlight mine):
<blockquote>Traditional languages like Java and C are based on the <a title="Von Neumann on Wikipedia" href="https://en.wikipedia.org/wiki/Von_Neumann_architecture">von Neumann</a> model, where a program counter steps through individual instructions in order. Distributed systems don’t work like that. Much of the pain in traditional distributed programming comes from this mismatch:  programmers are expected to bridge from an ordered programming model into a disordered reality that executes their code.  Bloom was designed to match–and exploit–the disorderly reality of distributed systems.  <strong>Bloom programmers write programs made up of unordered collections of statements, and are given constructs to impose order when needed.</strong></blockquote>
<h5>Correctness testing of concurrent stuff</h5>
<ul>
	<li>Unit testing unsuitable - there are just too many combinations of correct results and can only test the cases the dev can think of</li>
	<li>=&gt; generate the tests - property-based testing / QuickCheck</li>
	<li>PULSE - an addon to property-based testing that tries to trigger concurrency problems by using a scheduler that tries different interleavings of actions (randomly but repeatedly) [Erlang]</li>
	<li>Simulation testnng - Simulant</li>
</ul>
<h5>Benchmarking</h5>
Beware the effects of GC, page cache, cronjob (e.g. concurrently running backup), SW updates =&gt; running a simple load test for few mins is not enough.
<h2>Cheats &amp; Liars: The Martial Art of Protocol Design (Pieter Hintjens)</h2>
Pieter is the brain behind AMQP, ZeroMQ and <a href="https://cultureandempire.com/html/edgenet.html">EdgeNet</a> (protocols for anonymous, secure, peer-to-peer internet). He has shared great insights into designing good protocols, the dirty business surrounding protocols and standardization, and troll-proof organization of communities (as a self-roganizing, distributed team).<br><br>More: See <a href="https://hintjens.wdfiles.com/local--files/books/zguide-c.pdf">Ch.6 The ØMQ Community</a> in the online The ZeroMQ Guide - for C Developers. (He has also <a href="https://hintjens.com/books">other interesting online or paid books</a>.)
<ul>
	<li>Protocol is a contract for working together</li>
	<li>IT should be minimalistic and specific, name the participants, ...</li>
	<li>Protocols and their strandardization are prey to "psychopatic" organizations that want to hijack them for their own profit (by pushing changes that benefit them, taking over the standardization process, ...) (Pieter has experienced it e.g. with AMQP; these trolls always show up). It's advantegous to take control of a successful protocol so that you can make money off it or build stuff on it and sell that. Examples:
<ul>
	<li>Microsoft MS Doc XML  - this "open" spec f.ex. reportedly defines that one functions works "as Word 95"</li>
	<li>A company pushing changes that nobody else really understands, thus undermining compatibility of implementations</li>
	<li>Pushing such changes that an implementor can claim compliance to the standard yet implement it so that his products only work with his products</li>
	<li>Crazy/proprieetary protocol extensions, patenting/trademarking/copyrighting the spec (e.g. TM on Bluetooth)</li>
</ul>
</li>
	<li>Hijacking-safe protocol creation process (beware "predatory maliciousness"):
<ul>
	<li>The specs is GPL =&gt; nobody can capture it (e.g. ZeroMQ)</li>
	<li>The community has clear rules and deals with trolls by kicking them out</li>
	<li>There is a good process for evolving the spec</li>
</ul>
</li>
	<li>How to spec i protocol?
<ul>
	<li>Start with a very, very small and simple contract - only add things that you <em>desperately need</em> - e.g. ZeroMQ v1 had no versioning, security, metadata (versioning added in v2, metadata in v3, ecurity later). You don't know what you really need until you try it. F.ex. even the original AMQP has 60-75% waste in it!!!!</li>
	<li>Do very slow and gradual evolution</li>
	<li>Layering is crucial - keep your protocol on one layer, only specify relevant things, leave the other layers for other specs so they can evolve and age in different speed; the more in a spec the earlier will st. be outdated (Pizza contract says nothing about the kitchen, f.ex.)</li>
</ul>
</li>
	<li>Community and cooperation (See the <a href="https://hintjens.wdfiles.com/local--files/books/zguide-c.pdf">Ch.6 The ØMQ Community</a> mentioned above.)
<ul>
	<li>community needs clear rules to keep trolls away (and they always pop up)</li>
	<li>don't just absorb the damage trolls do, ban them</li>
	<li>self-org., decentralized team</li>
</ul>
</li>
</ul>
<h2>PureScript (Bodil Stokke)</h2>
Working with larger JavaScript apps (&gt; 100 LOC :-)) is painful, primarily due to the lack of type checking and thus requiring one to take lot of care when chaning code so that nothing breaks at runtime. TypeScript is a possible solution but it still feels limited.<br><br>PureScript is very Haskell-like language compiled to JS. It is a pure functional lang, effects are performed only via the Effect Monad (Eff). It is pragmatic w.r.t. interoperability - it is possible to embedd JS code and just add a signature to it, the compiler will trust it.<br><br>Moreover, you can use property-basd testing with QuickCheck and Functional Reactive Programming with Bodil's <a href="https://github.com/bodil/purescript-signal">Signal library</a>. Isn't that wonderful?!<br><br>See the <a href="https://github.com/bodil/purescript-is-magic">PureScript Is Magic</a> code at GitHub, primarily the 150 LOC <a href="https://github.com/bodil/purescript-is-magic/blob/master/src/Main.purs">Main.purs</a>.<br><br>&lt;3<br><br>Category theory notes:
<ul>
	<li>Semigroup is a domain with a cumulative operation (e.g. ints with +)</li>
	<li>Monoid (?) is a semigroup with a unit element, i.e. one where "element operation unit = element" as 0 for + or 1 for *.</li>
</ul>
<h2>Megacore, Megafast, Megacool (Kevin Hammond)</h2>
Interesting research project ParaPhrase for parallelization of code through automatic refactoring and application of any of supported topologies (Farm, Pipeline, Map, ...) - <a href="https://paraphrase-ict.eu/">ParaPhrase-ict.eu</a> and <a href="https://www.project-advance.eu/">www.project-advance.eu</a> (in general the promises of automatizatio regarding fixing software development problems have have hugely underdelivered but still something might be possible). In some cases their solution managed to do in hours what a developer did in days.<br><br>Quote Bob Harper:
<blockquote>The only thing that works for parallelism is functional programming</blockquote>
PS: C++17 is going to have support for parallel and concurrent programming.
<h2> Categories for the Working Programmer (Jeremy Gibbons)</h2>
An elementary intro into category theory in 10 points, yet I got immediately lost. It might be worth to <a href="https://www.codemesh.io/static/upload/media/14153791979335jeremygibbons.pdf">study the slides</a> and look for more <a href="https://www.cs.ox.ac.uk/jeremy.gibbons/">resources at the author's uni page</a> and not-so-active blog <a href="https://patternsinfp.wordpress.com/">Patterns in Functional Programming </a>.
<h2> NoSQL is Dead (Eric Redmond)</h2>
Main message: There is just too many differences between NoSQL DBs for this expression to be meaningful.
<h2>Lobby talks</h2>
<h3>Hacking people</h3>
I had an inpiring lunch chat with Chad and a Polish lady whose name I unfortunately don't know. Their companies do fascinating stuff to leverage the potential of their humans - one has replaced top-down management wrt. projects with environment where there are clear objectives (increase monthly active users) and the freedom to come with ideas to contribute to them, recruit other people for the idea and, if successful, go implement it (while continually measuring against the objectives). Clearly enough it is not easy, some people have troubles trying to manage everything or doing what they believe in without checking the real implect on the objectives etc. but it already provides more value then before. This has been going on for just a few months so hopefully when it settles more we will hear about their experience.<br><br>The other company realized that people are different (wow! how could our industry ignore that?!) and started to go psychological profiling of employees to understand what type of team member they are - a driver, a worker, a critic who is always hunting for possible issues and problems etc. And they compose teams so that they have the right mix of different personalities to avoid both insurpasable conflicts and the risks of group-think.<br><br>I believe this is the future of our industry - really understand people and "hack" our organizations to leverage that for greater happiness and better results.
<h2>Non-talks</h2>
<ul>
	<li>Jessica Kerr: <a href="https://github.com/jessitron/teamo">Simulation of team work and the effect of (no) slack</a><br><br><pre><code></code></pre><br><br>- what happens when you let your programmers crunch work without any slack time? And when you introduce slack? Jessica has made this Scala simulation to produce the results we would expect - much more even production in the slack case, lot of rework after deploying features in the non-slack version. Not at all scientific but very nice when you want to *show* your higher-ups what happens when you do the former or the latter. Some people hear much more to a visual stimuli (even though totally made to conform to the message you want to get across) than tons of theory.</li>
	<li><a href="https://aphyr.com/posts/313-strong-consistency-models">Aphyr - [313] Strong consistency models</a> - "strong consistency" is a much broader term than I expected and not all consistency models are so consistent :-) Check out especially this <a href="https://aphyr.com/data/posts/313/family-tree.jpg">consistency family tree image</a>.</li>
</ul>
++++
