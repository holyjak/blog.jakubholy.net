{:title
 "The Risks Of Big-Bang Deployments And Techniques For Step-wise Deployment",
 :date "2014-02-17",
 :layout :post,
 :tags ["opinion" "DevOps"],
 :tags-orig ["deployment" "opinion"],
 :categories ["SW development"],
 :extra-css #{}
}

++++
<em>If you ever need to persuade management why it might be better to deploy a larger change in multiple stages and push it to customers gradually, read on.</em><br><br><img class="alignleft" style="margin-right:10px;" title="By demplex.deviantart.com" src="https://lh5.googleusercontent.com/-tbJyBUX-TPo/UwRnJ_kVDpI/AAAAAAAACto/PvdejoXUTw4/w533-h512-no/explosion_by_demplex-d5vrrpr.png" alt="" width="320" height="307" />A deployment of many changes is risky. We want therefore to deploy them in a way which minimizes the risk of harm to our customers and our companies. The deployment can be done either in an all-at-once (also known as big-bang) way or a gradual way. We will argue here for the more gradual ("stepwise") approach.<br><br><h2>Big-bang or stepwise deployment?</h2><br><br>A big-bang deployment seems to be the natural thing to do: the full solution is developed and tested and then replaces the current system at once. However, it has two crucial flaws.<br><br><!--more--><br><br>First, it assumes that most defects can be discovered by testing. However, due to differences in test/prod environments, unknown dependencies, and the sheer scale of a typical larger system there always will be problems that are not discovered until production deployment or even until the application runs for a while in production (which <a href="https://www.dn.no/forsiden/naringsliv/article2753750.ece">applies even to airplanes</a>). The more parts have been changed, the more of these production defects will happen at the same time. A gradual deployment makes it possible to discover and handle them one by one.<br><br>Second, the more complex the deployment, the higher chance of human error(s), i.e. the deployment itself is a likely source of serious defects.<br><br>Some of the drawbacks of a big-bang deployment in more detail:<br><br><ol>
    <li>Complexity: A big-bang deployment requires coordination of many people and "moving parts" that depend on each other, providing a huge opportunity for human mistake (i.e. there <em>will be</em> mistakes).</li>
    <li>Lot of time: Such a deployment requires lot of time (typically also more than planed/expected) and thus lot of downtime when users cannot use the system.</li>
    <li>Hard troubleshooting: With a network of inter-dependent parts that changed all at the same time, while perhaps also changing the infrastructure (i.e. connections between them), it is extremely hard to pinpoint the source of defects, thus considerably increasing the time to detect and correct defects while also increasing the risk of people stepping on the toes of each other and "panic fixes" that either cause more problems than they remove or are not good enough (as the rollback that sped up <a href="https://pythonsweetness.tumblr.com/post/64740079543/how-to-lose-172-222-a-second-for-45-minutes">Knight's downfall</a>).</li>
    <li>Rollback is likely either impossible or equally time-consuming and risky as the deployment itself, thus increasing the impact of defects and inviting even more human errors.</li>
    <li>Impact: Deploying everything to all users at the same time means that everybody will be impacted by a potential defect/error/mistake.</li>
    <li>Long freeze: All needs to be tested together after all development is finished, which requires a lot of time while the code is frozen and no more fixes and changes can get into production for weeks.</li>
</ol><br><br><h2>Risk mitigation</h2><br><br>The goal of a good deployment plan is to mitigate the risk of the deployment and get it to an acceptable level. There are two aspects to risk: the <em>probability</em> of a defect and the <em>impact</em> of the defect. The following table shows how the possible measures affect them:<br><br><table border="1px">
<tbody>
<tr>
<th>Defect probability reduction</th>
<th>Defect impact reduction</th>
</tr>
<tr>
<td>testing</td>
<td>
<ul>
    <li>stepwise deployment</li>
    <li>gradual migration of users to the new version (f.ex. 1 in 1000 or particular subsets)</li>
    <li>rollback mechanism</li>
</ul>
</td>
</tr>
<tr>
<td></td>
<td><em>=&gt; these also lead to much lower time to detect and fix defects</em></td>
</tr>
</tbody>
</table><br><br><h2>Practices for stepwise deployment</h2><br><br>Enable stepwise deployment: Use <a href="/wiki/development/parallel-design-parallel-change/">parallel change</a> and other <a href="https://www.amazon.com/dp/0321601912?tag=contindelive-20">Continuous Delivery</a> techniques to make it possible to deploy updated components independently from each other and to switch on/off new features and to switch what versions of the components they depend on are currently used. (Parallel change - keeping the old and new code and being able to use one or the other - is crucial here. Also notice that parallel change applies also to data - you will need to evolve your data schema gradually and keep both old and new one at the same time in a period of time.)<br><br>Enable rollback. The previous measure - stepwise deployment - makes it also easy(ier) to roll-back the changes by switching to a previous version of a dependency or by switching back to the old code.<br><br>Migrate users gradually to the new version, i.e. expose the new version only to a small subset of the users initially and increase that subset until everybody uses it. This can be done f.ex. by deploying to only a subset of servers and sending a random/particular subset of users to the new servers but there are also ways if you have only a single machine. (See f.ex. my post <a title="Permanent link to Webapp Blue-Green Deployment Without Breaking Sessions/With Fallback With HAProxy" href="/2013/09/05/blue-green-deployment-without-breaking-sessions-with-haproxy-and-jetty/" rel="bookmark">Webapp Blue-Green Deployment Without Breaking Sessions/With Fallback With HAProxy</a>.)<br><br>Monitoring - make sure you are able to monitor flow of users through the system and detect any anomalies and errors early, long before angry calls from the business. Tools such as <a href="https://logstash.net/">Logstash</a>, Google Analytics (with custom events from JavaScript), <a href="https://dev.opera.com/articles/view/client-side-error-logging/">client-side error logging</a> via one of<a href="https://plus.google.com/+PaulIrish/posts/12BVL5exFJn"> existing services</a> or a custom solution are invaluable.<br><br><h2>Making the right decision</h2><br><br>Henrik Kniberg (Spotify, Lean from Trenches) <a title="Dyr lärdom från PUST: hur undvika nya IT-fiaskon?" href="https://blog.crisp.se/2014/02/21/henrikkniberg/pust-lardomar">describes how the Swedish police decided</a>, under the influence of its CIO and an Oracle/Siebel consultant and against the will of the IT department, to throw away the successful PUST project, implemented in an agile way, and do it from scratch based on Siebel, i.e. a standardized platform, with the wishfull-thining-driven idea of lowered operational/maintenance costs. They also decided against iterative development and in favor of a single big-bang deployment at the end. It was a disaster. Kniberg takes to main lessons from this fiasko:<br><br><ol>
    <li>Never take important technical decision without involving those that should build the solution. (Hint: "involving" does not mean asking for input and then deciding however you want anyway.)</li>
    <li>Work iteratively, in collaboration with the right users, deploy early limited pilot versions to the right users, improve the product continually based on their feedback.</li>
</ol><br><br>Main point for me: When management decides whether it should do a gradual or a big-bang deployment, it should take the opinion of developers and ops people really seriously and not just as one of inputs.<br><br><p style="text-align:center;"><em>You might enjoy also other <a href="/tag/opinion/">posts on effective development</a>.</em></p>
++++
