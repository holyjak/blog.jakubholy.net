{:title "Most interesting links of July '14",
 :date "2014-07-31",
 :layout :post,
 :tags ["clojure" "design" "ClojureScript" "DevOps" "human" "data"],
 :tags-orig
 ["bigdata"
  "clojure"
  "ClojureScript"
  "design"
  "economics"
  "human"
  "linux"
  "mobile"
  "society"
  "types"],
 :categories ["General" "Languages" "Top links of month"],
 :extra-css #{}
}

++++
<h2>Recommended Readings</h2>
<ul>
	<li>Video: <a href="https://www.infoq.com/presentations/dynamic-static-typing">The Unreasonable Effectiveness of Dynamic Typing for Practical Programs</a> - a static-typing zealot turned friend of dynamic typing under the experience of real-world projects and problems shares thoughts about the limits of type systems (f.ex. both energy and <a title="moment of force, the tendency of a force to rotate an object about an axis" href="https://en.wikipedia.org/wiki/Torque">torque</a> are measured in N*m yet cannot be combined) and their cost: according to the <a href="https://dl.acm.org/citation.cfm?doid=1869459.1869462">Hanenberg's experiment about static and dynamic typing</a> =&gt; the time required to handle the time chacker &gt; time to debug the errors that it would have caught. According to a review of issues at GitHub, only 2% of reported issues for JS, Clojure, Python, and Ruby are type errors and for a large, closed-source Python project type/name/attribute errors were 1%. "<em>I have come to believe that tests are a much better investment [than static typing].</em>" Rigorous type system/model =&gt; limited applicability (due to different needs) &lt;=&gt; modelling some things with types doesn't cut it. "<em>Are the costs of static typing offset by a few percent fewer defects? Is agility more important than reliability?</em>" "<em>Static types are anti-modular</em>" - too a tight coupling. "<em>Static type checking comes at the expense of complexity, brittleness and a tendency to monoliths.</em>"
(Personally I miss static typing - but that is perhaps due to having relied on it for so long.)</li>
	<li><a href="https://www.thoughtworks.com/radar/#/">ThoughtWorks Tech Radar July 2014</a> (<a href="https://thoughtworks.fileburst.com/assets/technology-radar-july-2014-en.pdf">pdf</a>): f.ex. Ansible in Adapt, Masterless Chef/Puppet in Trial, Machine image as a build artifact: Trial, PostgreSQL for NoSQL: Trial, Adopt <a href="https://dropwizard.github.io/dropwizard/">Dropwizard</a> (Rest 4 Java), Go lang, Reactive Extensions across langs [JH: <a href="https://github.com/Netflix/RxJava">RxJava</a>, <a href="https://github.com/Reactive-Extensions/RxJS">RxJS</a>, ..]; Asses <a href="/2013/06/28/brief-intro-into-randomstochasticprobabilistic-testing/">Property-based (generative) testing</a>, ... . Other highlights: <a href="https://www.mapbox.com/">Mapbox</a> (open-source mapping platform), <a href="https://openid.net/connect/">OpenID Connect</a> as a less complex and thus promising alternative to SAML/generic OAuth, <a href="https://thoughtworks.github.io/pacto/">Pacto</a>/<a href="https://github.com/realestate-com-au/pact">Pact</a> for Consumer-Driven Contracts (contract =&gt; simulate consumers/stubb producers =&gt; test your REST clients against the contract so that the rest of tests can assume it is correct and use a stubbed client), <a href="https://helloreverb.com/developers/swagger">Swagger</a> for REST documentation.</li>
	<li><a href="https://johannesbrodwall.com/2014/07/10/the-madness-of-layered-architecture/">The madness of layered architecture</a> - a nice critique of over-designed "enterprise" apps, why that is a problem (SRP, cost of code, unclear where to do a change, ....), why it is different from the successful layered network stack of Ethernet/IP/TCP/... (because in an app, all layers are on the same level of abstraction); bottom line: do not add a layer unless you have a really good reason (hint: the advice of a consultant/speaker does not count as one)</li>
	<li><a href="https://www.infoq.com/articles/qcon-new-york-2014">Key Takeaway Points and Lessons Learned from QCon New York 2014</a> (viz <a href="twitter.com/RiczWest">@RiczWest</a>) - "[..] <em>deep insights into real-world architectures and state of the art software development practices, from a practioner’s perspective.</em>" - architectures of Fb, Foursquare etc., continuous delivery, creating culture, real world functional programming, ... .</li>
	<li><a href="https://radar.oreilly.com/2014/07/questioning-the-lambda-architecture.html">Questioning the Lambda Architecture</a> (J. Kreps of LinkedIn) - maintaining the same processing in two very different systems (one batch, one stream &amp; real-time) is a maintenance nightmare =&gt; improve the RT/stream processing to handle re-processing and thus both (using e.g. Kafka to store the data and thus be able to re-play them)</li>
	<li><a href="https://developers.google.com/webmasters/smartphone-sites/website-improvement-checklist">Google: Checklist for mobile website improvement</a></li>
	<li><a href="https://m.infoworld.com/t/hadoop/why-google-cloud-dataflow-no-hadoop-killer-245212">Google Dataflow and the transition from batch to stream processing</a> - G. Dataflow might not be a Hadoop killer due to requiring that the data are in the Google Cloud but the trend is clear, going away from batch processing to more stream-oriented processing with tools like Spark, Flume etc. that are faster thanks to using memory better and more flexible thanks to not being limited to the rigitd two-stage model of map-reduce. (Reportedly, Google - the one that made Map-Reduce popular - doesn't use it anymore.)</li>
	<li><a href="https://augustl.com/blog/2014/extracting_java_to_folder_no_installer_osx/">OS X: Extract JDK to folder, without running installer</a></li>
</ul>
Society, economics, people
<ul>
	<li><a href="https://blogs.hbr.org/2014/06/the-power-of-meeting-your-employees-needs/">HBR: The Power of Meeting Your Employees’ Needs</a> - people feel better, perform better, are more engaged and likely to stay longer (=&gt; profitability) when 4 basic needs are met: physical [energy] renewal (=&gt; give opportunity, encourage to take a nap or do whatever that helps), value - feeling of being valued by the company, ability to focus, purpose (i.e. serving something larger than ourselves). "<em>What’s surprising about our survey’s results is how dramatically and positively getting these needs met is correlated with every variable that influences performance. It would be statistically significant if meeting a given need correlated with a rise of even one or two percentage points in a performance variable such as engagement, or retention. Instead, we found that <strong>meeting even one of the four core needs had a dramatic impact on every performance variable we studied</strong>. [..] when all four needs are met, the effect on engagement rises from 50% for one need, to 125%. Engagement, in turn, has been positively correlated with profitability. [..] employers with the most engaged employees were 22% more profitable than those with the least engaged employees.</em>"
"<em>[..] those who were encouraged to take intermittent breaks reported they were 50% more engaged, more than twice as likely to stay with the company, and twice as healthy overall. Valuing and encouraging renewal requires no financial investment. What it does require is a willingness among leaders to test their longstanding assumption that that performance is best measured by the number of hours employees puts in – and the more continuous the better — rather than by the value they generate, however they choose to do their work.</em>"</li>
	<li><a href="https://www.politico.com/magazine/story/2014/06/the-pitchforks-are-coming-for-us-plutocrats-108014_full.html">The Pitchforks Are Coming… For Us Plutocrats</a> - increasing inequality will eventually lead to the collapse of the sysem (at least so does teach the history). It is people - primarily the middle class - that are the source of the wealth of the society, they produce and also consume most. Thus it is necessary to support them ...</li>
	<li><a href="https://knowledge.wharton.upenn.edu/article/u-s-corporate-world-became-bull-market-corruption-bad-conduct/">Why the U.S. Corporate World Became ‘A Bull Market for Corruption’</a> - Enron, GM, Goldman Sachs, ... - we hear more and more the names of large corporations in the context of negligence and misues of their customers and investors. It seems that leadership (in the lead by example sense) has died out as well as the feeling of responsibility when one wields power over her customers/investors/markets. Instead, we have the me-first and  money at any cost thinking. Organizations are designed to shield higher-ups from responsibility (meetings with no records...). High pay for short term gains, failure to punish high ranking people.</li>
	<li>(US) <a href="https://www.washingtonpost.com/posteverything/wp/2014/07/08/this-is-what-happened-when-i-drove-my-mercedes-to-pick-up-food-stamps/">This is what happened when I drove my Mercedes to pick up food stamps</a> - the experience of life in poverty after dropping down from $125k to $25k/year in two months due to childbirth, real estate market crash, and loss of a job. "<em>Using the coupons was even worse. The stares, the faux concern, the pity, the outrage — I hated it. [..] That’s the funny thing about being poor. Everyone has an opinion on it, and everyone feels entitled to share. [..] Poverty is a circumstance, not a value judgment. I still have to remind myself sometimes that I was my harshest critic. That the judgment of the disadvantaged comes not just from conservative politicians and Internet trolls. It came from me, even as I was living it.</em>"</li>
</ul>
<h2>Clojure Corner</h2>
<ul>
	<li><a href="https://domkm.com/posts/2014-06-15-isomorphic-clojure-1/">Isomorphic Clojure[Script], part I</a> - enjoying all the benefits of Single-Page Apps while avoiding their drawbacks (SEO, slower page load, accessibility etc.) - a SPA that can be pre-rendered by the server. Using Om/React, JDK8 with the Nashorn JS engine, core.async, Sente (bi-dirrectional HTTP/WS communication over core.async) and Clojure in the JVM, ClojureScript in Nashorn in the JVM, and ClojureScript in the browser. Example app: <a href="https://github.com/DomKM/omelette">Omelette</a>.</li>
	<li><a href="https://thegeez.net/2014/04/30/datascript_clojure_web_app.html">clj-crud: a relatively feature-complete example of a Clojure web</a> (4/2014; <a href="https://github.com/thegeez/clj-crud">GitHub</a>) - using Component, Liberator (REST), Datascript + Quiescent (=&gt; React.js), Enlive, Friend etc. including couple of unit-test and ui-test libraries</li>
	<li><a href="https://github.com/nilswloka/conclujon">Conclujon: Acceptance testing tool</a> (α), Clojure reimplementation of <a href="https://concordion.org/">Concordion</a>, a beautifully simple ADD tool</li>
	<li><a href="https://github.com/frenchy64/dynalint">dynalint: human-friendly error messages during dev</a> - Clojure typically provides little helpful and sometimes confusing error messages thrown from somewhere deep in the implementation, such as "<em>Don't know how to create ISeq from: java.lang.Long at clojure.lang.RT.seqFrom</em>" while we want st. like "<em>First argument to clojure.core/first must be seqable: 1 (instance of class java.lang.Long</em>" - and that's what Dynalint does. In the tradition of defensive programming, it adds checks and good error messages to Vars at runtime. You typically run it only during dev, triggering it from the REPL.</li>
	<li><a href="https://grimoire.arrdem.com/">Grimoire</a> (Reid McKenzie) - a more up-to-date replacement for ClojureDocs</li>
	<li><a href="https://adambard.com/blog/greatest-clojure-hits/">Adam Bard's Top Clojure Articles</a> for beginners and intermediate Clojure devs - f.ex. Five Mistakes Clojure Newbies Make, Acceptable Error Handling in Clojure, Clojure Reducers for Mortals</li>
	<li>J. Wilk: <a href="https://blog.josephwilk.net/clojure/isolating-external-dependencies-in-clojure.html">Isolating External Dependencies in Clojure</a> - a nice overview of the options and their pros and cons - with-redefs, alter-var-root, Midje (using alter-var-root in a more controlled manner), higher-order-functions (#1!) etc.</li>
	<li><a href="https://gist.github.com/philandstuff/299cda371c7e74b03f18">philandstuff's detailed notes from Euroclojure 2014</a></li>
</ul>
<h2>Tools/Libs</h2>
<ul>
	<li><a href="https://nixos.org/nixos/about.html">NixOS</a> (via <a href="twitter.com/bodil/">@bodil</a>) - a new interesting "purely functional" Linux distribution - system configuration is fully declarative (think of Puppet/Chef) and it is always trivial to roll back, you can have multiple versions of a package, users can install non-global SW</li>
	<li><a href="https://influxdb.com/">InfluxDB</a> - time series, metrics, and events DB that scales; contrary to Graphite it can store richer data than Graphite and its single value; additional highlights: authorization for individual data, roll-up/clean old data, https API. Written in Go.</li>
</ul>
++++
