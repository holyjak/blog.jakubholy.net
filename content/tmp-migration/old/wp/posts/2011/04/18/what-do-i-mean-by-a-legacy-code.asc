{:title "What Do I Mean by a Legacy Code?",
 :date "2011-04-18",
 :layout :post,
 :tags ["book" "opinion" "java" "quality"],
 :tags-orig ["book" "java" "opinion" "quality"],
 :categories ["Languages"],
 :extra-css #{}
}

++++
I'm using the term "legacy code" quite a lot, what do I mean by it? I like most the R. C. Martin's description in his foreword to theÂ Michael Feathers' book <a href="https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052/ref=sr_1_1?ie=UTF8&amp;qid=1303113906&amp;sr=8-1">Working Effectively with Legacy Code</a>:
<blockquote>It conjures images of slogging through a murky swamp of tangled undergrowth with leaches beneath and stinging flies above. It conjures odors of murk, slime, stagnancy, and offal.</blockquote>
<!--more-->M. Feathers himself first repeates a common definition:
<blockquote>Legacy code is code that we've gotten from someone else.</blockquote>
He then acknowledges that in programmer's mind the term legacy code means much more, something that has nothing to do with who wrote it:
<blockquote>If you are at all like me, you think of tangled, unintelligible structure, code that you have to change but don't really understand. You think of sleepless nights trying to add in features that should be easy to add, and you think of demoralization, the sense that everyone on the team is so sick of a code base that it seems beyond care, the sort of code that you just wish would die. Part of you feels bad for even thinking about making it better. It seems unworthy of your efforts.</blockquote>
In summary, legacy code is "used as a slang term for difficult-to-change code that we don't understand." But M. Feathers sumes up with a different definition he's arrived to over the years:
<blockquote>To me, <em>legacy code</em> is simply code without tests.</blockquote>
He justifies his definition by explaining:
<blockquote>Code without tests is bad code. It doesn't matter how well written it is; it doesn't matter how pretty or object-oriented or well-encapsulated it is. With tests, we can change the behavior of our code quickly and verifiably. Without them, we really don't know if our code is getting better or worse.</blockquote>
I pretty much agree with all the descriptions and definitions. We could expand them a lot, talk about dependencies, insufficient abstractions etc., but I think that though not very scientific, the descriptions express very well what we mean by <em>legacy code</em> and Mike provides us with a very simple and easily verifiable definition.<br><br><strong>Update</strong>: To get a better grasp of what legacy code is, check the "<a href="https://stackoverflow.com/questions/184618/what-is-the-best-comment-in-source-code-you-have-ever-encountered?page=1&amp;tab=votes#tab-top">best comments ever</a>" - some of them express it pretty well.
++++
