{:title "What I've Learned from (Nearly) Failing to Refactor Hudson",
 :date "2011-04-28",
 :layout :post,
 :tags ["java" "legacy" "quality"],
 :tags-orig ["java" "legacy" "quality"],
 :categories ["General" "Languages"],
 :extra-css #{}
}

++++
We've <a href="/2011/04/16/refactoring-the-legacy-hudson-java-with-the-mikado-method-as-a-code-dojo/">tried to refactor Hudson.java</a> but without success; only later have I been able to refactor it successfully, thanks to the experience from the first attempt and more time. In any case it was a great learning <a href="https://dilbert.com/strips/comic/2009-09-24/">opportunity</a>.
<h2>Lessons Learned</h2>
The two most important things we've learned are:
<ul>
	<li>Never underestimate legacy code. It's for more complex and intertwined than you expect and it has more nasty surprises up in its sleeves than you can imagine.</li>
	<li>Never underestimate legacy code.</li>
</ul>
And another important one: when you're tired and depressed, have some fun reading the "<a href="https://stackoverflow.com/questions/184618/what-is-the-best-comment-in-source-code-you-have-ever-encountered">best comments ever</a>" at StackOverflow :-). Seeing somebody else' suffering makes one's own seem to be smaller.<br><br>I've also started to think that the refactoring process must be more rigorous to protect you from wandering too far your original goal and from getting lost in the eternal cycle of fixing something &lt;-&gt; discovering new problems. People tend to do depth-first refactoring changes that can easily lead them astray, far from where they actually need to go; it is important to stop periodically and look at where we are, where we are trying to get and whether we aren't getting lost and shouldn't just prune the current "branch" of refactorings and return to some earlier point and try perhaps a completely different solution. I guess that one of the key benefits of the <a href="https://danielbrolund.wordpress.com/2009/03/28/start-paying-your-technical-debt-the-mikado-method/">Mikado method</a> is that it provides you with this global overview - which gets easily lost when it is only in your head - and with points to roll-back to.
<h3>Evils of Legacy Code</h3>
Use a dependency injection framework, for God's sake! Singletons and their manual retrieval really complicate testing and affect the flexibility of the code.<br><br>Don't use public fields. They make it really hard to replace a class with an interface.<br><br>Reflection and multithreading make it pretty difficult if not impossible to find out the dependencies of a particular piece of code and thus the impacts of its change. I'd hard time finding out all the places where Hudson.getInstance is invoked while its constructor is still running.
<h2>Our Way to Failure and Success</h2>
There is a lot of refactoring that could be done with Hudson.java, for it is a typical <a href="https://c2.com/cgi/wiki?GodClass">God Class</a> which additionally spreads its tentacles through the whole code base via its evil singleton instance being used by just about anyone for many different purposes. Gojko describes some of the <a href="https://gojko.net/2011/04/05/how-is-it-even-possible-code-to-be-this-bad/">problems worth removing</a>.
<h3>The Failure</h3>
We've tried to start small and "normalize" the singleton initialization, which isn't done in a factory method, but in the constructor itself. I haven't chosen the goal very well as it doesn't bring much value. The idea was to make it possible to have potentially also other implementations of Hudson - e.g. a MockHudson - but with respect to the state of the code it wasn't really feasible and even if it was, a simple Hudson.setInstance would perhaps suffice. Anyway we've tried to create a factory method and move the initialization of the singleton instance there but at the end we got lost in concurrency issues: there were either multiple instances of Hudson or the application deadlocked itself. We tried to move pieces of code around, but the dependencies wouldn't have let us do that.
<h3>The Success</h3>
While reflecting on our failure I've come to the realization that the problem was that Hudson.getInstance() is called (many times) already during the execution of the <a href="https://github.com/iterate/coding-dojo/blob/a83c202519bf693115bad05a19fceb7725876664/2011-04-26-refactoring_hudson/core/src/main/java/hudson/model/Hudson.java#L613">Hudson's constructor</a> by the objects used there and threads started from there. It is of course a hideous practice to access a half-baked instance before it is fully initialized. The solution is then simple: <em>to be able to initialize the singleton field outside of the constructor, we must remove all calls to getInstance from its context</em>.<br><br><a href="https://lh5.googleusercontent.com/_btcPMCQkYvg/TbgptkOKaII/AAAAAAAABqc/qx6UEA4Wzno/s912/Introduce_Hudson_factory-mikadog.png"><img title="Click for full size" src="https://lh5.googleusercontent.com/_btcPMCQkYvg/TbgptkOKaII/AAAAAAAABqc/qx6UEA4Wzno/s640/Introduce_Hudson_factory-mikadog.png" alt="" width="640" height="216" /></a><br><br>The steps can be seen very well from the <a href="https://github.com/iterate/coding-dojo/commits/master/2011-04-26-refactoring_hudson">corresponding GitHub commits</a>. Summary:
<ol>
	<li>I used the "introduce factory" refactoring on the constructor</li>
	<li>I modified ProxyConfiguration not to use getInstance but to expect that the root directory will be set before its first use</li>
	<li>I moved the code that didn't need to be run from the constructor out, to the new factory method - this resulted in some, hopefully insignificant, reordering of the code</li>
	<li>Finally, I also moved the instance initialization to the factory method</li>
</ol>
I can't be 100% sure that the resulting code has the same semantic as far as it matters, for I had to do few changes outside of the safe automated refactorings and there are no useful tests except for trying to run the application (and, as is common with legacy applications, it wasn't feasible to create them beforehand).<br><br>The refactored code doesn't provide much added value yet but it is a good start for further refactorings (which I won't have the time to try :-( ), it got rid of the offending use of an instance while it is being created and the constructor code is simpler and better. The exercise took me about four <a href="https://www.pomodorotechnique.com/">pomodoros</a>, i.e. little less than two hours.<br><br>If I had the time, I'd continue with extracting an interface from Hudson, moving its unrelated responsibilities to classes of their own (perhaps keeping the methods in Hudson for backwards compatibility and delegating to those objects) and I might even  use some AOP magic to get a cleaner code while preserving binary compatibility  (as Hudson/Jenkins actually <a href="https://bridge-method-injector.infradna.com/">already does</a>).
<h2>Try it for Yourself!</h2>
<h3>Setup</h3>
<h4>Get the code</h4>
<a href="https://github.com/iterate/coding-dojo/zipball/INITIAL">Get the code as .zip</a> or via git:<br><br><pre><code>
git@github.com:iterate/coding-dojo.git # 50MB =&gt; takes a while
cd coding-dojo
git checkout -b mybranch INITIAL
</code></pre>
<h4>Compile the Code</h4>
as described in the <a href="https://github.com/iterate/coding-dojo/blob/INITIAL/2011-04-26-refactoring_hudson/README-iteratedojo.rst">dojo's README</a>.
<h4>Run Jenkins/Hudson</h4>
<pre><code>
cd coding-dojo/2011-04-26-refactoring_hudson/
cd maven-plugin; mvn install; cd ..       # a necessary dependency
cd hudson/war; mvn hudson-dev:run
</code></pre><br><br>and browse to <a href="https://localhost:8080/">http://localhost:8080/</a> (Jetty should pick changes to class files automatically).
<h3>Further Refactorings</h3>
If you're the adventurous type, you can try to improve the code more by splitting out the individual responsibilities of the god class. I'd proceed like this:
<ol>
	<li>Extract an interface from Hudson and use it wherever possible</li>
	<li>Move related methods and fields into (nested) classes of their own, the original Hudson's methods just delegate to them (the move method refactoring should be useful); for example:</li>
<ul>
	<li>Management of extensions and descriptors</li>
	<li>Authentication &amp; authorization</li>
	<li>Cluster management</li>
	<li>Application-level functionality (control methods such as restart, updates of configurations, management of socket listeners)</li>
	<li>UI controller (factoring this out would require re-configuration of Stapler)</li>
</ul>
	<li>Convert the nested classes into top-level ones</li>
	<li>Provide a way to get instances of the classes without Hudson, e.g. as singletons</li>
	<li>Use the individual classes instead of Hudson wherever possible so that other classes depend only on the functionality they actually need instead of on the whole of Hudson</li>
</ol>
<h3>Learning about Jenkins/Hudson</h3>
If you want to understand mode about what Hudson does and how it works, you may check:
<ul>
	<li><a href="https://wiki.hudson-ci.org/display/HUDSON/Architecture">Hudson's Architecture</a> and optionally proceed with</li>
<ul>
	<li><a href="https://wiki.hudson-ci.org/display/HUDSON/Remote+access+API">Hudson's Remote Access API</a></li>
	<li><a href="https://wiki.hudson-ci.org/display/HUDSON/Extension+points">Extension points</a></li>
	<li><a href="https://wiki.hudson-ci.org/display/HUDSON/Exposing+data+to+the+remote+API">Exposing data to the remote API</a></li>
</ul>
	<li><a href="https://wiki.hudson-ci.org/display/HUDSON/Building+Hudson">Building Hudson</a></li>
	<li><a href="https://stapler.java.net/what-is.html">Introduction into the UI framework Stapler</a> (its key feature is that it cleverly maps URLs to object hierarchies [and view files and action methods]), perhaps check also <a href="https://stapler.java.net/reference.html">Stapler's reference</a></li>
</ul>
<h2>Sidenote: Hudson vs. Jenkins</h2>
Once upon time there was a continuous integration server called Hudson but after its patron Sun died, it ended up in the hands of a man called Oracle. He wasn't very good at communication and nobody really knew what he is up to so when he started to behave little weird - or at least so the friends of Hudson perceived it - those worried about Hudson's future (including most people originally working in the project) made its clone and named it Jenkins, which is another popular name for butlers. So now we have Hudson backed by Oracle and the maven guys from Sonatype and Jenkins, supported by a vivid community. This exercise is based on the source code of the Jenkins, but to keep the confusion level low I refer to it often as Hudson for that is how the package and main class are called.
<h2>Conclusion</h2>
Refactoring legacy code always turns out to be more complicated and time-consuming than you expect. It's important to follow some method - e.g. the Mikado method - that helps you to keep a global overview of where you want to go and where you are and to regularly consider what and why you're doing so that you don't get lost in a series of fix a problem - new problems discovered steps. It's important to realize when to give up and try a different approach. It's also very hard or impossible to write tests for the changes so you must be very careful (using safe, automated refactorings as much as possible and proceeding in small steps) but fear shouldn't stop you from trying to save the code from decay.
++++
