{:title "How stateless can you go?",
 :date "2011-04-29",
 :layout :post,
 :tags ["java"],
 :tags-orig ["coding" "fp" "java"],
 :categories ["Languages"],
 :extra-css #{}
}

++++
I've attended an Oslo Coding <a href="https://www.meetup.com/OsloCodingDojo/events/17242062/">Dojo named "How stateless can you go?"</a> lead byÂ <a href="https://kjeldahlnilsson.net/">Thomas K. Nilsson</a>. The goal was to write a toString() method for a tree structure printing nodes with proper indentation w.r.t. their depth and then to make it as stateless as possible without any other regard (such as performance or cleanliness of the code).<br><br>It was very interesting to compare the original, stateful version and the resulting stateless one and to see the solution in various languages (Haskell, Clojure, Groovy, C#, Java, Scala) - it looked actually pretty similar in all.<br><br>What I've learned is that stateless (i.e. functional-style) code looks much cleaner for you get rid of lot of noise such as local variables and loops. In practice it is important to use a language with an efficient implementation of recursion (especially <a href="https://en.wikipedia.org/wiki/Tail_call">tail-recursion</a>) and with data structures that lead themselves easily to recursive processing, i.e. make it easy and efficient to process the first element of a collection and do that recursively for the rest without modifying the collection (and providing utility methods like each). It is of course best to have languages that support map/reduce.<br><br>You can <a href="https://github.com/thomanil/osloCodingDojoApril2011">check the slides and various solutions at GitHub</a> and see our primitive and stateless implementations below. (We did it in a nearly TDD-manner, but I won't include the test here as it isn't essential.)<br><br><strong>Update</strong>: There are <a href="https://www.meetup.com/OsloCodingDojo/events/17242062/">more solutions</a> linked to from the meetup's comments - search for "github" - and there is also a link to an article series for <a href="https://prog21.dadgum.com/23.html">deeper discussion of challenges in writing pure and stateless code</a>.<br><br><!--more-->
<h2>Solution by Jakub &amp; Anders</h2>
<h3>The Primitive Implementation</h3>
<pre><code>
// ...
   @Override
   public String toString() {
      return toString(0);
   }<br><br>   private String toString(final int nesting) {
      String tabs = &quot;&quot;;
      for (int i = nesting; i &gt; 0; i--)
         tabs += &quot;\t&quot;;<br><br>      return tabs + this.content + &quot;\n&quot;
         + printChildren(nesting + 1, new LinkedList(this.children));
   }<br><br>   private String printChildren(int nesting, List children) {
      String result = &quot;&quot;;
      for (Node child : children) {
         result += child.toString(nesting);
      }
      return result;
   }
// ...
</code></pre>
<h3>Going Stateless</h3>
Loops removed:<br><br><pre><code>
// ...
@Override
   public String toString() {
      return toString(&quot;&quot;);
   }<br><br>   private String toString(final String indentation) {
      return indentation + this.content + &quot;\n&quot;
         + printList(indentation + &quot;\t&quot;, new LinkedList(this.children));
   }<br><br>   private String printList(String indentation, LinkedList children) {
      if (children.isEmpty()) return &quot;&quot;;
      return children.pop().toString(indentation) + printList(indentation, children);
   }
// ...
</code></pre><br><br>Cloning the List is perhaps not a good thing from the performance point of view, but that wasn't the concern here; other languages can deal with that much more efficiently than Java. Anyway I've created a version without it (but with ugly integer constants instead):<br><br><pre><code>
// ...
   private String toString(final String indentation) {
      return indentation + content + &quot;\n&quot;
         + printList(indentation + &quot;\t&quot;, children);
   }<br><br>   private String printList(String indentation, List children) {
      if (children.isEmpty()) return &quot;&quot;;
      return children.get(0).toString(indentation)
         + printList(indentation, children.subList(1, children.size()));
   }
// ...
</code></pre>
<h3>Appendix: The Node Class</h3>
The rest of the Node class representing the tree to be printed is the same in all our solutions:<br><br><pre><code>
package scotsman;<br><br>import java.util.LinkedList;
import java.util.List;<br><br>public class Node {<br><br>   private String content;
   private List children;<br><br>   public Node(String content) {
      this(content, new LinkedList());
   }<br><br>   public Node(String content, List children) {
      this.content = content;
      this.children = children;
   }<br><br>   public Node withChild(Node child) {
      children.add(child);
      return this;
   }<br><br>   // toString implementation comes here...<br><br>}
</code></pre>
<h2>Conclusion</h2>
Functional programming is cool. Being in Oslo is cool. :-)
++++
