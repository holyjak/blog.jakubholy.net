{:title
 "How to customize CKEditor with your own plugins, skins, configurations",
 :date "2011-04-04",
 :layout :post,
 :tags ["library"],
 :tags-orig ["ckeditor"],
 :categories ["General"],
 :extra-css #{}
}

++++
This post summarizes what I've learned about customizing the open-source WYSIWYG rich-text editor CKEditor 3.5.2 with one's own plugins, skins, and configurations. There is already a lot of good resources so wherever possible I will link to them and just summarize and/or supplement them. However I've found no overall guide for customizing CKEditor and thus intend to fill this vacancy.
<!--more-->
<h2>Introduction</h2>
CKEditor is a popular rich-text editor implemented in JavaScript. Its architecture makes heavy use of plugins and events and it is very configurable and customizable. Its documentation is thousandfold better than in the 2.x version but still you can't find there everything you might want.<br><br>To try out check the <a href="https://ckeditor.com/demo">CKEditor's demo</a>.
<h2>Customizing CKEditor</h2>
<h3>Layout of the customized CKEditor installation</h3>
The structure of our customized CKEditor is as follows:
<ul>
	<li>&lt;my web root&gt;/myckeditor/
<ul>
	<li>custom_configurations/</li>
	<li>custom_plugins/</li>
	<li>custom_skins/</li>
	<li>editor/ - the original distribution of CKEditor, i.e. the content of ckeditor_3.5.2.zip/ckeditor/
<ul>
	<li>_samples</li>
	<li>_source/</li>
	<li>lang/</li>
	<li>ckeditor.js</li>
	<li>ckeditor_source.js</li>
	<li>...</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3>Custom configurations</h3>
You will need to change CKEditor's configuration and the best way to do so is perhaps to create your own configuration file, as described on the <a href="https://docs.cksource.com/CKEditor_3.x/Developers_Guide/Setting_Configurations">CKEditor's configuration page</a>. You then tell CKEditor to load it when initializing it:<br><br><pre><code>
&lt;textarea name=&quot;newedittextarea&quot;&gt;initial content...&lt;/textarea&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/mywebapproot/myckeditor/editor/ckeditor.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;//&lt;![CDATA[
CKEDITOR.replace('newedittextarea', { &quot;customConfig&quot;: &quot;/mywebapproot/myckeditor/custom_configs/my_config.js&quot; , &quot;RootPath&quot;:&quot;/mywebapproot/&quot;});
//]]&gt;&lt;/script&gt;
</code></pre><br><br>I say "configurations" because we had two configurations (and two skins), a normal one and then a child version of the editor (less toolbars, bigger and friendlier icons, ...).<br><br>It's important to notice that the configuration file may contain any JavaScript code (incl. function declaration and use) and access variables and functions defined in the page prior to the inclusion of CKEditor and thus you can dynamically adjust the configuration based on the calling page. Possible use of this is shown in <a href="/2011/04/04/ckeditor-hide-some-toolbar-buttons-on-a-per-page-basis/">CKEditor: Hide some toolbar buttons on a per page basis</a>.<br><br>You also need to be aware of the order of loading of the different configurations (in-page, custom file, in plugins) and ckeditor sources and its plugins (which differ between the production and development mode). So when something doesn't work as expected, make sure that you check the order in which things get applied and overridden.
<h3>Custom skins</h3>
This is how you create a custom skin based on the default kama skin:
<ol>
	<li>Copy myckeditor/editor/skins/kama/ (or ../editor/_source/skins/.. if you care more for readability than performance) to myckeditor/custom_skins/my_kama/</li>
	<li>Use a search &amp; replace tool to replace all occurences of "kama" with "my_kama" in the copied files (you can do it automatically, no need to manually confirm each of the few hundred replacements)
<ul>
	<li>Thus you'll have the CSS class cke_skin_my_kama instead of cke_skin_kama etc.</li>
	<li>This renaming of all the classes is necessary for otherwise there will be conflicts between the default kama skin and the one of yours and things might not work (this applies at least when using the compressed production version of CKEditor, ckeditor.js)</li>
	<li>It's important to get this step right otherwise CKEditor may fail to load</li>
</ul>
</li>
	<li>Optional: Add a custom css to the skin:
<ol>
	<li>Create the CSS, e.g. at myckeditor/custom_skins/my_kama/my_icons/my_icons.css</li>
	<li>Register it with the skin: In my_kama/skin.js, add it to the appropriate component, in my case it's the editor:
<pre><code>
CKEDITOR.skins.add('my_kama',(function(){var a='cke_ui_color';return{
editor:{css:['my_icons/my_icons.css','editor.css']},dialog:...
</code></pre></li>
</ol>
</li>
	<li>Tell CKEditor to use the skin: In myckeditor/custom_configs/my_config.js, add:
<pre><code>
var ckeditorBasePath = CKEDITOR.basePath.substr(0, CKEDITOR.basePath.indexOf(&quot;editor/&quot;));
CKEDITOR.editorConfig = function( config ) {
   ...
   config.skin = 'my_kama,' + ckeditorBasePath + 'custom_skins/my_kama/';
   ...
}
</code></pre></li>
</ol>
CKEditor supports multiple ways of specifying your custom skin and I found this one to be working for me. The property CKEDITOR.basePath used above is set automatically based on the include path of the ckeditor.js file.
<h3>Custom plugins</h3>
Creating custom plugins for CKEditor is a huge topic, we will touch only some parts of it. Refer to the plugin creation section in the Resources for introduction into plugin creation.
<h4>Dialog implementation options</h4>
<h5 id="types-of-dialog-implementations">Different types of dialog implementations</h5>
As far as I know you can create three types of dialogs with CKEditor 3.5:
<ol>
	<li>Native dialogs defined with JavaScript only - this is used by all CKEditor's own plugins, check them under _source/plugins</li>
	<li>IFrame dialogs - the dialog system defines the common elements such as title and Ok/Cancel buttons but the content of the dialog isn't defined by JS but it's an iframe loading another page (see dialog.addIframeDialog and the content type 'iframe'); requires the plugin iframedialog (an example below)</li>
	<li>Custom dialogs - they do not use the dialog API at all but define a custom command whose exec function displays a new window/jQuery dialog/whatever you want and pass results back using standard CKEditor methods - see <a href="https://www.mikee.se/Archive.aspx/Details/plugin_existing_code_into_ckeditor_20100201">[Eliasson10]</a></li>
</ol>
IFrame plugin example (showing only the dialog as there is nothing special in the plugin.js; config.RootPath is our custom config option set during the creation of the editor):<br><br><pre><code>
// myckeditor/custom_plugins/my_plugin/dialogs/my_plugin.js:
CKEDITOR.dialog.add( 'my_plugin', function( editor ) {
   return {
      title : 'My IFrame Plugin', minWidth : 390, minHeight : 230,
      contents : [ {
            id : 'tab1', label : '', title : '', expand : true, padding : 0,
            elements : [ {
                   type : 'iframe',
                   src : editor.config.RootPath + 'myCustomDialog.phtml',
                   width : 538, height : 478 - (CKEDITOR.env.ie ? 10 : 0)
            } ]
      } ]
      , buttons : []   // don't show the default buttons
   };
} );
</code></pre>
<h5>Dialog's on OK handler options</h5>
The standard dialog API defines among others the events 'ok' and 'cancel' triggered when the corresponding dialog button is pressed (only available for native and iframe dialogs). You can (re)define their handler in two ways:
<ol>
	<li>In the dialog definition function via "<code>, onOk: function(event) {... /* using this.<a href="https://docs.cksource.com/ckeditor_api/symbols/CKEDITOR.dialog.html#getParentEditor">getParentEditor()</a>*/}</code>"</li>
	<li>Outside of the dialog definition, for example inside a dialog iframe (option #2 above) by registering and deregistering the listener via <code>CKEDITOR.dialog.getCurrent().on("ok", okListener)</code> and <code>CKEDITOR.dialog.getCurrent().removeListener("ok", okListener);</code> (okListener being a function reference). To access the editor:
<pre><code>
var editor = window.parent.CKEDITOR.dialog.getCurrent()._.editor;
</code></pre></li>
</ol>
<h4>How to add a custom plugin</h4>
<a id="Registering_the_plugin_with_CKEditor_.26_enabling_it" name="Registering_the_plugin_with_CKEditor_.26_enabling_it"></a>
<h5>Registering the plugin with CKEditor &amp; enabling it</h5>
In the custom CKEditor configuration file (myckeditor/custom_configs/my_config.js):
<h6>1. Register the plugin:</h6>
<pre><code>
var ckeditorBasePath = CKEDITOR.basePath.substr(0, CKEDITOR.basePath.indexOf(&quot;editor/&quot;));
var customPluginsRoot = ckeditorBasePath + 'custom_plugins/';<br><br>CKEDITOR.plugins.addExternal('my_plugin',customPluginsRoot+'my_plugin/', 'plugin.js');
CKEDITOR.plugins.addExternal('another_custom_plugin',customPluginsRoot+'another_custom_plugin/', 'plugin.js');<br><br>CKEDITOR.editorConfig = function( config )
{
   ...
</code></pre><br><br>Comments:
<ul>
	<li>the first argument is the plugin name, as defined in its plugin.js (normally equal to its folder name)</li>
	<li>the second argument is the path to the plugin folder</li>
	<li>the third argument is always 'plugin.js'</li>
</ul>
There are also other ways to call <a href="https://docs.cksource.com/ckeditor_api/symbols/CKEDITOR.resourceManager.html#addExternal">CKEDITOR.plugins.addExternal</a> (borrowed from the ResourceManager) but this one has worked for us.
<h6>2. Enable the plugin:</h6>
<pre><code>
CKEDITOR.editorConfig = function( config ) {
   ...
   config.extraPlugins = 'my_plugin,another_custom_plugin';
  ...
}
</code></pre><br><br>Comments:
<ul>
	<li>just specify the name of the (registered) plugin in a comma-separated string</li>
</ul>
<h6>3. Add it to the toolbar:</h6>
<pre><code>
CKEDITOR.editorConfig = function( config ) {
   ...
    config.toolbar_Default = [
        ['Preview', 'Source','Link'],['MyPlugin', 'AnotherCustomPlugin']
    ];
   ...
}
</code></pre><br><br>Comments:
<ul>
	<li>The name, 'MyPlugin', is the CKEDITOR.ui.button name specified as the first parameter to editor.ui.addButton in plugin.js. It is not the plugin name (my_plugin) - see below.</li>
</ul>
<a id="Plugin_structure_and_naming" name="Plugin_structure_and_naming"></a>
<h5>Plugin structure and naming</h5>
Files:
<ul>
	<li>custom_plugins/plugin_name/
<ul>
	<li>plugin.js</li>
	<li>dialogs/plugin_name.js</li>
</ul>
</li>
</ul>
Sample plugin.js for the my_plugin plugin:<br><br><pre><code>
CKEDITOR.plugins.add( 'my_plugin',
{
   requires : [ 'iframedialog' ],
   init : function( editor )
   {
      var command = editor.addCommand( 'my_plugin', new CKEDITOR.dialogCommand( 'my_plugin' ) );<br><br>      editor.ui.addButton( 'MyPlugin',
         {
         label : 'ids:My label...',
         command : 'my_plugin'
      });<br><br>      CKEDITOR.dialog.add( 'my_plugin', this.path + 'dialogs/my_plugin.js' );
   }
});
</code></pre><br><br>Comments:
<ul>
	<li>the names of the plugin, of its command, and of its dialog are all my_plugin</li>
	<li>the name of the plugin's toolbar button is MyPlugin - this may be added to config.toolbar_{name} in the ckeditor configuration</li>
</ul>
Sample iframe plugin dialog:<br><br><pre><code>
// myckeditor/custom_plugins/my_plugin/dialogs/my_plugin.js:
CKEDITOR.dialog.add( 'my_plugin', function( editor ) {
   return {
      title : 'My IFrame Plugin', minWidth : 390, minHeight : 230,
      contents : [ {
            id : 'tab1', label : '', title : '', expand : true, padding : 0,
            elements : [ {
                   type : 'iframe',
                   src : editor.config.RootPath + 'myCustomDialog.phtml',
                   width : 538, height : 478 - (CKEDITOR.env.ie ? 10 : 0)
            } ]
      } ]
      , buttons : []   // don't show the default buttons
   };
} );
</code></pre><br><br>Comments:
<ul>
	<li>Nothing special here except of the config option editor.config.RootPath which we set ourselves when instantiating the ckeditor</li>
</ul>
<a id="Plugin_toolbar_icon" name="Plugin_toolbar_icon"></a>
<h5>Plugin toolbar icon</h5>
There are two ways to assign an icon to your plugin's button: either use the property <em>icon</em> when registering it, pointing to an image, or use the CSS class assigned to the "button".
<h6>Using the icon property:</h6>
(Copied from c_schmitz' comment on Voofie's plugin guide):<br><br><pre><code>
CKEDITOR.plugins.add('myplugin',
{
    init: function(editor)
    {
        editor.ui.addButton('myplugin',
            {
                label: 'myplugin',
                command: myplugin,
                icon: CKEDITOR.plugins.getPath('myplugin') + 'myplugin.png'
            });
    }
});
</code></pre>
<h6>Using the CSS class:</h6>
CKEditor automatically assigns the CSS class "cke_button_" to toolbar elements representing plugin buttons, the command name being usually the same as the plugin name (e.g. "cke_button_my_plugin" for the plugin above) - though you can also<a href="https://docs.cksource.com/ckeditor_api/symbols/src/plugins_button_plugin.js.html"> specify your own class via the className</a> property.<br><br>You then just need to define the class so that it contains a background image, likely from a sprite - see kama/icons.png and kama/editor.css.<br><br>Example custom css in myckeditor/custom_skins/my_kama/my_icons/my_icons.css using the sprite my_kama/my_icons/my_icons.png and registered with the custom skin as described above:<br><br><pre><code>
/* Plugins re-using native CKEditor's icons (the default) */
.cke_button_my_plugin .cke_icon {
    background-position: 0 -528px !important;
}<br><br>/* Plugins using our own icon sprite */
.cke_button_another_custom_plugin .cke_icon {
    background: url(&quot;my_icons.png&quot;) no-repeat scroll 0 -1232px transparent !important;
}
</code></pre><br><br>Comments:
<ul>
	<li>ckeditor's own icon sprite is loaded as the background image by default, you need to use !important to override it</li>
	<li>the custom sprite image url is relative to the location of the css file</li>
	<li>to add this custom CSS to the skin you need to add it its skin.js as described above</li>
</ul>
<h3>Custom language</h3>
CKEditor supports quite a number of languages out of the box and can auto-detect which one to use based on the users' browser settings. You can add a language of your own and tell CKEditor explicitly to use it:
<ol>
	<li>Create myckeditor/editor/lang/mylanguage.js based e.g. on editor/_source/lang/en.js
<ul>
	<li>It should include all the keys and certainly it must include all the sub-groups (such as contextmenu: {...}) to avoid errors because of undefined properties.</li>
</ul>
</li>
	<li>Tell CKEditor that the language is enabled and that it should be used by default:
<pre><code>
// myckeditor/custom_configs/my_config.js:
CKEDITOR.editorConfig = function( config ) {
   ...
   CKEDITOR.lang.languages.mylanguage = 1;
   config.language='mylanguage';
   ...
}
</code></pre></li>
</ol>
(CKEditor will automatically look for mylanguage.js under its lang/ folder.)<br><br>We have actually used our own internationalization system to provide the translation suitable for the current user. It is generated dynamically by a file included before ckeditor.js and producing a JavaScript object in the form expected by CKEditor:<br><br><pre><code>
// myckeditor/generate_mylanguage.js.php:
// ... PHP code here ... - produces JavaScript code similar to this:
// window.GENERATED_LANG = {dir:'ltr', editorTitle:'My Editor', ...};
</code></pre><br><br>The language file mylanguage.js only copies the JavaScript object with translations into the place expected by CKEditor:<br><br><pre><code>
// myckeditor/editor/lang/mylanguage.js:
CKEDITOR.lang['mylanguage'] = GENERATED_LANG;
</code></pre>
<h3>Note on the CKEditor's modes: production vs. development</h3>
In the production you normally use a compressed version of CKEditor, which contains both the editor and its default plugins in one compressed file, <em>ckeditor.js</em>. On the other hand, during development, you use for the sake of easier debugging and troubleshooting the source version <em>ckeditor_source.js</em>, which reads the files under the _source/ folder. It's important to know that the two versions do not behave exactly the same and thus you need to test with both.<br><br>The main difference I've noticed with CKEditor 3.5.2 is that in the development mode plugins are loaded <em>after</em> the custom configuration file and thus you won't be able to override some of their settings, such as CKEDITOR.config.smiley_descriptions. In the production mode the plugins are loaded together with the editor itself <em>before</em> the custom configuration and thus everything will behave as expected.<br><br>If using both modes, you will need to synchronize same files, such as editor/lang/ with editor/_source/lang/ etc.
<h2>Resources</h2>
<strong>Warning: Some of the resources may be out-of-date. Always check their publication date and the current CKEditor APIs and docs.</strong>
<h3>CKEditor in general</h3>
<ul>
	<li><a title="http://docs.cksource.com/CKEditor_3.x/Developers_Guide/Minimum_Setup" href="https://docs.cksource.com/CKEditor_3.x/Developers_Guide/Minimum_Setup" rel="nofollow">CKEditor installation - minimal setup</a></li>
	<li><a title="http://www.sayopenweb.com/ckeditor-faq/" href="https://www.sayopenweb.com/ckeditor-faq/" rel="nofollow">CKEditor FAQ</a></li>
	<li><a href="https://alfonsoml.blogspot.com/2009/09/ckeditor-events.html">Blog: CKEditor events</a> - description of available global events (I failed to found them in the documentation), example of usage and link to the CKEditor events docs</li>
</ul>
<h3>Building plugins</h3>
<h4>Overall tutorials etc.</h4>
<ul>
	<li><a href="https://www.voofie.com/content/2/ckeditor-plugin-development/">voofie: CKEditor Plugin Development</a> - a pretty detailed one</li>
	<li><a href="https://syrinx.ph/articles/CkEditorPluginGuide.aspx">Syrinx: Building Custom CK Editor Plug-ins</a> - incl. plugins with UI in a stand-alone window</li>
	<li><a href="https://cksource.com/forums/viewtopic.php?f=6&amp;t=15539">discussion: Creating Plugins in CKeditor</a></li>
	<li><a href="https://cksource.com/forums/viewtopic.php?f=11&amp;t=18876">Tutorial: create external plugin for CKEDITOR</a> - this looks pretty good and it also shows building an iframe dialog plugin (unfortunately without passing data from the dialog back to the editor)</li>
	<li><a title="http://docs.cksource.com/FCKeditor_3.x/Design_and_Architecture/Dialog_System" href="https://docs.cksource.com/FCKeditor_3.x/Design_and_Architecture/Dialog_System" rel="nofollow">Dialog System (CKeditor 3.x Design and Architecture)</a> - perhaps look over it briefly; unfortunately it misses some interesting topics such as iframe dialogs</li>
</ul>
<h4>Specialized plugin topics</h4>
<ul>
	<li><a href="https://www.mikee.se/Archive.aspx/Details/plugin_existing_code_into_ckeditor_20100201">[Eliasson10] Plugin existing code into ckeditor</a> - doesn't use the dialog API but a simple command, whose exec function opens a custom dialog and uses the CKEditor's API to pass results back</li>
	<li><a title="http://alfonsoml.blogspot.com/2009/12/plugin-localization-in-ckeditor-vs.html" href="https://alfonsoml.blogspot.com/2009/12/plugin-localization-in-ckeditor-vs.html" rel="nofollow">Plugin localization in CKEditor (vs FCKeditor)</a></li>
	<li><a title="http://stackoverflow.com/questions/4631852/can-i-control-where-ckeditor-finds-plugins-to-load" href="https://stackoverflow.com/questions/4631852/can-i-control-where-ckeditor-finds-plugins-to-load" rel="nofollow">StackOverflow: Adding a plugin from an external location to CKEditor</a> (use CKEDITOR.plugins.addExternal)</li>
</ul>
<h4>IFrame dialogs</h4>
<ul>
	<li><a title="http://stackoverflow.com/questions/1937527/variable-outside-event-handlers-scope" href="https://stackoverflow.com/questions/1937527/variable-outside-event-handlers-scope" rel="nofollow">stackoverflow: Example of an iframe dialog with custom onOk listener</a> - setting a custom ok listener (to the CKEditor-provided OK button) is perhaps the best way to pass values from an iframe dialog back to the editor and it's also the standard way</li>
	<li><a title="http://cksource.com/forums/viewtopic.php?f=11&amp;t=16040&amp;sid=66f9602bb307c119baaae53c508c7788" href="https://cksource.com/forums/viewtopic.php?f=11&amp;t=16040&amp;sid=66f9602bb307c119baaae53c508c7788" rel="nofollow">Forum: Working with iframe dialog plugins</a> - it's little chaotic and not all information there is true or the best solution possible but still it may be useful regarding how to react to the OK/Cancel buttons and how to pass data from the dialog back to the editor; generally the "Tutorial: create external plugin for CKEDITOR" referenced above is a more reliable source</li>
</ul>
<h3>Very special general/plugin topics that may be useful at some point</h3>
<ul>
	<li><a title="http://cksource.com/forums/viewtopic.php?f=11&amp;t=18793" href="https://cksource.com/forums/viewtopic.php?f=11&amp;t=18793" rel="nofollow">Forum: Inserting (and maintaining fake element placeholders)</a> - two important things here: a) adding a nested iframe to a dialog (CKEDITOR.dialog.addIframe) and b) using placeholder elements for normally content normally "invisible" while editing, for instance Flash (dataProcessor and editor.createFakeParserElement)</li>
	<li><a title="http://blog.ale-re.net/2010/06/ckeditor-context-menu.html" href="https://blog.ale-re.net/2010/06/ckeditor-context-menu.html" rel="nofollow">Custom CKEditor Menu</a></li>
	<li><a title="http://cksource.com/forums/viewtopic.php?f=11&amp;t=18327" href="https://cksource.com/forums/viewtopic.php?f=11&amp;t=18327" rel="nofollow">Tutorial: Extend the Links dialog to link to internal CMS pages</a></li>
	<li><a title="http://cksource.com/forums/viewtopic.php?f=11&amp;t=20253" href="https://cksource.com/forums/viewtopic.php?f=11&amp;t=20253" rel="nofollow">Forum: Integration a custom iframe with dialog's OK button</a></li>
	<li><a title="http://cksource.com/forums/viewtopic.php?p=43402#p43402" href="https://cksource.com/forums/viewtopic.php?p=43402#p43402" rel="nofollow">Adding the function getSelectedHtml to CKEditor</a></li>
</ul>
<h3>Additional unsorted links of interest</h3>
<ul>
	<li><a title="http://alfonsoml.blogspot.com/2009/12/recompressing-ckeditorjs-to-fit-your.html" href="https://alfonsoml.blogspot.com/2009/12/recompressing-ckeditorjs-to-fit-your.html" rel="nofollow">Recompressing ckeditor.js to fit your needs</a></li>
	<li><a title="http://cksource.com/forums/viewtopic.php?f=11&amp;t=20585&amp;hilit=ASPSpellCheck" href="https://cksource.com/forums/viewtopic.php?f=11&amp;t=20585&amp;hilit=ASPSpellCheck" rel="nofollow">ASPSpellCheck plugin for CKEditor 3.x</a></li>
	<li><a title="http://alfonsoml.blogspot.com/2011/01/avoiding-extra-request-for-translation.html" href="https://alfonsoml.blogspot.com/2011/01/avoiding-extra-request-for-translation.html" rel="nofollow">Blog: Avoiding extra request for the translation of a CKEditor plugin</a> - include translations directly in plugin.js</li>
</ul>
<h3>My other related blog posts</h3>
<ul>
	<li><a href="/2011/04/04/ckeditor-hide-some-toolbar-buttons-on-a-per-page-basis/">CKEditor: Hide some toolbar buttons on a per page basis</a></li>
	<li><a title="Permanent link to CKEditor: Collapsing only 2nd+ toolbar rows – howto" href="/2011/04/01/ckeditor-collapsing-only-2nd-toolbar-rows-howto/" rel="bookmark">CKEditor: Collapsing only 2nd+ toolbar rows – howto</a></li>
	<li><a title="Permanent link to CKEditor: Scroll dialogs with the page, i.e. not fixed to the middle" href="/2011/03/31/ckeditor-scroll-dialogs-with-page/" rel="bookmark">CKEditor: Scroll dialogs with the page, i.e. not fixed to the middle</a></li>
	<li><a title="Permanent link to Upgrading FCKeditor 2.x to CKEditor 3.x including plugins" href="../2011/05/06/upgrading-fckeditor-2-x-to-ckeditor-3-x-including-plugins/" rel="bookmark">Upgrading FCKeditor 2.x to CKEditor 3.x including plugins</a> (+ a decoupling facade)</li>
</ul>
<h2>Post scriptum</h2>
I'd like to thank my employer, <a href="https://iterate.no/">Iterate AS</a>, for supporting me in writing this blog post and our client for giving me the opportunity to learn all this stuff.
++++
