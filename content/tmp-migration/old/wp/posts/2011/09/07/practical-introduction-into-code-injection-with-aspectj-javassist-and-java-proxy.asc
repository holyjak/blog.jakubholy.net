{:title
 "Practical Introduction into Code Injection with AspectJ, Javassist, and Java Proxy",
 :date "2011-09-06",
 :layout :post,
 :tags ["java" "library"],
 :tags-orig ["AOP" "AspectJ" "java" "Javassist" "JavaZone"],
 :categories ["Languages" "Tools"],
 :extra-css #{}
}

++++
The ability to inject pieces of code into compiled classes and methods, either statically or at runtime, may be of immense help. This applies especially to troubleshooting problems in third-party libraries without source codes or in an environment where it isn't possible to use a debugger or a profiler. Code injection is also useful for dealing with concerns that cut across the whole application, such as performance monitoring. Using code injection in this way became popular under the name <a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming" rel="nofollow">Aspect-Oriented Programming</a> (AOP). Code injection isn't something used only rarely as you might think, quite the contrary; every programmer will come into a situation where this ability could prevent a lot of pain and frustration.<br><br>This post is aimed at giving you the knowledge that you may (or I should rather say "will") need and at persuading you that learning basics of code injection is really worth the little of your time that it takes. I'll present three different real-world cases where code injection came to my rescue, solving each one with a different tool, fitting best the constraints at hand.<br><br><!--more-->
<h2><a name="JavaZoneProposal-AOP-WhyYouAreGoingtoNeedIt"></a>Why You Are Going to Need It</h2>
A lot has been already said about the <a class="external-link" href="https://en.wikipedia.org/wiki/Aspect-oriented_programming#Motivation_and_basic_concepts" rel="nofollow">advantages of AOP</a> - and thus code injection - so I will only concentrate on a few main points from the troubleshooting point of view.<br><br>The coolest thing is that it <strong>enables you to modify third party, closed-source classes</strong> and actually even JVM classes. Most of us work with <a class="external-link" href="/2011/04/18/what-do-i-mean-by-a-legacy-code/" rel="nofollow">legacy code</a> and code for which we haven't the source codes and inevitably we occasionally hit the limitations or bugs of these 3rd-party binaries and need very much to change some small thing in there or to gain more insight into the code's behavior. Without code injection you have no way to modify the code or to add support for increased observability into it. Also you often need to deal with issues or collect information in the production environment where you can't use a debugger and similar tools while you usually can at least manage somehow your application's binaries and dependencies. Consider the following situations:
<ul>
	<li>You're passing a collection of data to a closed-source library for processing and one method in the library fails for one of the elements but the exception provides no information about which element it was. You'd need to modify it to either log the offending argument or to include it in the exception. (And you can't use a debugger because it only happens on the production application server.)</li>
	<li>You need to collect performance statistics of important methods in your application including some of its closed-source components under the typical production load. (In the production you of course cannot use a profiler and you want to incur the minimal overhead.)</li>
	<li>You use JDBC to send a lot of data to a database in batches and one of the batch updates fails. You would need some nice way to find out which batch it was and what data it contained.</li>
</ul>
I've in fact encountered these three cases (among others) and you will see possible implementations later.<br><br>You should keep the following advantages of code injection in your mind while reading this post:
<ul>
	<li>Code injection enables you to modify binary classes for which you haven't the source codes</li>
	<li>The injected code can be used to collect various runtime information in environments where you cannot use the traditional development tools such as profilers and debuggers</li>
	<li>Don't Repeat Yourself: When you need the same piece of logic at multiple places, you can define it once and inject it into all those places.</li>
	<li>With code injection you do not modify the original source files so it is great for (possibly large-scale) changes that you need only for a limited period of time, especially with tools that make it possible to easily switch the code injection on and off (such as AspectJ with its load-time weaving). A typical case is performance metrics collection and increased logging during troubleshooting</li>
	<li>You can inject the code either statically, at the build time, or dynamically, when the target classes are being loaded by the JVM</li>
</ul>
<h2><a name="JavaZoneProposal-AOP-MiniGlossary"></a>Mini Glossary</h2>
You might encounter the following terms in relation to code injection and AOP:<br><br><dl><dt>Advice</dt><dd>The code to be injected. Typically we talk about before, after, and around advices, which are executed before, after, or instead of a target method. It's possible to make also other changes than injecting code into methods, e.g. adding fields or interfaces to a class.</dd><dt>AOP (Aspect Oriented Programming)</dt><dd>A programming paradigm claiming that "cross-cutting concerns" - the logic needed at many places, without a single class where to implement them - should be implemented once and injected into those places. Check <a class="external-link" href="https://en.wikipedia.org/wiki/Aspect-oriented_programming" rel="nofollow">Wikipedia</a> for a better description.</dd><dt>Aspect</dt><dd>A unit of modularity in AOP, corresponds roughly to a class - it can contain different advices and pointcuts.</dd><dt>Joint point</dt><dd>A particular point in a program that might be the target of code injection, e.g. a method call or method entry.</dd><dt>Pointcut</dt><dd>Roughly spoken, a pointcut is an expression which tells a code injection tool where to inject a particular piece of code, i.e. to which joint points to apply a particular advice. It could select only a single such point - e.g. execution of a single method - or many similar points - e.g. executions of all methods marked with a custom annotation such as @MyBusinessMethod.</dd><dt>Weaving</dt><dd>The process of injecting code - advices - into the target places - joint points.</dd></dl>
<h2><a name="JavaZoneProposal-AOP-TheTools"></a>The Tools</h2>
There are many very different tools that can do the job so we will first have a look at the differences between them and then we will get acquainted with three prominent representatives of different evolution branches of code injection tools.
<h3><a name="JavaZoneProposal-AOP-BasicClassificationofCodeInjectionTools"></a>Basic Classification of Code Injection Tools</h3>
<h4><a name="JavaZoneProposal-AOP-I.LevelofAbstraction"></a>I. Level of Abstraction</h4>
How difficult is it to express the logic to be injected and to express the pointcuts where the logic should be inserted?<br><br>Regarding the "advice" code:
<ol>
	<li>Direct bytecode manipulation (e.g. ASM) - to use these tools you need to understand the bytecode format of a class because they abstract very little from it, you work directly with opcodes, the operand stack and individual instructions. An ASM example:
<div style="border-width:1px;">
<div><pre><code>methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, &quot;java/lang/System&quot;, &quot;out&quot;, &quot;Ljava/io/PrintStream;&quot;);</code></pre><br><br></div>
</div>
They are difficult to use due to being so low-level but are the most powerful. Usually they are used to implement higher-level tools and only few actually need to use them.</li>
	<li>Intermediate level - code in strings, some abstraction of the classfile structure (Javassist)</li>
	<li>Advices in Java (e.g. AspectJ) - the code to be injected is expressed as syntax-checked and statically compiled Java</li>
</ol>
Regarding the specification of where to inject the code:
<ol>
	<li>Manual injection - you have to get somehow hold of the place where you want to inject the code (ASM, Javassist)</li>
	<li>Primitive pointcuts - you have rather limited possibilities for expressing where to inject the code, for example to a particular method, to all public methods of a class or to all public methods of classes in a group (Java EE interceptors)</li>
	<li>Pattern matching pointcut expressions - powerful expressions matching joint points based on a number of criteria with wildcards, awareness of the context (e.g. "called from a class in the package XY") etc. (AspectJ)</li>
</ol>
<h4><a name="JavaZoneProposal-AOP-II.WhentheMagicHappens"></a>II. When the Magic Happens</h4>
The code can be injected at different points in time:
<ul>
	<li>Manually at run-time - your code has to explicitly ask for the enhanced code, e.g. by manually instantiating a custom proxy wrapping the target object (this is arguably not true code injection)</li>
	<li>At load-time - the modification are performed when the target classes are being loaded by the JVM</li>
	<li>At build-time - you add an extra step to your build process to modify the compiled classes before packaging and deploying your application</li>
</ul>
Each of these modes of injection can be more suitable at different situations.
<h4><a name="JavaZoneProposal-AOP-III.WhatItCanDo"></a>III. What It Can Do</h4>
The code injection tools vary pretty much in what they can or cannot do, some of the possibilities are:
<ul>
	<li>Add code before/after/instead of a method - only member-level methods or also the static ones?</li>
	<li>Add fields to a class</li>
	<li>Add a new method</li>
	<li>Make a class to implement an interface</li>
	<li>Modify an instruction within the body of a method (e.g. a method call)</li>
	<li>Modify generics, annotations, access modifiers, change constant values, ...</li>
	<li>Remove method, field, etc.</li>
</ul>
<h3><a name="JavaZoneProposal-AOP-SelectedCodeInjectionTools"></a>Selected Code Injection Tools</h3>
The best-known code injection tools are:
<ol>
	<li>Dynamic Java Proxy</li>
	<li>The bytecode manipulation library <a class="external-link" href="https://asm.ow2.org/" rel="nofollow">ASM</a></li>
	<li>JBoss Javassist</li>
	<li>AspectJ</li>
	<li>Spring AOP/proxies</li>
	<li>Java EE interceptors</li>
</ol>
<h3><a name="JavaZoneProposal-AOP-PracticalIntroductiontoJavaProxy,JavassistandAspectJ"></a>Practical Introduction to Java Proxy, Javassist and AspectJ</h3>
I've selected three rather different mature and popular code injection tools and will present them on real-world examples I've personally experienced.
<h4><a name="JavaZoneProposal-AOP-TheOmnipresentDynamicJavaProxy"></a>The Omnipresent Dynamic Java Proxy</h4>
<a class="external-link" href="https://download.oracle.com/javase/6/docs/api/java/lang/reflect/Proxy.html" rel="nofollow">Java.lang.reflect.Proxy</a> makes it possible to create dynamically a proxy for an interface, forwarding all calls to a target object. It is not a code injection tool for you cannot inject it anywhere, you must manually instantiate and use the proxy instead of the original object, and you can do this only for interfaces, but it can still be very useful as we will see.<br><br>Advantages:
<ul>
	<li>It's a part of JVM and thus is available everywhere</li>
	<li>You can use the same proxy - more exactly an <a class="external-link" href="https://download.oracle.com/javase/6/docs/api/java/lang/reflect/InvocationHandler.html" rel="nofollow">InvocationHandler</a> - for incompatible objects and thus reuse the code more than you could normally</li>
	<li>You save effort because you can easily forward all calls to a target object and only modify the ones interesting for you. If you were to implement a proxy manually, you would need to implement all the methods of the interface in question</li>
</ul>
Disadvantages
<ul>
	<li>You can create a dynamic proxy only for an interface, you can't use it if your code expects a concrete class</li>
	<li>You have to instantiate and apply it manually, there is no magical auto-injection</li>
	<li>It's little too verbose</li>
	<li>Its power is very limited, it can only execute some code before/after/around a method</li>
</ul>
There is no code injection step - you have to apply the proxy manually.
<h5><a name="JavaZoneProposal-AOP-Example"></a>Example</h5>
I was using JDBC PreparedStatement's batch updates to modify a lot of data in a database and the processing was failing for one of the batch updates because of integrity constraint violation. The exception didn't contain enough information to find out which data caused the failure and so I've created a dynamic proxy for the PreparedStatement that remembered values passed into each of the batch updates and in the case of a failure it automatically printed the batch number and the data. With this information I was able to fix the data and I kept the solution in place so that if a similar problems ever occurs again, I'll be able to find its cause and resolve it quickly.<br><br>The crucial part of the code:
<div style="border-width:1px;">
<div style="border-bottom-width:1px;"><strong>LoggingStatementDecorator.java - snippet 1</strong></div>
<div><pre><code>
class LoggingStatementDecorator implements InvocationHandler {<br><br>   private PreparedStatement target;
   ...<br><br>   private LoggingStatementDecorator(PreparedStatement target) { this.target = target; }<br><br>   @Override
   public Object invoke(Object proxy, Method method, Object[] args)
         throws Throwable {<br><br>      try {
         Object result = method.invoke(target, args);
         updateLog(method, args); // remember data, reset upon successful execution
         return result;
      } catch (InvocationTargetException e) {
         Throwable cause = e.getTargetException();
         tryLogFailure(cause);
         throw cause;
      }<br><br>   }<br><br>   private void tryLogFailure(Throwable cause) {
      if (cause instanceof BatchUpdateException) {
         int failedBatchNr = successfulBatchCounter + 1;
         Logger.getLogger(&quot;JavaProxy&quot;).warning(
               &quot;THE INJECTED CODE SAYS: &quot; +
               &quot;Batch update failed for batch# &quot; + failedBatchNr +
               &quot; (counting from 1) with values: [&quot; +
               getValuesAsCsv() + &quot;]. Cause: &quot; + cause.getMessage());
      }
   }
...
</code></pre><br><br></div>
</div>
Notes:
<ul>
	<li>To create a proxy, you first need to implement an <em>InvocationHandler</em> and its invoke method, which is called whenever any of the interface's methods is invoked on the proxy</li>
	<li>You can access the information about the call via the java.lang.reflect.* objects and for example delegate the call to the proxied object via <em>method.invoke</em></li>
</ul>
We've also an utility method for creating a proxy instance for a Prepared statement:
<div style="border-width:1px;">
<div style="border-bottom-width:1px;"><strong>LoggingStatementDecorator.java - snippet 2</strong></div>
<div><pre><code>
public static PreparedStatement createProxy(PreparedStatement target) {
  return (PreparedStatement) Proxy.newProxyInstance(
      PreparedStatement.class.getClassLoader(),
      new Class[] { PreparedStatement.class },
      new LoggingStatementDecorator(target));
};
</code></pre><br><br></div>
</div>
Notes:
<ul>
	<li>You can see that the <em>newProxyInstance</em> call takes a classloader, an array of interfaces that the proxy should implement, and the invocation handler that calls should be delegated to (the handler itself has to manage a reference to the proxied object, if it needs it)</li>
</ul>
It is then used like this:
<div style="border-width:1px;">
<div style="border-bottom-width:1px;"><strong>Main.java</strong></div>
<div><pre><code>
...
PreparedStatement rawPrepStmt = connection.prepareStatement(&quot;...&quot;);
PreparedStatement loggingPrepStmt = LoggingStatementDecorator.createProxy(rawPrepStmt);
...
loggingPrepStmt.executeBatch();
...
</code></pre><br><br></div>
</div>
Notes:
<ul>
	<li>You see that we have to manually wrap a raw object with the proxy and use the proxy further on</li>
</ul>
<h6><a name="JavaZoneProposal-AOP-AlternativeSolutions"></a>Alternative Solutions</h6>
This problem could be solved in different ways, for example by creating a non-dynamic proxy implementing PreparedStatement and forwarding all calls to the real statement while remembering batch data but it would be lot of boring typing for the interface has many methods. The caller could also manually keep track of the data it has send to the prepared statement but that would obscure its logic with an unrelated concern.<br><br>Using the dynamic Java proxy we get rather clean and easy to implement solution.
<h4><a name="JavaZoneProposal-AOP-TheIndependentJavassist"></a>The Independent Javassist</h4>
<a class="external-link" href="https://www.javassist.org/" rel="nofollow">JBoss Javassist</a> is an intermediate code injection tool providing a higher-level abstraction than bytecode manipulation libraries and offering little limited but still very useful manipulation capabilities. The code to be injected is represented as strings and you have to manually get to the class-method where to inject it. Its main advantage is that the modified code has no new run-time dependencies, on Javassist or anything else. This may be the decisive factor if you are working for a large corporation where the deployment of additional open-source libraries (or just about any additional libraries) such as AspectJ is difficult for legal and other reasons.<br><br>Advantages
<ul>
	<li>Code modified by Javassist doesn't require any new run-time dependencies, the injection happens at the build time and the injected advice code itself doesn't depend on any Javassist API</li>
	<li>Higher-level than bytecode manipulation libraries, the injected code is written in Java syntax, though enclosed in strings</li>
	<li>Can do most things that you may need such as "advising" method calls and method executions</li>
	<li>You can achieve both build-time injection (via Java code or a <a href="/2010/06/25/implementing-build-time-instrumentation-with-javassist/" rel="nofollow">custom Ant task to do execution/call advising</a>) and load-time injection (by implementing your own <a href="https://download.oracle.com/javase/1.5.0/docs/api/java/lang/instrument/package-summary.html">Java 5+ agent</a> [thx to Anton])</li>
</ul>
Disadvantages
<ul>
	<li>Still little too low-level and thus harder to use - you have to deal a little with structure of methods and the injected code is not syntax-checked</li>
	<li>Javassist has no tools to perform the injection and you thus have to implement your own injection code - including that there isn't support for injecting the code automatically based on a pattern</li>
</ul>
(See GluonJ below for a solution without most of the disadvantages of Javassist.)<br><br>With Javassist you create a class, which uses the Javassist API to inject code int targets and run it as a part of your build process after the compilation, for example as I once did via a custom Ant task.
<h5><a name="JavaZoneProposal-AOP-Example"></a>Example</h5>
We needed to add some simple performance monitoring to our Java EE application and we were not allowed to deploy any non-approved open-source library (at least not without going through a time-consuming approval process). We've therefore used Javassist to inject the performance monitoring code to our important methods and to the places were important external methods were called.<br><br>The code injector:
<div style="border-width:1px;">
<div style="border-bottom-width:1px;"><strong>JavassistInstrumenter.java</strong></div>
<div><pre><code>
public class JavassistInstrumenter {<br><br>   public void insertTimingIntoMethod(String targetClass, String targetMethod) throws NotFoundException, CannotCompileException, IOException {
      Logger logger = Logger.getLogger(&quot;Javassist&quot;);
      final String targetFolder = &quot;./target/javassist&quot;;<br><br>      try {
         final ClassPool pool = ClassPool.getDefault();
         // Tell Javassist where to look for classes - into our ClassLoader
         pool.appendClassPath(new LoaderClassPath(getClass().getClassLoader()));
         final CtClass compiledClass = pool.get(targetClass);
         final CtMethod method = compiledClass.getDeclaredMethod(targetMethod);<br><br>         // Add something to the beginning of the method:
         method.addLocalVariable(&quot;startMs&quot;, CtClass.longType);
         method.insertBefore(&quot;startMs = System.currentTimeMillis();&quot;);
         // And also to its very end:
         method.insertAfter(&quot;{final long endMs = System.currentTimeMillis();&quot; +
            &quot;iterate.jz2011.codeinjection.javassist.PerformanceMonitor.logPerformance(\&quot;&quot; +
            targetMethod + &quot;\&quot;,(endMs-startMs));}&quot;);<br><br>         compiledClass.writeFile(targetFolder);
         // Enjoy the new $targetFolder/iterate/jz2011/codeinjection/javassist/TargetClass.class<br><br>         logger.info(targetClass + &quot;.&quot; + targetMethod +
               &quot; has been modified and saved under &quot; + targetFolder);
      } catch (NotFoundException e) {
         logger.warning(&quot;Failed to find the target class to modify, &quot; +
               targetClass + &quot;, verify that it ClassPool has been configured to look &quot; +
               &quot;into the right location&quot;);
      }
   }<br><br>   public static void main(String[] args) throws Exception {
      final String defaultTargetClass = &quot;iterate.jz2011.codeinjection.javassist.TargetClass&quot;;
      final String defaultTargetMethod = &quot;myMethod&quot;;
      final boolean targetProvided = args.length == 2;<br><br>      new JavassistInstrumenter().insertTimingIntoMethod(
            targetProvided? args[0] : defaultTargetClass
            , targetProvided? args[1] : defaultTargetMethod
      );
   }
}
</code></pre><br><br></div>
</div>
Notes:
<ul>
	<li>You can see the "low-levelness" - you have to explicitly deal with objects like CtClass, CtMethod, explicitly add a local variable etc.</li>
	<li>Javassist is rather flexible in where it can look for the classes to modify - it can search the classpath, a particular folder, a JAR file, or a folder with JAR files</li>
	<li>You would compile this class and run its main during your build process</li>
</ul>
<h4><a name="JavaZoneProposal-AOP-JavassistonSteroids:GluonJ"></a>Javassist on Steroids: GluonJ</h4>
<a class="external-link" href="https://www.csg.is.titech.ac.jp/projects/gluonj/documentation/tutorial.html" rel="nofollow">GluonJ</a> is an AOP tool building on top of Javassist. It can use either a custom syntax or Java 5 annotations and it's build around the concept of "revisers". Reviser is a class - an aspect - that revises, i.e. modifies, a particular target class and overrides one or more of its methods (contrary to inheritance, the reviser's code is physically imposed over the original code inside the target class).<br><br>Advantages
<ul>
	<li>No run-time dependencies if build-time weaving used (load-time weaving requires the GluonJ agent library or gluonj.jar)</li>
	<li>Simple Java syntax using GlutonJ's annotation - though the custom syntax is also trivial to understand and easy to use</li>
	<li>Easy, automatic weaving into the target classes with GlutonJ's JAR tool, an Ant task or dynamically at the load-time</li>
	<li>Support for both build-time and load-time weaving</li>
</ul>
Disadvantages
<ul>
	<li>An aspect can modify only a single class, you cannot inject the same piece of code to multiple classes/methods</li>
	<li>Limited power - only provides for field/method addition and execution of a code instead of/around a target method, either upon any of its executions or only if the execution happens in a particular context, i.e. when called from a particular class/method</li>
</ul>
If you don't need to inject the same piece of code into multiple methods then GluonJ is easier and better choice than Javassist and if its simplicity isn't a problem for you then it also might be a better choice than AspectJ just thanks to this simplicity.
<h4><a name="JavaZoneProposal-AOP-TheAlmightyAspectJ"></a>The Almighty AspectJ</h4>
AspectJ is a full-blown AOP tool, it can do nearly anything you might want, including the modification of static methods, addition of new fields, addition of an interface to a class' list of implemented interfaces etc.<br><br>The syntax of AspectJ advices comes in two flavours, one is a superset of Java syntax with additional keywords like <em>aspect</em> and <em>pointcut</em>, the other one - called @AspectJ - is standard Java 5 with annotations such as @Aspect, @Pointcut, @Around. The latter is perhaps easier to learn and use but also little less powerful as it isn't as expressive as the custom AspectJ syntax.<br><br>With AspectJ you can define which joint points to advise with very powerful expressions but it may be little difficult to learn them and to get them right. There is a useful Eclipse plugin for AspectJ development - the <a class="external-link" href="https://www.eclipse.org/ajdt/" rel="nofollow">AspectJ Development Tools</a> (AJDT) - but the last time I've tried it it wasn't as helpful as I'd have liked.<br><br>Advantages
<ul>
	<li>Very powerful, can do nearly anything you might need</li>
	<li>Powerful pointcut expressions for defining where to inject an advice and when to activate it (including some run-time checks) - fully enables <abbr title="Don't Repeat Yourself">DRY</abbr>, i.e. write once &amp; inject many times</li>
	<li>Both build-time and load-time code injection (weaving)</li>
</ul>
Disadvantages
<ul>
	<li>The modified code depends on the AspectJ runtime library</li>
	<li>The pointcut expressions are very powerful but it might be difficult to get them right and there isn't much support for "debugging" them though the AJDT plugin is partially able to visualize their effects</li>
	<li>It will likely take some time to get started though the basic usage is pretty simple (using @Aspect, @Around, and a simple pointcut expression, as we will see in the example)</li>
</ul>
<h5><a name="JavaZoneProposal-AOP-Example"></a>Example</h5>
Once upon time I was writing a plugin for a closed-source <abbr title="Learning Management System">LMS</abbr> J2EE application having such dependencies that it wasn't feasible to run it locally. During an API call, a method deep inside the application was failing but the exception didn't contain enough information to track the cause of the problem. I therefore needed to change the method to log the value of its argument when it fails.<br><br>The AspectJ code is quite simple:
<div style="border-width:1px;">
<div style="border-bottom-width:1px;"><strong>LoggingAspect.java</strong></div>
<div><pre><code>
@Aspect
public class LoggingAspect {<br><br>   @Around(&quot;execution(private void TooQuiet3rdPartyClass.failingMethod(..))&quot;)
   public Object interceptAndLog(ProceedingJoinPoint invocation) throws Throwable {
      try {
         return invocation.proceed();
      } catch (Exception e) {
         Logger.getLogger(&quot;AspectJ&quot;).warning(
            &quot;THE INJECTED CODE SAYS: the method &quot; +
            invocation.getSignature().getName() + &quot; failed for the input '&quot; +
            invocation.getArgs()[0] + &quot;'. Original exception: &quot; + e);
         throw e;
      }
   }
}
</code></pre><br><br></div>
</div>
Notes:
<ul>
	<li>The aspect is a normal Java class with the @Aspect annotation, which is just a marker for AspectJ</li>
	<li>The @Around annotation instructs AspectJ to execute the method instead of the one matched by the expression, i.e. instead of the failingMethod of the TooQuiet3rdPartyClass</li>
	<li>The around advice method needs to be public, return an Object, and take a special AspectJ object carrying information about the invocation - <a class="external-link" href="https://www.eclipse.org/aspectj/doc/released/runtime-api/org/aspectj/lang/ProceedingJoinPoint.html" rel="nofollow">ProceedingJoinPoint</a> - as its argument and it may have an arbitrary name (Actually this is the minimal form of the signature, it could be more complex.)</li>
	<li>We use the ProceedingJoinPoint to delegate the call to the original target (an instance of the TooQuiet3rdPartyClass) and, in the case of an exception, to get the argument's value</li>
	<li>I've used an @Around advice though @AfterThrowing would be simpler and more appropriate but this shows better the capabilities of AspectJ and can be nicely compared to the dynamic java proxy example above</li>
</ul>
Since I hadn't control over the application's environment, I couldn't enable the load-time weaving and thus had to use <a class="external-link" href="https://www.eclipse.org/aspectj/doc/released/devguide/antTasks-iajc.html" rel="nofollow">AspectJ's Ant task</a> to weave the code at the build time, re-package the affected JAR and re-deploy it to the server.
<h6><a name="JavaZoneProposal-AOP-AlternativeSolutions"></a>Alternative Solutions</h6>
Well, if you can't use a debugger then your options are quite limited. The only alternative solution I could think of is to <a class="external-link" href="https://java.decompiler.free.fr/" rel="nofollow">decompile</a> the class (illegal!), add the logging into the method (provided that the decompilation succeeds), re-compile it and replace the original .class with the modified one.
<h2><a name="JavaZoneProposal-AOP-TheDarkSide"></a>The Dark Side</h2>
Code injection and Aspect Oriented Programming are very powerful and sometimes indispensable both for troubleshooting and as a regular part of application architecture, as we can see e.g. in the case of Java EE's Enterprise Java Beans where the business concerns such as transaction  management and security checks are injected into POJOs (though implementations actually more likely use proxies) or in Spring.<br><br>However there is a price to be paid in terms of <em>possibly</em> decreased understandability as the runtime behavior and structure are different from what you'd expect based on the source codes (unless you know to check also the aspects' sources or unless the injection is made explicit by annotations on the target classes such as Java EE's <a class="external-link" href="https://download.oracle.com/javaee/6/api/javax/interceptor/Interceptors.html" rel="nofollow">@Interceptors</a>). Therefore you must carefully weight the benefits and drawbacks of code injection/AOP - though when used reasonably, they do not obscure the program flow more than interfaces, factories etc. The <a class="external-link" href="https://www.ibm.com/developerworks/java/library/j-aopwork15/index.html#N10223" rel="nofollow">argument about obscuring code is perhaps often over-estimated</a>.<br><br>If you want to see an example of AOP gone wild, check the <a class="external-link" href="https://sourceforge.net/projects/glassbox/files/glassbox/2.0/glassbox-src.zip/download" rel="nofollow">source codes</a> of <a class="external-link" href="https://glassbox.sourceforge.net/" rel="nofollow">Glassbox</a>, a JavaEE performance monitoring tool (for that you might need a <a class="external-link" href="/2008/10/31/webapp-performance-monitoring-with/" rel="nofollow">map</a> not to get too lost).
<h2><a name="JavaZoneProposal-AOP-FancyUsesofCodeInjectionandAOP"></a>Fancy Uses of Code Injection and AOP</h2>
The main field of application of code injection in the process of troubleshooting is logging, more exactly gaining visibility into what an application is doing by extracting and somehow communicating interesting runtime information about it. However AOP has many interesting uses beyond - simple or complex - logging, for example:
<ul>
	<li>Typical examples: Caching &amp; et al (ex.: <a class="external-link" href="https://www.theserverside.com/news/thread.tss?thread_id=39026#200714" rel="nofollow">on AOP in JBoss Cache</a>), transaction management, logging, enforcement of security, persistence, thread safety, error recovery, automatic implementation of methods (e.g. toString, equals, hashCode), remoting</li>
	<li>Implementation of <a class="external-link" href="https://en.wikipedia.org/wiki/Role-oriented_programming" rel="nofollow">role-based programming</a> (e.g. <a class="external-link" href="https://www.eclipse.org/objectteams/" rel="nofollow">OT/J</a>, using BCEL) or the <a class="external-link" href="https://en.wikipedia.org/wiki/Data,_Context,_and_Interaction" rel="nofollow">Data, Context, and Interaction</a> architecture</li>
	<li>Testing
<ul>
	<li>Test coverage - inject code to record whether a line has been executed during test run or not</li>
	<li><a class="external-link" href="https://www.cs.gmu.edu/~offutt/rsrch/papers/mujava.pdf" rel="nofollow">Mutation testing</a> (<a href="https://www.cs.gmu.edu/~offutt/mujava/">µJava</a>, <a href="https://jumble.sourceforge.net/">Jumble</a>) - inject "random" mutation to the application and verify that the tests failed</li>
	<li><a class="external-link" href="https://www.patterntesting.com/" rel="nofollow">Pattern Testing</a> - automatic verification that Architecture/Design/Best practices recommendations are implemented correctly in the code via AOP</li>
	<li>Simulate hardware/external failures by <a class="external-link" href="https://www.eclipse.org/aspectj/sample-code.html#testing-inoculated-injectIOException" rel="nofollow">injecting the throwing of an exception</a></li>
</ul>
</li>
	<li>Help to achieve zero turnaround for Java applications - <a class="external-link" href="https://www.zeroturnaround.com/forum/topic.php?id=1265&amp;replies=3#post-5207" rel="nofollow">JRebel uses an AOP-like approach</a> for framework and server integration plugins - namely its <a class="external-link" href="https://www.zeroturnaround.com/jrebel/features/" rel="nofollow">plugins </a><a class="external-link" href="https://www.zeroturnaround.com/resources/jrebel-plugins/" rel="nofollow">use Javassist</a> for "binary patching"</li>
	<li>Solving though problems and avoiding monkey-coding with AOP patterns such as Worker Object Creation (turn direct calls into asynchronous with a Runnable and a ThreadPool/task queue) and Wormhole (make context information from a caller available to the callee without having to pass them through all the layers as parameters and without a ThreadLocal) - described in the book AspectJ in Action</li>
	<li>Dealing with legacy code - overriding the class instantiated on a call to a constructor (this and similar may be used to break tight-coupling with feasible amount of work), <a class="external-link" href="https://www.sonatype.com/people/2007/11/two-fantastic-uses-for-aspectj-part-one-backward-compatibility/" rel="nofollow">ensuring backwards-compatibility</a>  o , <a class="external-link" href="https://www.sonatype.com/people/2007/12/two-fantastic-uses-for-aspectj-part-two-bridging/" rel="nofollow">teaching components to react properly</a> on environment changes</li>
	<li>Preserving backwards-compatibility of an API while not blocking its ability to evolve e.g. by adding backwards-compatible methods when return types have been narrowed/widened (<a class="external-link" href="https://bridge-method-injector.infradna.com/" rel="nofollow">Bridge Method Injector</a> - uses ASM) or by <a class="external-link" href="https://www.sonatype.com/people/2007/11/two-fantastic-uses-for-aspectj-part-one-backward-compatibility/" rel="nofollow">re-adding old methods</a> and implementing them in terms of the new API</li>
	<li>Turning POJOs into JMX beans</li>
</ul>
<h2><a name="JavaZoneProposal-AOP-Summary"></a>Summary</h2>
We've learned that code injection can be indispensable for troubleshooting, especially when dealing with closed-source libraries and complex deployment environments. We've seen three rather different code injection tools - dynamic Java proxies, Javassist, AspectJ - applied to real-world problems and discussed their advantages and disadvantages because different tools may be suitable for different cases. We've also mentioned that code injection/AOP shouldn't be overused and looked at some examples of advanced applications of code injection/AOP.<br><br>I hope that you now understand how code injection can help you and know how to use these three tools.
<h2><a name="JavaZoneProposal-AOP-SourceCodes"></a>Source Codes</h2>
You can <a class="external-link" href="https://github.com/holyjak/JavaZone-Code-Injection" rel="nofollow">get the fully-documented source codes of the examples</a> from GitHub including not only the code to be injected but also the target code and support for easy building. The easiest may be:
<div style="border-width:1px;">
<div><pre><code>
git clone git://github.com/holyjak/JavaZone-Code-Injection.git
cd JavaZone-Code-Injection/
cat README
mvn -P javaproxy test
mvn -P javassist test
mvn -P aspectj   test
</code></pre><br><br></div>
</div>
(It may take few minutes for Maven do download its dependencies, plugins, and the actual project's dependencies.)
<h2><a name="JavaZoneProposal-AOP-AdditionalResources"></a>Additional Resources</h2>
<ul>
	<li><a class="external-link" href="https://static.springsource.org/spring/docs/3.0.x/reference/aop.html" rel="nofollow">Spring's introduction into AOP</a></li>
	<li>dW: <a class="external-link" href="https://www.ibm.com/developerworks/java/library/j-aopwork15/index.html" rel="nofollow">AOP@Work: AOP myths and realities </a></li>
	<li><a class="external-link" href="https://www.manning.com/laddad2/Samplechapter1.pdf" rel="nofollow">Chapter 1 of AspectJ in Action</a>, 2nd. ed.</li>
</ul>
<h2><a name="JavaZoneProposal-AOP-Acknowledgements"></a>Acknowledgements</h2>
I would like to thank all the people who helped me with this post and the presentation including my colleges, the JRebel folk, and GluonJ's co-author prof. Shigeru Chiba.
++++
