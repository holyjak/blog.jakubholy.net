{:title "Hacking Jasper to Get Object Model of a JSP Page",
 :date "2011-06-10",
 :layout :post,
 :tags ["java" "analysis"],
 :tags-orig ["analysis" "compilation" "jasper" "java" "JSP"],
 :categories ["j2ee" "Languages" "Tools"],
 :extra-css #{}
}

++++
To perform some checks and statistical analysis on my JSPs I needed a DOM-like, hierarchical model of elements contained in them. But parsing JSP pages isn't trivial and is best left to a tool that excels in it - the Jasper JSP compiler used by Tomcat, Jetty, GlassFish and likely also by all others. There is an easy way to tweak it to produce whatever output you need nad to transform a JSP into whatever form you want, including an object model of the page:
<ol>
	<li>Define a Node.Visitor subclass for handling the nodes (tags etc.) of a JSP</li>
	<li>Write a simple subclass of Compiler, overriding its generateJava() to invoke the visitor</li>
	<li>Subclass the compiler executor JspC overriding its method getCompilerClassName() to return the class of the Compiler of yours</li>
</ol>
Let's see the code.<br><br><!--more-->
<h2>Implementation</h2>
<h3>1. Custom Visitor</h3>
A Visitor is invoked by the compiler to process a tree object model of a parsed JSP. This implementation just prints information about an interesting subset of nodes in the page, indented to make their nesting clear.<br><br><pre><code>
package org.apache.jasper.compiler;<br><br>import java.util.LinkedList;
import org.apache.jasper.JasperException;
import org.apache.jasper.compiler.Node.CustomTag;
import org.apache.jasper.compiler.Node.ELExpression;
import org.apache.jasper.compiler.Node.IncludeDirective;
import org.apache.jasper.compiler.Node.Visitor;
import org.xml.sax.Attributes;<br><br>public class JsfElCheckingVisitor extends Visitor {<br><br>    private String indent = &quot;&quot;;<br><br>    @Override
    public void visit(ELExpression n) throws JasperException {
        logEntry(&quot;ELExpression&quot;, n, &quot;EL: &quot; + n.getEL());
        super.visit(n);
    }<br><br>    @Override
    public void visit(IncludeDirective n) throws JasperException {
        logEntry(&quot;IncludeDirective&quot;, n, toString(n.getAttributes()));
        super.visit(n);
    }<br><br>    @Override
    public void visit(CustomTag n) throws JasperException {
        logEntry(&quot;CustomTag&quot;, n, &quot;Class: &quot; + n.getTagHandlerClass().getName() + &quot;, attrs: &quot;
                + toString(n.getAttributes()));<br><br>        doVisit(n);<br><br>        indent += &quot; &quot;;
        visitBody(n);
        indent = indent.substring(0, indent.length() - 1);
    }<br><br>    private String toString(Attributes attributes) {
        if (attributes == null || attributes.getLength() == 0) return &quot;&quot;;
        LinkedList&lt;String&gt; details = new LinkedList&lt;String&gt;();<br><br>        for (int i = 0; i &lt; attributes.getLength(); i++) {
            details.add(attributes.getQName(i) + &quot;=&quot; + attributes.getValue(i));
        }<br><br>        return details.toString();
    }<br><br>    private void logEntry(String what, Node n, String details) {
        System.out.println(indent + n.getQName() + &quot; at line:&quot;
                + n.getStart().getLineNumber() + &quot;: &quot; + details);
    }<br><br>}
</code></pre><br><br>Notes:
<ul>
	<li>The <em>Visitor</em> must be in the org.apache.jasper.compiler package because the essential class org.apache.jasper.compiler.Node is package-private</li>
	<li>The method <em>visitBody</em> triggers processing of the nested nodes</li>
	<li>There are more methods I could have overridden (and the catch-all method <em>doVisit</em>) but I've selected only those interesting for me</li>
	<li>The node's attributes are of the type ...sax.<a href="https://download.oracle.com/javase/1.4.2/docs/api/org/xml/sax/Attributes.html">Attributes</a>, which contains attribute names and values as strings
<ul>
	<li>attributes.getType(i) is usually CDATA</li>
</ul>
</li>
	<li>The Node structure contains information about the parent node, tag name, tag handler class, the corresponding line of the source file and the name of the source file and other useful information</li>
	<li><em>CustomTag</em> is likely the most interesting node type, e.g. all the JSF tags are of this type</li>
</ul>
<h4>Example Output (for a JSF Page)</h4>
<pre><code>
jsp:directive.include at line:5: [file=includes/stdjsp.jsp]
jsp:directive.include at line:6: [file=includes/ssoinclude.jsp]
f:verbatim at line:14: Class: com.sun.faces.taglib.jsf_core.VerbatimTag, attrs:
htm:div at line:62: Class: com.exadel.htmLib.tags.DivTag, attrs: [style=width:100%;]
 h:form at line:64: Class: com.sun.faces.taglib.html_basic.FormTag, attrs: [id=inputForm]
  htm:table at line:66: Class: com.exadel.htmLib.tags.TableTag, attrs: [cellpadding=0, width=100%, border=0, styleClass=clear box_main]
   htm:tr at line:71: Class: com.exadel.htmLib.tags.TrTag, attrs:
    htm:td at line:72: Class: com.exadel.htmLib.tags.TdTag, attrs:
    f:subview at line:73: Class: com.sun.faces.taglib.jsf_core.SubviewTag, attrs: [id=cars]
      jsp:directive.include at line:74: [file=/includes/cars.jsp]
      h:panelGroup at line:8: Class: com.sun.faces.taglib.html_basic.PanelGroupTag, attrs: [rendered=#{bookingHandler.flowersAvailable}]
...
   htm:tr at line:87: Class: com.exadel.htmLib.tags.TrTag, attrs: [style=height:5px]
    htm:td at line:87: Class: com.exadel.htmLib.tags.TdTag, attrs:
</code></pre><br><br>(I do not print "closing tags" for it's clear that a tag ends when another node with the same or smaller indentation appears or the output ends.)
<h3>2. Compiler Subclass</h3>
The important part is <em>generateJava</em>, which I have just copied, removed some code from it and added an invocation of my <em>Visitor</em>. So actually only 3 lines in the listing below are new.<br><br><pre><code>
public class OnlyReadingJspPseudoCompiler extends Compiler {<br><br>    /** We're never compiling .java to .class. */
    @Override protected void generateClass(String[] smap) throws FileNotFoundException,
            JasperException, Exception {
        return;
    }<br><br>    /** Copied from {@link Compiler#generateJava()} and adjusted */
    @Override protected String[] generateJava() throws Exception {<br><br>        // Setup page info area
        pageInfo = new PageInfo(new BeanRepository(ctxt.getClassLoader(),
                errDispatcher), ctxt.getJspFile());<br><br>        // JH: Skipped processing of jsp-property-group in web.xml for the current page<br><br>        if (ctxt.isTagFile()) {
            try {
                double libraryVersion = Double.parseDouble(ctxt.getTagInfo()
                        .getTagLibrary().getRequiredVersion());
                if (libraryVersion &lt; 2.0) {
                    pageInfo.setIsELIgnored(&quot;true&quot;, null, errDispatcher, true);
                }
                if (libraryVersion &lt; 2.1) {
                    pageInfo.setDeferredSyntaxAllowedAsLiteral(&quot;true&quot;, null,
                            errDispatcher, true);
                }
            } catch (NumberFormatException ex) {
                errDispatcher.jspError(ex);
            }
        }<br><br>        ctxt.checkOutputDir();<br><br>        try {
            // Parse the file
            ParserController parserCtl = new ParserController(ctxt, this);<br><br>            // Pass 1 - the directives
            Node.Nodes directives =
                parserCtl.parseDirectives(ctxt.getJspFile());
            Validator.validateDirectives(this, directives);<br><br>            // Pass 2 - the whole translation unit
            pageNodes = parserCtl.parse(ctxt.getJspFile());<br><br>            // Validate and process attributes - don't re-validate the
            // directives we validated in pass 1
            /**
             * JH: The code above has been copied from Compiler#generateJava() with some
             * omissions and with using our own Visitor.
             * The code that used to follow was just deleted.
             * Note: The JSP's name is in ctxt.getJspFile()
             */
            pageNodes.visit(new JsfElCheckingVisitor());<br><br>        } finally {}<br><br>        return null;
    }<br><br>    /**
     * The parent's implementation, in our case, checks whether the target file
     * exists and returns true if it doesn't. However it is expensive so
     * we skip it by returning true directly.
     * @see org.apache.jasper.JspCompilationContext#getServletJavaFileName()
     */
    @Override public boolean isOutDated(boolean checkClass) {
        return true;
    }<br><br>}
</code></pre><br><br>Notes:
<ul>
	<li>I have deleted quite lot of code unimportant for me from generate Java; for a different type of analysis than I intend some of that code could have been useful, so look into the original Compiler class and decide for yourself.</li>
	<li>I do not really care about JSP ELs so it might be possible to optimize the compiler to need only one pass.</li>
</ul>
<h3>3. Compiler Executor</h3>
It is difficult to use a Compiler directly because it depends on quite a number of complex settings and objects. The easiest thing is thus to reuse the Ant task JspC, which has the additional benefit of finding the JSPs to process. As mentioned, the key thing is the overriding of <em>getCompilerClassName</em> to return my compiler's class.<br><br><pre><code>
import org.apache.jasper.JspC;<br><br>/** Extends JspC to use the compiler of our choice; Jasper version 6.0.29. */
public class JspCParsingToNodesOnly extends JspC {<br><br>    /** Overriden to return the class of ours (default = null =&gt; JdtCompiler) */
    @Override public String getCompilerClassName() {
        return OnlyReadingJspPseudoCompiler.class.getName();
    }<br><br>    public static void main(String[] args) {
        JspCParsingToNodesOnly jspc = new JspCParsingToNodesOnly();<br><br>        jspc.setUriroot(&quot;web&quot;); // where to search for JSPs
        //jspc.setVerbose(1);     // 0 = false, 1 = true
        jspc.setJspFiles(&quot;helloJSFpage.jsp&quot;); // leave unset to process all; comma-separated<br><br>        try {
            jspc.execute();
        } catch (JasperException e) {
            throw new RuntimeException(e);
        }
    }
}
</code></pre><br><br>Notes:
<ul>
	<li>JspC normally finds all files under the specified Uriroot but you can tell it to ignore all but some selected ones by passing their comma-separated names into <em>setJspFiles</em>.</li>
</ul>
<h2>Compile Dependencies</h2>
In thy Ivy form:
<pre>&lt;dependency org="org.apache.tomcat" name="jasper" rev="6.0.29" /&gt;
&lt;dependency org="org.apache.tomcat" name="jasper-jdt" rev="6.0.29" /&gt;
&lt;dependency org="org.apache.ant" name="ant" rev="1.8.2" /&gt;</pre>
<h2>License</h2>
All the code here is directly derived from Jasper and thus falls under the same license, i.e. the <a href="https://www.apache.org/licenses/LICENSE-2.0">Apache License, Version 2.0</a>.
<h2>Conclusion</h2>
Jasper wasn't really designed for extension and modularity as documented by the fact that the crucial Node class is package private and by its API being so complex that reusing just a part of it is very hard. Fortunately the Ant task JspC makes it usable outside of a servlet container by providing some "fake" objects and there is a way to tweak it to our needs with very little work though it wasn't that easy to figure it out :-). I had to apply some dirty tricks, namely using stuff from a package-private class and overriding a method not intended to be overriden (<em>generateJava</em>) but it works and provides very valuable output, which makes it possible to do just anything you might want to do with the a JSP.
<h2>Example Code</h2>
My <a href="https://github.com/holyjak/static-jsfexpression-validator">Static JSF EL Expression Validator</a> uses this code to parse JSPs to find tags and EL expressions, you can check it out and try it. See the core module, especially the package <a href="https://github.com/holyjak/static-jsfexpression-validator/tree/master/static-jsfexpression-validator-core/src/main/java/org/apache/jasper/compiler">org.apache.jasper.compiler</a> and the class <a href="https://github.com/holyjak/static-jsfexpression-validator/blob/master/static-jsfexpression-validator-core/src/main/java/net/jakubholy/jeeutils/jsfelcheck/AbstractJsfStaticAnalyzer.java">AbstractJsfStaticAnalyzer</a> that makes use of it (the method createJsfElValidatingJspParser).
++++
