{:title "AWK: Extract Logs for the Given Date(s) from a Log File",
 :date "2011-12-18",
 :layout :post,
 :tags ["DevOps" "analysis"],
 :tags-orig ["analysis" "linux" "logging"],
 :categories ["General" "Tools"],
 :extra-css #{}
}

++++
If your log file has entries like these:<br><br><pre><code>
2011-12-10T22:00:27.996+0000 [http-8080-1] INFO  my.package.MyClass Hello, I'm alive!
2011-12-11T17:05:46.811+0000 [http-8080-15] ERROR my.package.MyClass  - Error caught in DispatcherServlet
        at my.package.MyServiceClass(MyServiceClass.java:36)
...
2011-12-11T17:06:10.120+0000 [http-8080-14] DEBUG my.package.MyClass Whoo, that has been a long day!
</code></pre><br><br>Then you can use the following bash script snippet to extract logs only for a particular day or consecutive days, including everything - even lines not starting with the date such as stacktraces - between the first log of the date up to the first log of a subsequent date (default: yesterday):<br><br><pre><code>
LOGFILE_ORIG=&quot;$0&quot;; LOGFILE=&quot;${LOGFILE_ORIG}.subset&quot;
if [ -z &quot;$LOGDAY&quot; ]; then LOGDAY=$(date +%F -d &quot;-1 days&quot;); fi
if [ -z &quot;$AFTERLOGDAY&quot; ]; then AFTERLOGDAY=$(date +%F -d &quot;$LOGDAY +1 days&quot;); fi
echo &quot;Extracting logs in the range (&gt;= $LOGDAY &amp;&amp; &lt; $AFTERLOGDAY) into $LOGFILE ...&quot; awk &quot;/^$LOGDAY/,/^$AFTERLOGDAY/ {if(!/^$AFTERLOGDAY/) print}&quot; $LOGFILE_ORIG &gt; $LOGFILE
</code></pre><br><br>This <code>date</code> format works on Linux. Date is very flexible and can provide dates in any format, not only yyyy-mm-dd. You may also want to read more about <a href="https://www.catonmat.net/blog/ten-awk-tips-tricks-and-pitfalls/#awk_ranges">Awk ranges</a> and other tips.<br><br>You would run it in one of the following ways:<br><br><pre><code>
$ ./analysis.sh /path/to/logfile.log
$ LOGDAY=2011-12-12 AFTERLOGDAY=2011-12-17 ./analysis.sh /path/to/logfile.log
</code></pre>
++++
