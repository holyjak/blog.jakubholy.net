{:title
 "Getting Started with Amazon Web Services and Fully Automated Resource Provisioning in 15 Minutes",
 :date "2011-12-07",
 :layout :post,
 :tags ["DevOps"],
 :tags-orig ["automation" "aws" "cloud" "ec2" "ops"],
 :categories ["General" "Testing" "Tools"],
 :extra-css #{}
}

++++
While waiting for a new project, I wanted to learn something useful. And because on many projects we need to assess and test the performance of the application being developed while only rarely there is enough hardware for generating a realistic load, I decided to learn more about provisioning virtual machines on demand in the Cloud, namely <a href="https://aws.amazon.com/">Amazon Web Services</a> (AWS). I've learned a lot about the tools available to work with AWS and the automation of the setup of resources (machine instances, security groups, databases etc.) and automatic customization of virtual machine instances in the AWS cloud. I'd like to present a brief introduction into AWS and a succinct overview of the tools and automation options. If you are familiar with AWS/EC2 then you might want to jump over the introduction directly to the automation section.<br><br><!--more--><br><br><h2>Why AWS?</h2><br><br>Amazon is a leading provider of "infrastructure as a service" and is constantly adding new services to its offerings. AWS allow you to create virtual machines on demand, load balance them, connect them to a "database as a service" (with several advantages over a manually managed database) and various other services such as notifications, e-mail, and a queuing service. You get access to built-in monitoring and you can deploy applications to their "platform as a service" built on top of that while retaining control over those lower-level resources.<br><br>Follow the <a href="https://aws.typepad.com/aws/">official AWS Blog</a> to be informed of new services, features etc.<br><br><h2>Getting started with AWS</h2><br><br>To <a href="https://www.amazon.com/ap/signin/177-1403391-6765917?_encoding=UTF8&amp;openid.assoc_handle=aws&amp;openid.return_to=https%3A%2F%2Faws-portal.amazon.com%2Fgp%2Faws%2Fdeveloper%2Fregistration%2Findex.html%2F177-1403391-6765917&amp;openid.mode=checkid_setup&amp;openid.ns=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0&amp;openid.claimed_id=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&amp;openid.pape.max_auth_age=600&amp;siteState=awsMode%3A%3Aregistration%3A%3AheaderMessage%3A%3AAmazon%20Web%20Services%20Sign%20Up%3A%3A&amp;pageId=aws.ssop&amp;openid.pape.preferred_auth_policies=http%3A%2F%2Fschemas.openid.net%2Fpape%2Fpolicies%2F2007%2F06%2Fmulti-factor-physical&amp;marketplaceId=ATVPDKIKX0DER&amp;accountStatusPolicy=P1&amp;openid.ns.pape=http%3A%2F%2Fspecs.openid.net%2Fextensions%2Fpape%2F1.0&amp;openid.identity=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&amp;authCookies=1">create an AWS account</a> you'll need a phone and a credit card (which will be charged if you use any of the paid services or exceed any of the free usage limits). Be careful during the sign-up process as the UI isn't exactly error-proof. It might take up to two hours before your account becomes fully functional.<br><br>The next thing to do is to browse through the <a href="aws.amazon.com/console/">AWS Management Console</a>, which let you create and configure various services and resources, the most interesting being the Elastic Compute Cloud (EC2), where you can start new virtual machines. The management console is quite self-explanatory though not as user-friendly as I might wish. You might want to check these screenshots showing <a href="https://code.google.com/p/xebia-france/wiki/MonitoringOpenSourceJMeter">how to create an EC2 instance</a> in the Management Console.<br><br><h3>Brief Overview</h3><br><br>The core rule of AWS is that you only pay for what you use, i.e. runtime hours of your instances and the traffic - see the <a href="https://calculator.s3.amazonaws.com/calc5.html">AWS Simple Monthly Calculator</a>.<br><br>The most important resource is <strong>EC2</strong> as it allows you to create virtual machines, called "instances." There are different <a href="https://aws.amazon.com/ec2/instance-types/">types of instances</a> regarding their memory and computational power. By default they are transient and discarded (terminated) once you stop using them. You may also have an instance backed by the Elastic Block Storage (EBS) which enables you to stop and start the instance again with any state and changes preserved, Amazon charges $0.10/GB/month for that. You can also mount EBS storage as a volume to your instance if you need to persist only some data. There is no quick way to re-create a terminated instance, you have to go through the wizard again - that's where the command-line tools and automation become handy.<br><br>When setting up your EC2 instances, you'll likely also need to assign them into the same security group and configure what ports are open to whom in the security group (by default you cannot even SSH in).<br><br>If you want to learn all about EC2, go to the <a href="https://docs.amazonwebservices.com/AWSEC2/latest/UserGuide/">Amazon EC2 User Guide</a>.<br><br>Aside of EC2 there are also many other interesting services such as the Elastic Beanstalk (PaaS, currently for Java webapps, using Tomcat), the distributed storage S3 etc. There are also some additional services such as the Amazon <a href="https://aws.amazon.com/cloudwatch/">CloudWatch</a>, which is a (performance) monitoring tool for your AWS infrastructure. (Which can be complemented by <a href="https://newrelic.com/about/partners/amazon-web-services">New Relic</a> monitoring for even more insight into the application.)<br><br><h2>Leveraging the Amazon Free Tier</h2><br><br>Amazon provides new customers with a <a href="https://aws.amazon.com/free/">certain amount of resources for free</a> for one year, you only need to pay if you consume more than that. It includes for example a non-stop running micro EC2 instance backed by EBS (i.e. it is persistent, you can stop and start it again), 15 GB traffic, 10 GB of EBS storage, 5 GB of S3 storage, 10 CloudWatch metrics etc. It unfortunately doesn't include the Amazon-managed MySQL/Oracle database (<a href="https://aws.amazon.com/rds/">RDS</a>) though they provided 1GB of space in the Amazon <a href="https://aws.amazon.com/simpledb/">SimpleDB</a> (a NoSQL key-value store).<br><br>This means that you can have a constantly running EC2 Micro instance (613 MB memory) for free. You can use it as your base in the cloud, for example because the traffic between two EC2 instances is faster/cheaper and because it has full access to machines within the same security group.<br><br>The best choice is likely to base your instance on the <a href="https://aws.amazon.com/amazon-linux-ami/">Amazon Linux AMI</a>, which is a variation of RedHat Linux optimized for AWS, equipped with most of the AWS API command-line tools and CloudInit for automated system setup (described later). I'd recommend you to browse through the <a href="https://ec2-downloads.s3.amazonaws.com/AmazonLinuxAMIUserGuide.pdf">user guide</a> that describes what tools are available and how to use CloudInit.<br><br><h2>What about Automation?</h2><br><br>The AWS Management Console is great if you do something for the first time but the wizards are too time-consuming for repeated tasks. Especially if you need to set up more than a single instance - let's say a RDS database instance, an EC2 machine instance and the corresponding security groups or a number of identical instances. We will look into ways how to automate this.<br><br>Aside of setting up the infrastructure, you usually also need to customize the EC2 instances (at least by installing and starting the software you need them for). You can log into them via SSH but wouldn't it be great to be able to automate that, especially if you need multiple similar instances?<br><br>Notice that I'm now concerned only with automating the work of the AWS user. It is also possible to configure AWS to <a href="https://aws.amazon.com/autoscaling/">automatically start new EC2 instances</a> when needed (e.g. when the load exceeds a limit) but that is a different story.<br><br>Overview:<br><br><ul>
    <li>Infrastructure provisioning automation:</li>
<ul>
    <li>AWS API command-line tools (or AWS Java API or third-party tools/libraries)</li>
    <li>AWS CloudFormation</li>
</ul>
    <li>Instance OS &amp; SW setup automation:</li>
<ul>
    <li>Canonical CloudInit (Ubuntu and Amazon Linux AMIs) - perhaps leveraging Puppet or Chef</li>
    <li>Creating a customized AMI</li>
</ul>
</ul><br><br><h3>Automating Infrastructure Provisioning</h3><br><br>There are two prominent options for creating your EC2 instances and other resources without the AWS Management Console: AWS API command-line tools and AWS CloudFormation.<br><br><h4>AWS API command-line tools</h4><br><br>Amazon offers command-line tools for most of its services such as EC2 and RDS.<br><br><strong>EC2</strong>: Robert Sosinovski published very good instructions for <a href="https://www.robertsosinski.com/2008/01/26/starting-amazon-ec2-with-mac-os-x/">starting with Amazon EC2 command-line tools</a> (which isn't specific to Mac OS X despite its title) back in 2008 but they are still valid so just follow them, there is no point in repeating them here (basically download, unpack, set environment variables, provide credentials). Alternatively, you can go to the <a href="aws.amazon.com/developertools/351">download page</a> and follow the <a href="https://docs.amazonwebservices.com/AWSEC2/latest/UserGuide/index.html?SettingUp_CommandLine.html">official instructions</a>. I'd recommend you to create a folder to include all the tools =&gt; $AWS_FOLDER/ec2/ etc. instead of ~/.ec2/.<br><br>If you want to use another AWS region than the default us-east-1 then you need to set also the environmental variable EC2_URL, see the list of <a href="https://docs.amazonwebservices.com/general/latest/gr/index.html?rande.html#ec2_region">regional endpoints</a> or the command <em>ec2-describe-regions</em>. Ex. (my URL has ec2 in the middle contrary to the list of endpoints but evidently it works too):<br><br><pre><code>export EC2_URL=https://eu-west-1.ec2.amazonaws.com</code></pre><br><br><strong>Authentication setup for the other tools</strong>: While the documentation for the EC2 tools describes only authentication via the X.509 certificate (environmental variables EC2_PRIVATE_KEY, EC2_CERT), the other tools (at least RDS, CloudFormation) support uniform authentication via the environmental variable AWS_CREDENTIAL_FILE pointing to a file containing your AWS Access Key Id and Secret Key (which you can find in your <a href="aws.amazon.com/account">AWS account</a> under Security Credentials - Access Keys), the configuration is described in the tools' readme files.<br><br><strong>RDS</strong>: Setup of the RDS command-line tools is quite similar to EC2, just <a title="RDS tools download page" href="https://aws.amazon.com/developertools/2928">download them</a> and add environmental variables as described in the included readme.txt.<br><br>As with EC2, you may want to change your default <a href="https://docs.amazonwebservices.com/general/latest/gr/index.html?rande.html#rds_region">RDS region</a>:<br><br><pre><code>export RDS_URL=https://eu-west-1.rds.amazonaws.com</code></pre><br><br><h5>Examples from the Vaadin Test Setup</h5><br><br>My original plan was to try the performance testing described in <a href="https://vaadin.com/wiki/-/wiki/Main/Vaadin Scalability Testing with Amazon Web Services">Vaadin Scalability Testing with Amazon Web Services</a>, which unfortunately proved to be impossible because the test application failed to run. During the process I've automated the individual setup steps, shown below. You may want to check the blog post to understand the context.<br><br>I didn't need to create a security group and allow access to it via the command-line as I've done it via the Management Console. You could open the SSH port as follows:<br><br><pre><code>ec2-authorize  -p 22</code></pre><br><br>Create two EC2 instances:<br><br><pre><code>ec2-run-instances ami-1a0f3d6e -t m1.large -k VaadinAS --instance-count 2 -z eu-west-1c -g quick-start-1</code></pre><br><br><ul>
    <li>-k specifies the name of an existing key-pair (the Management Console offers you to create it the first time you create an instance) that will be associated with the instance to make ssh login without a password possible</li>
    <li>-z specifies the availability zone (AZ) within the region (you can see the available ones when creating an instance in the Mgmt Console), it's likely better to have all resources in the same AZ</li>
    <li>-g specifies an existing security group (again created in the Console); default is "default", I believe</li>
</ul><br><br>The <em>ec2-run-instances</em> command also supports the --user-data or --user-data-file attribute to pass setup instructions to CloudInit, as described later on.<br><br>To log into instances you will need their public domain name/IP (printed when the command finishes) and user name, which depends on the AMI used (easiest: right-click on the instance in the Mgmt Console and select "Connect" to get a complete SSH connect command), and the key file (./VaadinAS.pem in my case). Thus I would log into my first instance as follows (provided that I've already opened port 22 in the security group):<br><br><pre><code>ssh -i VaadinAS.pem ubuntu@ec2-46-137-136-253.eu-west-1.compute.amazonaws.com</code></pre><br><br>Create a RDS instance using MySQL (it may take few minutes before its startup finishes):<br><br><pre><code>rds-create-db-instance quicktickets --allocated-storage 5 -c db.m1.large  -e MySQL5.1 -u quicktickets -p V3ryS3cr3t  -z eu-west-1c --backup-retention-period 0 --db-name quicktests</code></pre><br><br><ul>
    <li>quicktickets will be the name of the instance</li>
    <li>the max. size will be 5 GB (can be changed later)</li>
    <li>-c - it will be based on the db.m1.large instance</li>
    <li>-e - the DB type is MySQL, -u username quicktickets, -p password V3ryS3cr3t</li>
    <li>-z eu-west-1c puts it into the same AZ as the EC2 instances</li>
    <li>--backup-retention-period 0 - don't keep backups (default: 1 day)</li>
    <li>--db-name quicktests - needed for connecting to it</li>
</ul><br><br>Next I need to make the DB accessible from my EC2 instances (that are in the security group quick-start-1 ):<br><br><pre><code>rds-authorize-db-security-group-ingress default --ec2-security-group-name quick-start-1 --ec2-security-group-owner-id </code></pre><br><br><ul>
    <li>You can find your AWS Account ID in your <a href="aws.amazon.com/account">AWS account</a> under the Security Credentials</li>
</ul><br><br>To find out the hostname of the instance execute <em>rds-describe-db-instance</em>, which will also tell you whether it is still launching or already running.<br><br>Now you can connect to the DB from an EC2 instance in the security group:<br><br><pre><code>mysql -h quicktickets.cpokd2djuazy.eu-west-1.rds.amazonaws.com -u quicktickets --password=V3ryS3cr3t quicktickets</code></pre><br><br><h4>AWS CloudFormation</h4><br><br><a href="https://aws.amazon.com/cloudformation/">CloudFormation</a> is a new (2/2011) free service from Amazon that enables you to describe the resources you want and their dependencies in a text format and to use this "template" to instantiate them ("to create a stack") either via the AWS Management Console or via the <a href="https://aws.amazon.com/developertools/AWS-CloudFormation/2555753788650372">CloudFormation Command Line Tools</a>. You can also share you template and use and combine templates created by others. The templates also support the UserData attribute that you can use to pass setup instructions to CloudInit, as described later on. Check out this screenshot-based post about <a href="https://bioteam.net/2011/02/amazon-cloudformation-first-look/">setting up a CF stack via the Management Console</a>.<br><br>An example template file:<br><br><pre><code>
{  &amp;quot;AWSTemplateFormatVersion&amp;quot;: &amp;quot;2010-09-09&amp;quot;,
  &amp;quot;Description&amp;quot; : &amp;quot;One EC2 instance with a security group open for SSH&amp;quot;,<br><br>  &amp;quot;Parameters&amp;quot;: {
    &amp;quot;KeyName&amp;quot;: {
      &amp;quot;Description&amp;quot; : &amp;quot;Name of an existing EC2 KeyPair to enable SSH access&amp;quot;,
      &amp;quot;Type&amp;quot;: &amp;quot;String&amp;quot;
    },
    &amp;quot;InstanceType&amp;quot;: {
      &amp;quot;Default&amp;quot;: &amp;quot;m1.large&amp;quot;,  &amp;quot;Type&amp;quot;: &amp;quot;String&amp;quot;
    }
  },<br><br>  &amp;quot;Resources&amp;quot;: {<br><br>    &amp;quot;EC2SecurityGroup&amp;quot;: {
      &amp;quot;Properties&amp;quot;: {
        &amp;quot;SecurityGroupIngress&amp;quot;: [
          {
            &amp;quot;FromPort&amp;quot;: &amp;quot;22&amp;quot;,
            &amp;quot;CidrIp&amp;quot;: &amp;quot;0.0.0.0/0&amp;quot;,
            &amp;quot;ToPort&amp;quot;: &amp;quot;22&amp;quot;,
            &amp;quot;IpProtocol&amp;quot;: &amp;quot;tcp&amp;quot;
          }
        ],
        &amp;quot;GroupDescription&amp;quot;: &amp;quot;SSH access&amp;quot;
      },
      &amp;quot;Type&amp;quot;: &amp;quot;AWS::EC2::SecurityGroup&amp;quot;
    },<br><br>    &amp;quot;Ec2Instance&amp;quot;: {
      &amp;quot;Properties&amp;quot;: {
        &amp;quot;SecurityGroups&amp;quot;: [{&amp;quot;Ref&amp;quot;: &amp;quot;EC2SecurityGroup&amp;quot;}],
        &amp;quot;ImageId&amp;quot;: { &amp;quot;Fn::FindInMap&amp;quot;: [&amp;quot;AWSRegionArch2AMI&amp;quot;,
            {&amp;quot;Ref&amp;quot;: &amp;quot;AWS::Region&amp;quot;}, &amp;quot;64&amp;quot;
          ]
        },
        &amp;quot;UserData&amp;quot;: {
          &amp;quot;Fn::Base64&amp;quot;: { &amp;quot;Fn::Join&amp;quot;: [&amp;quot;&amp;quot;, [
              &amp;quot;#!/bin/bash -v\n&amp;quot;,
              &amp;quot;# you init bash script here...\n&amp;quot;
        ]]} },
        &amp;quot;KeyName&amp;quot;: { &amp;quot;Ref&amp;quot;: &amp;quot;KeyName&amp;quot; },
        &amp;quot;InstanceType&amp;quot;: { &amp;quot;Ref&amp;quot;: &amp;quot;InstanceType&amp;quot; }
      },
      &amp;quot;Type&amp;quot;: &amp;quot;AWS::EC2::Instance&amp;quot;
    }
  },<br><br>  &amp;quot;Mappings&amp;quot;: {
    &amp;quot;AWSInstanceType2Arch&amp;quot; : {
      &amp;quot;m1.large&amp;quot;    : { &amp;quot;Arch&amp;quot; : &amp;quot;64&amp;quot; }, &amp;quot;m1.xlarge&amp;quot;   : { &amp;quot;Arch&amp;quot; : &amp;quot;64&amp;quot; }, ...
    }
  },<br><br>  &amp;quot;Outputs&amp;quot; : {
    &amp;quot;InstanceId&amp;quot; : {
      &amp;quot;Description&amp;quot; : &amp;quot;InstanceId of the newly created EC2 instance&amp;quot;,
      &amp;quot;Value&amp;quot; : { &amp;quot;Ref&amp;quot; : &amp;quot;Ec2Instance&amp;quot; }
    },
    &amp;quot;AZ&amp;quot; : {
      &amp;quot;Description&amp;quot; : &amp;quot;Availability Zone of the newly created EC2 instance&amp;quot;,
      &amp;quot;Value&amp;quot; : { &amp;quot;Fn::GetAtt&amp;quot; : [ &amp;quot;Ec2Instance&amp;quot;, &amp;quot;AvailabilityZone&amp;quot; ] }
    },
    &amp;quot;PublicIP&amp;quot; : {
      &amp;quot;Description&amp;quot; : &amp;quot;Public IP address of the newly created EC2 instance&amp;quot;,
      &amp;quot;Value&amp;quot; : { &amp;quot;Fn::GetAtt&amp;quot; : [ &amp;quot;Ec2Instance&amp;quot;, &amp;quot;PublicIp&amp;quot; ] }
    }
  }
}
</code></pre><br><br><ul>
    <li>4: As you can see, you can define properties (with defaults) for which values may be supplied when a new stack is being created from the template</li>
    <li>16, 31: Next it defines two resources: a security group and an EC2 instance (which uses some mappings because the names of AMIs differ based in region)</li>
    <li>38: Setup instructions can be supplied to CloudInit via base64-encoded UserData</li>
    <li>56: You can also define what information should be available via the DescribeStacks function (command line: cfn-describe-stacks)</li>
</ul><br><br>CloudFormation let you define any resource (EC2 instances, RDS instances, load balancers, security groups, ...), their dependencies, and, via CloudInit, various boot-time actions such as SW installation. The templates are valid JSON documents.<br><br>Example: <a href="https://docs.amazonwebservices.com/FeaturedArticles/latest/index.html?cloudformation-waitcondition-article.html">Using CloudFormation and Cloud-Init to install and start a RoR application</a> (featuring the WaitCondition) - it is not too long and describes the individual sections of the template file. You can also browse through the <a href="https://aws.amazon.com/cloudformation/aws-cloudformation-templates/">public template files</a>, for example this: <a href="https://s3.amazonaws.com/cloudformation-templates-us-east-1/Drupal_Single_Instance_With_RDS.template">Single EC2 Instance web server with Amazon RDS database instance</a>.<br><br>In June 2011 Amazon launched also <a href="https://forums.aws.amazon.com/ann.jspa?annID=1048">CloudFormer</a>, a prototype tool that enables you to create CloudFormation templates from the existing AWS resources in your account.<br><br>If you still desire more information, read the <a href="docs.amazonwebservices.com/AWSCloudFormation/latest/UserGuide/">CloudFormation User Guide</a>.<br><br><h5>Customizing an Instance with CloudFormation Metadata and Helper Scripts</h5><br><br>From <a href="https://s3.amazonaws.com/cloudformation-examples/BoostrappingApplicationsWithAWSCloudFormation.pdf">Bootstrapping Applications via AWS CloudFormation</a>:<br><br><blockquote>AWS CloudFormation allows you to define the set of packages, files and operating system services through metadata in a template. In addition, it provides helper functions to
interpret the metadata and act on it, installing packages, creating files and starting or restarting services on the instance. The AWS CloudFormation scripts build on the basic CloudInit functionality and enable you to create a common, simple CloudInit startup script that is data-driven through metadata. You describe what needs to be installed on the host in metadata and AWS CloudFormation takes care of the how.</blockquote><br><br>See the document for instructions on how to use the metadata and <a href="https://aws.amazon.com/developertools/AWS-CloudFormation/4026240853893296">helper scripts</a> such as <em>cfn-init</em>, which installs packages, downloads and unpacks archives, starts services, and creates files based on data in the metadata section. It also mentiones the integration of CloudFormation and Chef or Puppet, which is described in more detail in the whitepapers <a href="https://s3.amazonaws.com/cloudformation-examples/IntegratingAWSCloudFormationWithOpscodeChef.pdf">Integrating AWS CloudFormation with Opscode Chef</a> and <a href="https://s3.amazonaws.com/cloudformation-examples/IntegratingAWSCloudFormationWithPuppet.pdf">Integrating AWS CloudFormation with Puppet</a>. If you intended to use CloudFormation then you should absolutely read this 22 pages guide.<br><br>(Note: <em>cfn-init</em> supports downloading and unpacking packages, which can be used e.g. to fetch the latest source code of you application provided on-demand by GitHub.)<br><br>You can see an example of usage in this <a href="https://s3.amazonaws.com/cloudformation-templates-us-east-1/Drupal_Single_Instance_With_RDS.template">template leveraging metadata &amp; helper scripts</a>.<br><br><h4>Other Alternatives</h4><br><br><ul>
    <li>AWS Java API (the command-line tools use it, it's based on web service calls)</li>
    <li>Third-party tools/libraries, e.g. the Ruby gem <a href="https://github.com/fog/fog">Fog</a>.</li>
    <li><a href="https://wiki.opscode.com/display/chef/Launch+Cloud+Instances+with+Knife">Chef + Knife</a>, Puppet (I believe they provide their own wrappers for the AWS WS calls and leverage CloudInit)</li>
</ul><br><br><h3>Automating EC2 Instance OS/SW Setup</h3><br><br>To customize the software inside EC2 instances and its configuration you can either create a customized AMI or use Canonical's CloudInit with AMIs that support it (Amazon Linux and Ubuntu and maybe others). If you use CloudFormation, you have also another possibility based on CloudInit, described in the C.F. section above.<br><br><h4>Canonical CloudInit and Instance User Data</h4><br><br>You can pass whatever text data to a new instance via the <a href="https://docs.amazonwebservices.com/AWSEC2/latest/UserGuide/index.html?instancedata-data-categories.html">User Data</a> attribute (up to 16KB), the data is then available from within the instance at http://169.254.169.254/latest/user-data (you can also <a href="https://docs.amazonwebservices.com/AWSEC2/latest/UserGuide/index.html?AESDG-chapter-instancedata.html">access various metadata</a> in a similar way). <a href="https://help.ubuntu.com/community/CloudInit">CloudInit</a> is a Linux utility developed by Canonical, the company behind Ubuntu, that reads these data and processes any instructions embedded in them at boot time (approximately when rc.local runs). For example if it starts with #! then it is run as a shell script under root.<br><br>CloudInit accepts different types of instructions in user data, distinguished by the first line: a script (#!...), cloud config data i.e. packages to install etc. (#cloud-config), URLs of files to process (#include ...), #upstart-job to add something to /etc/init (run on each boot) and more. It can even handle gzip-compressed user data and multi-part data, combining several of the instruction types (see <a href="https://launchpad.net/cloud-utils">cloud-utils</a> and the command <a href="https://www.makelinux.net/man/1/W/write-mime-multipart">write-mime-multipart</a>).<br><br>The type <a href="https://ubuntu-smoser.blogspot.com/2010/03/introducing-cloud-inits-cloud-config.html">#cloud-config</a> is quite useful as it is a simpler way to install packages and execute commands than a bash script. It contains YAML-formatted instructions, f.ex. "runcmd" to run a command-line tool, "packages" to install packages via the OS' package manager. Example: <a href="https://code.google.com/p/xebia-france/wiki/CloudInitConfigurationToAutomateInstallationOfJenkins">Installing Jenkins CI with </a><a href="https://code.google.com/p/xebia-france/wiki/CloudInitConfigurationToAutomateInstallationOfJenkins">#cloud-config</a>.<br><br>CloudInit isn't very well documented yet, you may ocassionaly need to <a href="https://code.launchpad.net/~cloud-init-dev/cloud-init/trunk">read the Python source codes</a>. If something goes wrong, you can check the logs in the instance's /var/log/cloud-init.log.<br><br>Aside of the official documentation you might want to see Xebia's <a href="https://www.slideshare.net/XebiaFrance/cloudinit-introduction">CloudInit introduction presentation</a> and read the section on CloudInit in the Amazon Linux AMI <a href="https://ec2-downloads.s3.amazonaws.com/AmazonLinuxAMIUserGuide.pdf">user guide</a>.<br><br><h4>Creating a Customized Amazon Machine Image</h4><br><br>CloudInit installs and configures software at launch time and thus the instance takes longer to become fully available. If that is a problem then you may prefer to create your own customized <a href="https://aws.amazon.com/amis">Amazon Machine Image</a> (AMI) with all the software already installed and configured. It's described e.g. in this brief <a href="https://docs.amazonwebservices.com/AWSEC2/2007-08-29/GettingStartedGuide/creating-an-image.html">how to create a new AMI from an existing one</a> (2007) or in the <a href="https://docs.amazonwebservices.com/AWSEC2/latest/UserGuide/index.html?creating-an-ami.html">official AMI customization docs</a> and you may also want to have a look at the <a href="https://aws.amazon.com/developertools/368">EC2 AMI command line tools</a>. You'd then create new EC2 instances based on the customized AMI.<br><br><h2>Some Related Stuff</h2><br><br>If your EC2 instances need to communicate and use a technology that requires them to be on the same subnet then you can use Amazon <a href="https://aws.amazon.com/vpc/">Virtual Private Cloud</a> (VPC; free) and even connect it to your data center via VPN ($0.05/h). This may be necessary for example for running <a href="https://jmeter.apache.org/usermanual/remote-test.html">multiple JMeter instances</a>.<br><br>Regarding JMeter, Jörg Kalsbach has created an AMI that simplifies the creation of JMeter master-slaves farms (3/2010): <a href="https://aws.amazon.com/amis/2924">JMeter In The Cloud - A cloud based load testing environment</a> (read the doc). (The trick is that the master instance starts the slave instances and thus knows their IPs. I guess that something similar could be done with CloudFormation, Auto Scale and user data/CloudInit.)<br><br><h2>Summary</h2><br><br>AWS is a dynamically developing platform with continually improving tooling and a growing offer of services. It's very easy to get started with using the web-based Management Console but it becomes soon more convenient to move to a more automated interface, such as the command-line tools or even CloudFormation for whole infrastructure stack setup. The support for customizing instances either by creating custom images or at launch time via CloudInit and/or CloudFormation's metadata and scripts is very good and people have already been combining it with their favorite DevOps tools Chef and Puppet.<br><br>I'd recommend you to start with AWS using the Management Console and then to switch to the command-line tools and CloudInit when you become comfortable with the concepts and usage. If you need to provision multiple resources repeatedly, you should use CloudFormation with its metadata and helper scripts (perhaps leveraging also Puppet/Chef).<br><br><p style="text-align:center;"><em>Published originally at <a href="https://blog.iterate.no/2011/12/02/getting-started-with-amazon-web-services-and-fully-automated-resource-provisioning-in-15-minutes/">blog.iterate.no</a>.</em></p>
++++
