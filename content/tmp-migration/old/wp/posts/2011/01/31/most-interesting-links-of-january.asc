{:title "Most interesting links of January",
 :date "2011-01-31",
 :layout :post,
 :tags ["testing" "java"],
 :tags-orig ["java" "tdd" "Testing"],
 :categories ["Languages" "Testing" "Top links of month"],
 :extra-css #{}
}

++++
I'm moving to Norway and have thus little time for reading but still I've stumbled upon something really interesting.
<ul>
	<li>Bob C. Martin (the Clean Code guy): <a href="https://cleancoder.posterous.com/the-transformation-priority-premise">The Transformation Priority Premise</a> - with TDD the code goes through a series of transformations (similar to refactorings but they change the behaviour) that "move the code from a <em>specific </em>form to a more <em>generic</em> form" (from "return 0;" to "return myFunc();"). "It also appears that these transformations have a preferred order based on complexity." (nothing =&gt; simple code with null; null =&gt; constant; ...). "<em>It is the premise of this blog that if tests are chosen and implemented in this preferred order of transformations, then TDD impasses will be reduced or eliminated.</em>"
Also the article explains nicely why the practice of writting simple, wrong (i.e. too specific) code is good.&nbsp;
<ul>
	<li>Uncle Bob's TDD excercises (katas): <a href="https://docs.google.com/viewer?url=http://butunclebob.com/files/downloads/Prime%2520Factors%2520Kata.ppt">Prime Factors kata</a> (<a href="https://butunclebob.com/files/downloads/Prime%2520Factors%2520Kata.ppt">as .ppt</a>), <a href="https://docs.google.com/viewer?url=http://butunclebob.com/files/downloads/Bowling%2520Game%2520Kata.ppt">The Bowling Game Kata</a> (<a href="https://butunclebob.com/files/downloads/Bowling%2520Game%2520Kata.ppt">as .ppt</a>)</li>
</ul>
</li>
	<li><a href="https://www.javacodegeeks.com/2011/01/10-tips-proper-application-logging.html">10 Tips for Proper Application Logging</a> - should be rather called 10 best practices for (enterprise Java) logging</li>
	<li><a href="https://www.agileproductdesign.com/blog/2009/kanban_over_simplified.html">Kanban Development Oversimplified</a> - finally an explanation of Kanban for SW development I could understand, also thanks to the comparison with other agile approaches</li>
</ul>
++++
