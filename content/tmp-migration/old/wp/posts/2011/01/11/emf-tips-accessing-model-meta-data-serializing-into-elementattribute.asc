{:title
 "EMF tips: Accessing model meta data, serializing into element/attribute",
 :date "2011-01-11",
 :layout :post,
 :tags ["java" "library"],
 :tags-orig ["EMF" "java"],
 :categories ["eclipse" "Languages"],
 :extra-css #{}
}

++++
Two tips for the Eclipse Modeling Framework (EMF) 2.2.1:
<ol>
	<li>Accessing model's meta model - accessing EClass/attribute by name - so that you can set an attribute when you only know its name and haven't its EAttribute</li>
	<li>How to force EMF to serialize an object as an XML element instead of an XML attribute</li>
</ol>
<!--more-->Excuse my rather liberal and slightly confusing use of the terms model, model instance and meta model.
<h2>Tip 1: Accessing model's meta model - accessing EClass/attribute by name</h2>
Normally you cannot do any operation on a dynamic EMF model instance - such as instantiating an EObject or settings its property via eSet - without the corresponding meta model objects such as EClass and EAttribute. But there is a solution - you can build an <a href="https://download.eclipse.org/modeling/emf/emf/javadoc/2.4.3/org/eclipse/emf/ecore/util/ExtendedMetaData.html">ExtendedMetaData</a> instance and use its methods to find the meta model objects based on search criteria such as element name and namespace.
<h3>Examples</h3>
<h4>Create ExtendedMetaData from a model</h4>
One way to build a meta data instance is to instantiate <a href="https://download.eclipse.org/modeling/emf/emf/javadoc/2.4.3/org/eclipse/emf/ecore/util/BasicExtendedMetaData.html">BasicExtendedMetaData</a> based on a Registry, containing all registered packages. This is usually available either via ResourceSet.<a href="https://download.eclipse.org/modeling/emf/emf/javadoc/2.4.3/org/eclipse/emf/ecore/resource/ResourceSet.html#getPackageRegistry%28%29">getPackageRegistry</a>() or globally, via EPackage.Registry.<a href="https://download.eclipse.org/modeling/emf/emf/javadoc/2.4.3/org/eclipse/emf/ecore/EPackage.Registry.html#INSTANCE">INSTANCE</a>.<br><br><pre><code>
import org.eclipse.emf.ecore.util.*;
...
ExtendedMetaData modelMetaData = new BasicExtendedMetaData(myResourceSet.getPackageRegistry());
</code></pre>
<h4>Get EClass for a namespace and name</h4>
Provided that your model contains an element with the name Book and namespace http://example.com/book:<br><br><pre><code>
EClass bookEClass = (EClass) modelMetaData.getType(&quot;http://example.com/book&quot;, &quot;Book&quot;);
</code></pre>
<h4>Get EClass' attribute by name</h4>
Beware: Some properties (such as those described by named complex types) are not represented by an <a href="https://download.eclipse.org/modeling/emf/emf/javadoc/2.4.3/org/eclipse/emf/ecore/EAttribute.html">EAttribute</a> but an <a href="https://download.eclipse.org/modeling/emf/emf/javadoc/2.4.3/org/eclipse/emf/ecore/EReference.html">EReference</a> (both extend <a href="https://download.eclipse.org/modeling/emf/emf/javadoc/2.4.3/org/eclipse/emf/ecore/EStructuralFeature.html">EStructuralFeature</a>) and are accessible as the EClass' elements, not attributes, even though from developer's points of view they're attributes of the owning class.<br><br>Let's suppose that the book has the attribute name:<br><br><pre><code>
EStructuralFeature nameAttr = modelMetaData.getElement(bookEClass, null, &quot;name&quot;);</code></pre><br><br>The namespace is null because normally attributes/nested elements are not classified with a schema.<br><br>Here is how you would print the name and namespace URI of an attribute/element:<br><br><pre><code>
System.out.println(&quot;attr: &quot; + modelMetaData.getNamespace(nameAttr) + &quot;:&quot; + nameAttr.getName());
// prints &quot;null:name&quot;
</code></pre>
<h2>Tip 2: How to force EMF to serialize an object as an XML element instead of an XML attribute</h2>
Normally EMF stores simple Java properties as attributes of the XML element representing the owning class:<br><br><pre><code>
&lt;b:Book b:xmlns=&quot;...&quot; name=&quot;The Book of Songs&quot; /&gt;
</code></pre><br><br>but you might prefer to have it rather as a nested element:<br><br><pre><code>&lt;b:Book b:xmlns=&quot;...&quot;&gt;
   &lt;name&gt;The Book of Songs&lt;/name&gt;
&lt;/b:Book&gt;</code></pre><br><br>To achieve that:
<ol>
	<li>Enable the save option OPTION_EXTENDED_META_DATA (so that extended meta data such as annotations and an XML map aren't ignored)</li>
	<li>Tell EMF that you want this property to be stored as an element
<ol>
	<li>By attaching an eAnnotation to it (not shown)</li>
	<li>By supplying a XML Map with this information upon save</li>
</ol>
</li>
</ol>
To enable the extended metadata:<br><br><pre><code>
Map&lt;String, Object&gt; saveOptions = new HashMap&lt;String, Object&gt;();
saveOptions.put(XMLResource.OPTION_EXTENDED_META_DATA, Boolean.TRUE);
</code></pre><br><br>According to some documentation the value should be an implementation ofÂ  ExtendedMetaData, according to others Boolean.TRUE is the correct choice - I use the latter for it's easier and works for me.<br><br>To tell EMF to write a property as an element when serailizing to XML:<br><br><pre><code>
import org.eclipse.emf.ecore.xmi.impl.*;
...
EAttribute bookNameEAttribute = ...; // retrieved e.g. from meta data, see Tip 1
XMLMapImpl map = new XMLMapImpl();
XMLInfoImpl x = new XMLInfoImpl();
x.setXMLRepresentation(XMLInfoImpl.ELEMENT);
map.add(bookNameEAttribute, x);
saveOptions.put(XMLResource.OPTION_XML_MAP, map);
</code></pre><br><br>The <a href="https://download.eclipse.org/modeling/emf/emf/javadoc/2.4.3/org/eclipse/emf/ecore/xmi/impl/XMLInfoImpl.html">XMLInfoImpl</a> enables you to customize the namespace, name and representation of the element.<br><br>When saving you then just supply the save options:<br><br><pre><code>
EObject target = ...;
org.eclipse.emf.ecore.resource.Resource outResource = ...;
outResource.getContents().add(target);
outResource.save(saveOptions);
</code></pre><br><br><strong>Reference</strong>: the Redbook <a href="https://www.redbooks.ibm.com/abstracts/sg246302.html">Eclipse Development using the Graphical Editing Framework and the Eclipse Modeling Framework</a>, page 74, section 2.3.4
++++
