{:title "Ivy: How to Retrieve Source Codes of Dependencies",
 :date "2011-05-20",
 :layout :post,
 :tags ["tool"],
 :tags-orig ["ivy"],
 :categories ["Tools"],
 :extra-css #{}
}

++++
<p style="text-align:center;"><em>Summary: To download sources you must map the dependency's conf also to 'sources' (ex.: <code>conf="myScope-&gt;default,sources"</code>).</em></p>
If you are using <a href="https://ant.apache.org/">Apache Ivy</a> (2.2) for maintaining you dependencies, you may also want to retrieve source codes (or javadocs) of those dependencies, e.g. to get nice help pop-ups in Eclipse or to actually browse the sources. Provided that you're retrieving the dependencies from Maven repositories, the configuration required to enable retrieval of source codes is to map to the Ivy "configuration" ("scope", or perhaps more exactly classifier, in the Maven language) called "<code>sources</code>" (or "<code>javadoc</code>" to fetch JavaDocs).<br><br><!--more--><br><br>To find out what target configurations are defined, you may check the generated Ivy metadata for a downloaded Maven artifact, for example ~/.ivy2/cache/org.springframework/spring-context/ivy-2.5.6.xml - check &lt;configurations&gt; for (obviously) the configurations and &lt;publications&gt; to find out what artifacts are available in which configurations (ex.: ...name="spring-context" type="source" ext="jar" conf="<em>sources</em>"...).
<h2>Example: Ivy.xml with non-standard configurations</h2>
<pre><code>
&lt;!-- ivy.xml --&gt;
...
   &lt;configurations&gt;
      &lt;conf name=&quot;oracle-war&quot; description=&quot;Runtime dependencies for deploying to an Oracle container.&quot; /&gt;
      &lt;conf name=&quot;compile&quot; extends=&quot;oracle-war&quot; visibility=&quot;private&quot; description=&quot;Additional compile time dependencies required to build the application.&quot; /&gt;
   ...
   &lt;/configurations&gt;<br><br>   &lt;dependencies&gt;
      &lt;dependency org=&quot;org.springframework&quot; name=&quot;spring-webmvc&quot; rev=&quot;2.5.6&quot; conf=&quot;oracle-war-&gt;default,sources&quot; /&gt;
...
</code></pre><br><br>Notes:
<ul>
	<li>We first define some custom configurations (scopes), including <em>oracle-war</em></li>
	<li>Next we define a dependency belonging into the configuration <em>oracle-war</em> and map it to the target configurations <em>default</em> and <em>sources</em>, i.e. we depend on anything which is published either in the default configuration (-&gt; spring-webmvc-2.5.6.jar) or in the sources configuration (-&gt; spring-webmvc-2.5.6-sources.jar)</li>
	<li>Notice that we could use <a href="https://ant.apache.org/ivy/history/2.2.0/ivyfile/configurations.html">configurations' attributes</a> <em>defaultconf</em> (e.g. ="oracle-war") and <em>defaultconfmapping</em> (e.g. ="*-&gt;default,sources") to avoid unnecessary duplication in the file</li>
</ul>
<h2>Retrieving sources or binaries with Ant</h2>
To retrieve only the binary dependencies and put them inside the lib/ folder (notice type="jar") with <a href="https://ant.apache.org/ivy/history/2.2.0/use/retrieve.html">ivy:retrieve</a>:<br><br><pre><code>
&lt;!-- build.xml --&gt;
	&lt;target name=&quot;ivy-get-binaries&quot;&gt;
		&lt;ivy:settings file=&quot;ivysettings.xml&quot; /&gt;
		&lt;ivy:retrieve pattern=&quot;lib/[artifact].[ext]&quot; type=&quot;jar&quot; /&gt;
	&lt;/target&gt;
</code></pre><br><br>To retrieve source codes of the dependencies and put them inside the libsources/ folder:<br><br><pre><code>
&lt;!-- build.xml --&gt;
    &lt;target name=&quot;ivy-get-sources&quot; description=&quot;Fetch JARs with source codes for libraries that have them&quot;&gt;
        &lt;ivy:settings file=&quot;ivysettings.xml&quot; /&gt;
        &lt;ivy:retrieve pattern=&quot;libsources/[artifact]-[type].[ext]&quot; type=&quot;source&quot; /&gt;
    &lt;/target&gt;
</code></pre><br><br>To verify that some artifacts have been found, the resolution report in the log is useless for it sums all types of artifacts (i.e. binary and source ones) together. You have to check the last line, which shows count only for the artifacts of the requested type:
<pre>[ivy:retrieve]     0 artifacts copied, 4 already retrieved (0kB/170ms)</pre>
<h2>Limitations</h2>
<h3>Ivy ignores some source attachements</h3>
Ivy sometimes ignores source artifacts, e.g. in the case of org.springframework:spring-webmvc:2.5.6 - when you check the Ivy-generated .ivy2/cache/org.springframework/spring-webmvc/ivy-2.5.6.xml, you will see that the publications section only lists ...type="jar" conf="master" even though <a href="https://repo1.maven.org/maven2/org/springframework/spring-webmvc/2.5.6/spring-webmvc-2.5.6-sources.jar">spring-webmvc-2.5.6-sources.jar</a> certainly exists - I suppose that this is due to the MD5 checksum of the file being incorrect.
<h3>Ivy can't fetch attachements for transitive dependencies</h3>
I don't know any way how to force Ivy to retrieve source/javadoc attachements for transitive dependencies. The problem is that the dependencies always depend only on other binaries, never on sources/javadocs so Ivy has no reason to download those.
<h2>Additional Notes</h2>
The Eclipse Ivy plugin <a href="https://ant.apache.org/ivy/ivyde/">IvyDE</a> does <a href="https://www.mail-archive.com/ivy-user@incubator.apache.org/msg00104.html">download sources/javadocs automatically</a>.
<h2>References</h2>
<a href="https://ant.apache.org/ivy/history/latest-milestone/concept.html">Documentation of the Ivy pattern syntax</a> , description of <a href="https://ant.apache.org/ivy/history/latest-milestone/ivyfile/dependency.html">how to define configuration mappings</a> (I've always troubles finding these).
++++
