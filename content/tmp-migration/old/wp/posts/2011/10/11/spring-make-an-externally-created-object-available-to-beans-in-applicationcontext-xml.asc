{:title
 "Spring: Make an Externally Created Object Available to Beans in applicationContext.xml",
 :date "2011-10-11",
 :layout :post,
 :tags ["java" "library"],
 :tags-orig ["java" "spring"],
 :categories ["Languages"],
 :extra-css #{}
}

++++
If your Spring beans need access to an object that is not created by Spring itself, you can "inject" it into the context by using a static parent context and registering the object with it. Beans can then reference it just as if it was defined in the application context file.
<h2>Java: Configure ApplicationContext with an Injected Bean</h2>
<pre><code>
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;
import org.springframework.context.support.GenericApplicationContext;
import org.springframework.context.support.StaticApplicationContext;<br><br>Object externalyDefinedBean = ...;
GenericApplicationContext parentContext = new StaticApplicationContext();
parentContext.getBeanFactory().registerSingleton(&quot;injectedBean&quot;, externalyDefinedBean);
parentContext.refresh();   // seems to be required sometimes<br><br>ApplicationContext context = new FileSystemXmlApplicationContext(springConfigs, parentContext);
</code></pre>
<h2>Xml: Make Use of It</h2>
<pre><code>
&lt;bean id=&quot;springBean&quot; class=&quot;your.SpringBeanType&quot;&gt;
   &lt;!-- Note: The injectedBean is defined outside of Spring config --&gt;
   &lt;property name=&quot;someProperty&quot; ref=&quot;injectedBean&quot; /&gt;
&lt;/bean&gt;
</code></pre><br><br>Voila!
++++
