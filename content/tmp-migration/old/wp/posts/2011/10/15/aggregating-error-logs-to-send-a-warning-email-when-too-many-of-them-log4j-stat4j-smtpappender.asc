{:title
 "Aggregating Error Logs to Send a Warning Email When Too Many of Them - Log4j, Stat4j, SMTPAppender",
 :date "2011-10-15",
 :layout :post,
 :tags ["monitoring" "DevOps"],
 :tags-orig ["log4j" "logging" "monitoring" "ops"],
 :categories ["j2ee" "Tools"],
 :extra-css #{}
}

++++
Our development team wanted to get notified as soon as something goes wrong in our production system, a critical Java web application serving thousands of customers daily. The idea was to let it send us an email when there are too many errors, indicating usually a problem with a database, an external web service, or something really bad with the application itself. In this post I want to present a simple solution we have implemented using a custom Log4J Appender based on Stats4j and an SMTPAppender (which is more difficult to configure and troubleshoot than you might expect) and in the following post I explore <a href="/2011/10/17/monitoring-java-webapp-with-hyperic-hq-send-email-when-too-many-errors-in-logs/">how to achieve the same effect with the open-source Hyperic HQ</a> monitoring SW.<br><br><!--more-->
<h2>The Challenge</h2>
We faced the following challenges with the logs:
<ul>
	<li>It's unfortunately normal to have certain number of exceptions (customers select search criteria yielding no results, temporary, unimportant outages of external services etc.) and we certainly don't want to be spammed because of that. So the solution must have a configurable threshold and only send an alert when it is exceeded.</li>
	<li>The failure rate should be computed for a configurable period (long enough not to trigger an alert because of few-minutes outages yet short enough for the team to be informed ASAP when something serious happens).</li>
	<li>Once an alert is send, no further alerts should be send again for some time (ideally until the original problem is fixed), we don't want to be spammed because of a problem we already know about.</li>
</ul>
<h2>The Solution</h2>
We've based our solution on Lara D'Abreo's <a href="https://sourceforge.net/projects/stat4j/">Stat4J</a>, which provides a custom Log4J appender that uses the logs to compute configurable measures and triggers alerts when they exceed their warning or critical thresholds. It is couple of years old, alpha-quality (regarding its generality and flexibility) open-source library, which is fortunately simple enough to be modified easily for one's needs.<br><br>So we have tweaked Stat4J to produce alerts when the number of alerts exceeds thresholds and keep quiet thereafter and combined that with a Log4J SMTPAppender that listens for the alerts and sends them via e-mail to the team.
<h3>Stat4J Tweaking</h3>
The key components of Stat4J are the Stat4jAppender for Log4J itself, calculators (measures) that aggregate the individual logs (e.g. by counting them or extracting some number form them), statistics that define which logs to consider via regular expressions and how to process them by referencing a calculator, and finally alerts that log a warning when the value of a statistics exceeds its limits. You can learn more in an <a href="https://www.devx.com/java/Article/22110/0/page/3">article that introduces Stat4J</a>.<br><br>We have implemented a custom measure calculator, <a href="https://github.com/holyjak/blog/blob/master/stat4j/src/net/sourceforge/stat4j/calculators/RunningRate.java">RunningRate</a> (to count the number of failures in the last N minutes) and modified Stat4J as  follows:
<ul>
	<li>We've <a href="https://github.com/holyjak/blog/blob/master/stat4j/src/net/sourceforge/stat4j/Alert.java#L124">enhanced Alert</a> to support a new attribute, <em>quietperiod</em>, so that once triggered, subsequent alerts will be ignored for that duration (unless the previous alert was just a warning while the new one is a critical one)</li>
	<li>We've modified the appender to <a href="https://github.com/holyjak/blog/blob/master/stat4j/src/net/sourceforge/stat4j/log4j/Stat4jAppender.java#L53">include the log's Throwable</a> together with the log message, which is then passed to the individual statistics calcualtors, so that we could filter more precisely what we want to count</li>
	<li>Finally we've modified Alert to <a href="https://github.com/holyjak/blog/blob/master/stat4j/src/net/sourceforge/stat4j/Alert.java#L92">log alerts as errors</a> instead of warnings so that  the SMTPAppender wouldn't ignore them</li>
</ul>
<a href="https://github.com/holyjak/blog/tree/master/stat4j">Get our modified Stat4j from GitHub</a> (sources or a <a href="https://github.com/holyjak/blog/downloads">compiled jar</a>). Disclaimer: It is one day's hack and I'm not proud of the code.
<h4>Stat4J Configuration</h4>
Take the <a href="https://github.com/holyjak/blog/blob/master/stat4j/test/stat4j.properties">example stat4j.properties</a> and put it on the classpath. It is already configured with the correct calculator, statistics, and alert. See this part:<br><br><pre><code>
...
### JAKUB HOLY - MY CONFIG
calculator.minuteRate.classname=net.sourceforge.stat4j.calculators.RunningRate
# Period is in [ms] 1000 * 60 * 10 = 10 min:
calculator.minuteRate.period=600000<br><br>statistic.RunningErrorRate.description=Errors per 10 minutes
statistic.RunningErrorRate.calculator=minuteRate
# Regular expression to match &quot;&lt;throwable.toString&gt; &lt;- &lt;original log message&gt;&quot;
statistic.RunningErrorRate.first.match=.*Exception.*<br><br># Error Rate
alert.TooManyErrorsRecently.description=Too many errors in the log
alert.TooManyErrorsRecently.statistic=RunningErrorRate
alert.TooManyErrorsRecently.warn= &gt;=3
alert.TooManyErrorsRecently.critical= &gt;=10
alert.TooManyErrorsRecently.category=alerts
# Ignore following warnings (or criticals, after the first critical) for the given amount of time:
# 1000 * 60 * 100 = 100 min
alert.TooManyErrorsRecently.quietperiod=6000000
</code></pre><br><br>The important config params are
<ul>
	<li><em>calculator.minuteRate.period</em> (in ms) - count errors over this period, reset the count at its end; a reasonable value may be 10 minutes</li>
	<li><em>alert.TooManyErrorsRecently.warn</em> and <em>.critical</em> - trigger the alert when so many errors in the period has been encountered; reasonable values depend on your application's normal error rate</li>
	<li><em>alert.TooManyErrorsRecently.quietperiod</em> (in ms) - don't send further alerts for this period not to spam in a persistent failure situation; the reasonable value depends on how quickly you usually fix problems, 1 hour would seem OK to me</li>
	<li>Notice that <em>statistic.RunningErrorRate.first.match</em> is a regular expression defining which logs to count; ".*" would include any log, "your\.package\..*Exception" any exception in the package and so on, you can even specify logs to exclude using a <a href="https://download.oracle.com/javase/1,5.0/docs/api/java/util/regex/Pattern.html#special">negative lookahead</a> (<a name="sum"></a><tt>(?!</tt><em>X</em><tt>))</tt></li>
</ul>
<h3>Log4J Configuration</h3>
Now we need to tell Log4J to use the Stat4j appender to count error occurences and to send alerts via email:<br><br><pre><code>
log4j.rootCategory=DEBUG, Console, FileAppender, Stat4jAppender
...
### Stat4jAppender &amp; EmailAlertsAppender ###
# Collects statistics about logs and sends alerts when there
# were too many failures in cooperation with the EmailAlertsAppender<br><br>## Stat4jAppender
log4j.appender.Stat4jAppender=net.sourceforge.stat4j.log4j.Stat4jAppender
log4j.appender.Stat4jAppender.Threshold=ERROR
# For configuration see stat4j.properties<br><br>## EmailAlertsAppender
# BEWARE: SMTPAppender ignores its Thresholds and only evers sends ERROR or higher messages
log4j.category.alerts=ERROR, EmailAlertsAppender
log4j.appender.EmailAlertsAppender=org.apache.log4j.net.SMTPAppender
log4j.appender.EmailAlertsAppender.To=dummy@example.com
# BEWARE: The address below must have a valid domain or some receivers will reject it (e.g. GMail)
log4j.appender.EmailAlertsAppender.From=noreply-stat4j@google.no
log4j.appender.EmailAlertsAppender.SMTPHost=172.20.20.70
log4j.appender.EmailAlertsAppender.BufferSize=1
log4j.appender.EmailAlertsAppender.Subject=[Stat4j] Too many exceptions in log
log4j.appender.EmailAlertsAppender.layout=org.apache.log4j.PatternLayout
log4j.appender.EmailAlertsAppender.layout.ConversionPattern=%d{ISO8601} %-5p %X{clientIdentifier} %c %x - %m%n
</code></pre><br><br>Comments
<ul>
	<li>#8 Specify the Stat4J appender</li>
	<li>#9 Only send ERRORs to Stat4J, we are not interested in less serious exceptions</li>
	<li>#14 "alerts" is the log category used by Stat4jAppender to log alerts (the same you would create via Logger.getLogger("alerts")); as mentioned, SMTPAppender will without respect to the configuration only process ERRORs and higher</li>
</ul>
<h4>Issues with the SMTPAppender</h4>
It is quite tricky to get the SMTPAppender working. Some pitfall:
<ul>
	<li>SMTPAppender<em> ignores all logs that are not ERROR or higher without respect to how you set its threshold</em></li>
	<li>If you specify a non-existing From domain then some recipient's mail servers can just delete the email as spam (e.g. GMail)</li>
	<li>To send emails, you of course need mail.jar (and for older JVMs also activation.jar), here are <a href="https://haveacafe.wordpress.com/2008/09/26/113/">instructions for Tomcat</a></li>
</ul>
And one $100 tip: to debug it, run your application in the debug mode and set a method breakpoint on javax.mail.Transport#send (you don't need the source code) and when there, set <em>this.session.debug</em> to true to get a very detailed log of the following SMTP communication in the server log.
<h2>Sidenote</h2>
The fact that this article is based on Log4J doesn't mean I'd personally choose it, it just came with the project. I'd at least consider using the newer and shiny <a href="https://logback.qos.ch/">Logback</a> instead :-).
<h2>Conclusion</h2>
Stat4j + SMTPAppender are a very good base for a rather flexible do-it-yourself alerting system based on logs and e-mail. You can achieve the same thing out-out-the-box with Hyperic HQ plus much much more (provided that you get your admins to open two ports for it), which I will describe in the next blog post.
<h2>Links</h2>
<ul>
	<li>An alternative for preventing the SMTPAppender from spamming in persisten failure situations (aside of its built-in buffer size): <a href="https://github.com/reaktor/log4j-email-throttle">log4j-email-throttle</a></li>
	<li><a href="https://www.mail-archive.com/log4j-user@logging.apache.org/msg12130.html">EventConsolidatingAppender - announced via mailing list</a> in 2/2011 - "the
purpose of this appender is to consolidate multiple events that are received
by a single logger within a specified number of seconds into a single event;
this single consolidated event is then forwarded to a 'downstream' appender"</li>
</ul>
++++
