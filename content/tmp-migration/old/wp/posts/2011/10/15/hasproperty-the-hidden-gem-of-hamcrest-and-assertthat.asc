{:title "hasProperty, the Hidden Gem of Hamcrest (and assertThat)",
 :date "2011-10-15",
 :layout :post,
 :tags ["testing" "java"],
 :tags-orig ["hamcrest" "java" "junit"],
 :categories ["Languages" "Testing"],
 :extra-css #{}
}

++++
If you got used to JUnit 4's <code>assertThat</code> with various matchers (of course you will need junit-dep.jar and hamcrest.jar to get the full set instead of the small subset integrated in junit.jar), make sure you don't overlook the matcher hasProperty. It is very useful if you have non-trivial objects and cannot use some more flexible language like Groovy for your unit tests.<br><br>The advantage of <code>hasProperty</code> is that it allows you to check a particular property (or more properties with <code>allOf</code>) of an object while ignoring the others - pretty useful if the object has 20 properties and checking just one is enough for you. (Admittedly, an object with 20 properties is an abomination but hey, that's the real legacy word!)<br><br>Example - check that collection contains two Images with some file names:<br><br><pre><code>
assertThat(&quot;Expected images&quot;, (Iterable&lt;Object&gt;) hotel.getImages()
  , containsInAnyOrder(hasProperty(&quot;filename&quot;, is(&quot;radisson1.jpg&quot;))
     , hasProperty(&quot;filename&quot;, is(&quot;radisson2.jpg&quot;))));
</code></pre><br><br>The failure message in this case isn't as clear as I might wish but still this is the best solution I can think of.<br><br>Related:
<ul>
	<li><a href="https://code.google.com/p/hamcrest/wiki/Tutorial">An overview of Hamcrest matchers</a></li>
	<li>Another <a href="https://weblogs.java.net/blog/johnsmart/archive/2008/04/on_the_subtle_u.html">blog about hasProperty</a> and all too common issues with generics in Hamcrest</li>
	<li><a href="https://github.com/alexruiz/fest-assert-2.x/wiki/Tips-and-tricks#wiki-extracted-properties-assertion">Fest-Assert's extractProperty</a></li>
</ul>
++++
