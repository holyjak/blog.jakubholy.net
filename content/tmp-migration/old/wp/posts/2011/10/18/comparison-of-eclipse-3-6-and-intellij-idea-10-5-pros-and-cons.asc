{:title
 "Comparison of Eclipse 3.6 and IntelliJ IDEA 10.5: Pros and Cons",
 :date "2011-10-18",
 :layout :post,
 :tags ["java"],
 :tags-orig ["intellij" "java"],
 :categories ["eclipse" "Languages" "Tools"],
 :extra-css #{}
}

++++
After having worked with Eclipse for over 5 years I've came to use IntelliJ IDEA intensively on a J2EE project in three months and took this as an opportunity to compare the two. You can't really compare 5 years and 3 months but I still believe that it is long enough to get a pretty good overview of what a tool is like.<br><br><em>For the impatient:</em><br><br>IntelliJ is a very good tool, its killing feature for me is its excellent support for other languages such as Groovy (e.g. <a title="Blog: Only a Masochist Would Write Unit Tests in Java. Be Smarter, Use Groovy (or Scala…)" href="/2011/10/18/only-a-masochist-would-write-unit-tests-in-java-be-smarter-use-groovy-or-jruby-or-st-else-similar/">for unit tests</a>) and Clojure. Many details are more worked-out and with a higher usability then in Eclipse, f.ex. search &amp; replace with <a title="Search &amp; replace screenshot and docs" href="https://blogs.jetbrains.com/idea/2011/04/in-place-replace-in-intellij-idea-105/">match highlighting and replacement preview</a>. Its support for navigability and refactoring across multiple languages (Java, JSP, JSF, HQL, Spring config in my case) is also an absolutely great feature for productivity. And of course I have to add it credits for being a Czech product [<a href="https://en.wikipedia.org/wiki/JetBrains">1</a>] (interestingly enough, NetBeans also comes from the Czech Republic [<a href="https://en.wikipedia.org/wiki/Netbeans#History_2">2</a>]; it's a pity Eclipse hasn't this link too) :-).<br><br>My main issue with IntelliJ is its performance. First, running tests is slow because IntelliJ only does (re)compile the test/source when you hit the run button as opposed to Eclipse' incremental compilation. And that makes TDD very painful. (I tried to use the old Eclipse Mode plugin but it <a href="https://plugins.intellij.net/plugin/?id=3822">has problems</a> with IntelliJ 9/10.) Second, sometimes the UI freezes* and you have to wait seconds or tens of seconds for it to respond again (even after disabling most plugins and some analysis). It doesn't happen too often but often enough to be noticed, to be annoying, and to interrupt the development flow.<br><br>*) Update: <a href="https://devnet.jetbrains.net/docs/DOC-197#comment-1092">UI freezes may be a specific issue of Mac 64b 1.6 JDK</a><br><br>So I guess I'll use either Eclipse or IntelliJ with respect to the needs of the project at hand and hope for IntelliJ to resolve its performance issues (as NetBeans did).<!--more-->
<h2>What's Cool in IntelliJ IDEA</h2>
The things I've stumbled upon and considered them noteworthy (there are certainly more of such goodies):
<ul>
	<li>Great support for Groovy and Clojure (and others). I've used Groovy to write unit tests for my Java project and it worked pretty well (only click + Alt+Enter on a non-existing method to  create it didn't work unless the target class was a nested (static) class in the test itself)</li>
	<li>Out-of-the-box support for Spring*, namely you can click a bean class name in the applicationContext.xml to jump to it, deprecated classes are struck out, bean definitions are validated against available constructors and setters</li>
	<li>Refactoring
<ul>
	<li><em>Move</em> can move more members/methods at once</li>
	<li><em>Move method</em> is aware of the current class' field of the target type so it is able to automatically insert fieldOfTargetType.movedMethod() - st- I miss a lot in Eclipse</li>
	<li><em>Rename</em> takes care also of JSF EL expressions in JSPs and other non-Java references (I suppose it is more clever than just a simple text search &amp; replace)</li>
</ul>
</li>
	<li>Completion proposals are displayed as you type (without pressing a hotkey - I love that) AND they include types that haven't been imported yet (@BeforeClass in a test...)</li>
	<li>(Auto)Completion proposals over multiple languages
<ul>
	<li>CSS classes in JSPs (and in CSS/style it proposes e.g. color names)</li>
</ul>
</li>
	<li>Click-through in JSF EL expressions (well, at least sometimes)</li>
	<li>Usage search can find also method usages in JSPs, Spring config etc.</li>
	<li>Debugging
<ul>
	<li>The Variables window automatically shows not only the local variables but also expressions based on them that are used in the code such as "array_variable.length"- a good time saver</li>
</ul>
</li>
	<li>JavaDoc: Closing tag completion - I've always missed that so much in Eclipse!</li>
	<li>When you generate a foreach loop ("itco" + tab) and change the source collection then it updates the element type automatically (in "for (Type t: sourceColl)")</li>
	<li>Really helpful RegExp integration in find &amp; replace in file - when typing, it shows both the first matched expression and what it will be replaced with</li>
	<li>General: Good at guessing resonable names for variables, ...</li>
	<li>Possibility to define a module for a subdirectory of the main module =&gt; you may have a project using Java 1.4 with tests in Java 5+. Works great with Maven multi-module projects too.</li>
	<li>The Project view displays directly Java types so you can distinguish a class from an interface at the first glance (Eclipse shows a file icon and you need to expand it first)</li>
	<li>The Java file structure view can show a "property" instead of a getter and a setter, making it shortet and easier to find what's really important</li>
</ul>
*) The Ultimate edition only (likely)<br><br>I'd recommend reading also the responses to the StackOverflow question <a href="https://stackoverflow.com/questions/239732/things-possible-in-intellij-that-arent-possible-in-eclipse">Things possible in IntelliJ that aren't possible in Eclipse?</a> - among others they mention click-through anything, autocomplete taking into account more of the context (e.g. the name of the variable), the rename method refactoring updating also JSPs, Spring config, etc..<br><br>In general I'd say that IntelliJ has strong focus on usability and productivity, tries to understand what developers usually do and need and helps them with that and is pretty good at it. The authors claim it to be "The Most Intelligent Java IDE" and I think they do not exaggerate (or at least not too much :-)).
<h2>Not So Cool</h2>
(In no particular order.)
<ul>
	<li>Eclipse only needs two hotkeys: Completion (^space) for class/property/templates/surround-with and Quick Fix (^1 - the <a href="/wiki/tools/eclipse/">most powerful tool</a> in E.) for fixes such as imports, refactorings etc. In II you've several hotkeys for completion, one for live templates, one for fixes (intentions) ... - I've never managed to remember them all and to decide which one I should use in a particular situation</li>
	<li>No JavaDoc popup on mouse over (need ^J)</li>
	<li>The Live Template editor sucks, at least under Mac (can't type end-of-line, a curly bracket on Norwegian keyboard with Alt+Shift+8, backspace, ...). Fortunately you can select a code in an editor and Tools | Save as Live Template (though you should likely un-indent it first)</li>
	<li>No favorite static imports - for the first static method of a particular class I have to: 1) write the start of the method name; 2) press Ctrl+Alt+Space (Class name completion, don't ask me why this); 3) select the desired method such as CoreMatchers.allOf and press Alt+Enter as suggested in the pop-up's "status bar" -&gt; select Import statically. Since that on, all the static methods of the class will appear in the normal Ctrl+Space completion list (that's nice, though). In Eclipse I can add my belowed JUnit/Hamcrest/Mockito friends to favorite imports and have them always available.</li>
	<li>Slowness</li>
<ul>
	<li>Slow testing - changed files are compiled just before a test is run while in Eclipse they have been compiled as soon as they were saved</li>
	<li>Sometimes II freezes for seconds/10s of seconds :'(
Update: <a href="https://devnet.jetbrains.net/docs/DOC-197#comment-1092">UI freezes may be a specific issue of Mac 64b 1.6 JDK</a></li>
	<li>Running analysis is SLOW (Checkstyle, ...) and can kill your IDE (and you too if you're of a weaker heart)</li>
</ul>
	<li>The UI is little buggy, at least on Mac - dialogs not hidden when you click on another menu - not a big issue but annoying anyway</li>
	<li>Running webapp on Tomcat works great for some colleagues but not all  - useless logging without any details, the server doesn't start, no hints for how to solve, the Server -&gt; Output window contains confusing "Disconnected from server", Tomcat Log window contains only INFO logs (where are my debug logs?!), the file logs/catalina.out doesn't exist anymore, Tomcat failure visible in browser yet nothing in the logs ...</li>
	<li>JavaDoc - '#method' + ^space in Eclipse generates {@link #method} automatically, not so in II; even worse, class lookup doesn't work at all in II w/ot typing a @link first. I've found a <a href="https://michi.ist.inspirationslos.de/lang/en/2010/01/26/adding-javadoc-links-in-intellij-idea-with-live-templates/">workaround via a live template</a> but I have to type its name and invoke it manually anyway.</li>
	<li>I miss Eclipse' auto-dissapearing views (just click anywhere in the editor and they'll disappear - though in II you can use Shift+Esc and if you un-pin a view then clicking in&amp;out of it will hide it) and the ability to maximize any view with double-click</li>
	<li>The number of plugins for IntelliJ is smaller than for Eclipse though all the main projects likely target it too</li>
</ul>
I could perhaps live with the small annoyances (or may be learn the proper way to do what I'm trying to achieve?) but the performance issues are hard to accept.
<h2>Useful Resources</h2>
<ul>
	<li><a href="https://www.jetbrains.com/idea/documentation/intentions.jsp">II docs: Intentions</a></li>
	<li><a href="https://www.jetbrains.com/idea/features/code_assistance.html">II docs: Code assistance</a> - overview of the different features for code completion etc.</li>
	<li>StackOverflow: <a href="https://stackoverflow.com/questions/239732/things-possible-in-intellij-that-arent-possible-in-eclipse">Things possible in IntelliJ that aren't possible in Eclipse?</a></li>
	<li>StackOverflow: <a href="https://stackoverflow.com/questions/2524025/hidden-features-intellij-idea">Hidden Features IntelliJ IDEA</a></li>
	<li>StackOverflow: <a href="//stackoverflow.com/questions/4387134/intellij-static-import-completion%20">IntelliJ Static Import Completion</a></li>
</ul>
<h2>Conclusion</h2>
Read the first 4 paragraphs again :-)
<h2>The Software Compared</h2>
<ul>
	<li>Eclipse 3.6 - I've worked with Eclipse since 3.0 or may be even before on many commercial projects</li>
	<li>IntelliJ IDEA Ultimate (the commercial, full-featured edition; II community is good enough unless you need special support for frameworks like JavaEE, Spring, and Hibernate - see the <a href="https://www.jetbrains.com/idea/features/editions_comparison_matrix.html">editions comparison</a>)</li>
</ul>
++++
