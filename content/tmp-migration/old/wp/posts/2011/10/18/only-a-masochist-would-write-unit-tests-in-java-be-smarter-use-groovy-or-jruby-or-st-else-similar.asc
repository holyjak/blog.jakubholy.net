{:title
 "Only a Masochist Would Write Unit Tests in Java. Be Smarter, Use Groovy (or Scala...).",
 :date "2011-10-18",
 :layout :post,
 :tags ["testing" "opinion" "java" "groovy" "productivity"],
 :tags-orig ["groovy" "java" "opinion" "productivity" "Testing"],
 :categories ["Languages" "Testing"],
 :extra-css #{}
}

++++
<img title="A soothing image of a kitten" src="https://placekitten.com/g/200/300" alt="" width="200" height="300" /><br><br>I like writing unit tests but Java doesn't make it particularly easy. Especially if you need to create objects and object trees, transform objects for checking them etc. I miss a lot a conscise, powerful syntax, literals for regular expressions and collections, conscise, clojure-based methods for filtering and transforming collections, asserts providing more visibility into why they failed. But hey, who said I have to write tests in the same language as the production code?! I can use Groovy - with its syntax being <a href="https://groovy.codehaus.org/Differences+from+Java">~ 100%</a> Java + like thousand % more, optional usage of static/dynamic typing, closures, hundreds of utility methods <a href="https://groovy.codehaus.org/groovy-jdk/">added to the standard JDK classes</a> and so on. Groovy support for example in IntelliJ IDEA (autocompletion, refactoring ...) is very good so by using it you loose nothing and gain incredibly much. So I've decided that from now on I'll only use Groovy for unit tests. And so far my experience with it was overwhelmingly positive (though few things are little more complicated by the positives more than compensate for them). Read on to find out why you should try it too.<br><br>(<em>The arguments here focus on Groovy but I guess similar things could be said about JRuby, Scala etc. - with the exception of Java code compatibility, which you only get in Groovy.</em>)
<h2>Few examples</h2>
Some of the example below use some Groovy magic but don't be scared. You can write Groovy just as if it was Java and only learn and introduce its magic step by step as you need it.<br><br>Bean construction:<br><br><pre><code>
def testBean = new Customer(fname: &quot;Bob&quot;, sname: &quot;Newt&quot;, age: 42)
// Java: c = new Customer(); c.setFname(&quot;Bob&quot;); c.setSname(&quot;Newt&quot;); c.setAge(42);
</code></pre><br><br>(Of course this starts to pay of if either you don't want to create a constructor or if there are "many" properties and you need to set different subsets of them (constructor with 4+ arguments is hard to read).)<br><br>Reading a file:<br><br><pre><code>
assert test.method() == new File(&quot;expected.txt&quot;).getText()
// Java: buffered reader line by line ...; Note: == actually uses equals()
</code></pre><br><br>Checking the content of a collection/map:<br><br><pre><code>
assert customerFinder.findAll().collect {it.sname}.sort() == [&quot;Lizard&quot;,&quot;Newt&quot;]
// Java: too long to show here (extract only surnames, sort them, compare ...)
assert getCapitalsMap() == [&quot;UK&quot; : &quot;London&quot;, &quot;CR&quot; : &quot;Prague&quot;]
</code></pre><br><br>Regular expressions:<br><br><pre><code>
assert (&quot;dog1-and-dog2&quot; =~ /dog\d/).getAt([0,1]) == [&quot;dog1&quot;, &quot;dog2&quot;]
</code></pre>
<ul>
	<li>Or more fail-safe regexp:
<pre><code>
assert (&quot;dog1-and-dog2&quot; =~ /dog\d/).iterator().toSet() == [&quot;dog1&quot;, &quot;dog2&quot;].toSet()
</code></pre></li>
	<li>With a match group:
<pre><code>
assert (&quot;dog11-and-dog22&quot; =~ /dog(\d+)/).iterator().collect({it[1]}).toSet() == [&quot;11&quot;, &quot;22&quot;].toSet()
</code></pre></li>
</ul>
<!--more-->
<h2>What is Groovy?</h2>
<a href="https://groovy.codehaus.org/Differences+from+Java">Groovy</a> 1.8 is a mature scripting language for the JVM written as an extension of Java with optional dynamic typing, closures, and more. It's now developed by SpringSource, the company behind the Spring framework.<br><br>As mentioned, nearly all Java code is a valid Groovy code with basically one exception: To initialize an array you can't use { ... } (for that would be a closure), you must use [...] instead (notice that by default it actually creates a List, only when assigned to an array variable or casted to array will it produce an array). Make sure to check the few <a href="https://groovy.codehaus.org/Differences+from+Java">common gotchas</a> before you dive into using Groovy.<br><br>You can experiment with Groovy online in the <a href="https://groovyconsole.appspot.com/">GAE Groovy console</a>.
<h2>Groovy features especially beneficial for testing</h2>
General
<ul>
	<li>Dynamic typing at request =&gt; conscise, avoids code cluttered with casts</li>
</ul>
<a href="https://groovy.codehaus.org/groovy-jdk/java/util/Collection.html">Collections</a>: Closure-based methods like every, each, find<br><br><a href="https://groovy.codehaus.org/groovy-jdk/java/io/File.html">Files</a>: Read all the text with one call, withReader { .. } etc.<br><br>Testing/advanced:
<ul>
	<li><em>assert</em>- you can use the Java keyword assert instead of JUnit methods, upon failure Groovy will provide you with pretty good info of what went wrong:
<pre>Assertion failed: <br><br>assert config.getResolvers()) == ["h:dataTable" : resolver, "my:dt2" : null]
       |      |                |                  |
       |      |              false                |
       |      |                                   MyResolver@731d2572
       |      [h:dataTable:MyResolver@731d2572, my:dt2:MyResolver@731d2572]
       LocalVariableConfiguration@7e859a68</pre>
</li>
	<li>Here-docs: embed <a href="https://groovy.codehaus.org/Strings+and+GString">multi-line strings</a> easily in a test (also supports replacing references like $variable with values)</li>
	<li><a href="https://groovy.codehaus.org/Groovy+way+to+implement+interfaces">Implementing interfaces with a map</a> (map coercion)</li>
	<li><a href="https://groovy.codehaus.org/Developer+Testing+using+Maps+and+Expandos+instead+of+Mocks">Use expandos to define dynamic beans </a>(similarly to JavaScript, you instantiate an <a href="https://groovy.codehaus.org/api/index.html">Expando</a> and just add properties and closures as methods) - as described on the linked page, expandos and maps are usually enough to replace a mocking library</li>
	<li><a href="https://groovy.codehaus.org/Groovy+Mocks">Build-in mocking</a></li>
	<li>With Groovy you can of course alsoÂ use <a href="https://code.google.com/p/spock/">Spock</a>, the excellent specification &amp; testing framework</li>
</ul>
<h2>Complications</h2>
<ul>
	<li>Neither JUnitMax nor Infinitest (in IntelliJ) seem to support Groovy test cases</li>
	<li>You need a decent IDE such as IntelliJ IDEA</li>
	<li>If using Maven, you have to <a href="https://github.com/holyjak/static-jsfexpression-validator/blob/54802e77ac2225cf61664730e022ed261e73574c/pom.xml#L136">explicitely configure the GMaven plugin</a> (esp. with a newer Groovy version)</li>
	<li>IntelliJ 10.5: Click &amp; alt+enter on a non-existing method to create it only works if the target type is a nested class within the test, not if it is a standalone Java class (so I just create my class there and when done TDDing I extract it into a top-level Java class)</li>
</ul>
<h2>Conclusion</h2>
Groovy makes test writing much more productive and thus developers happy. I intend to use on all my open source projects and to try push it into our commercial projects too. You should give it a try too!
<h3>Addendum</h3>
I don't meen to say that you should start writing all your tests in Groovy (or Scala, JRuby, ..) right now and that whoever writes them in Java is a #!&amp;$ (insert a pejorative adjective of your choosing). If you are perfectly happy with Java, that's fine. If you don't like Groovy (Scala/JRuby/...) or have a negative experience with it, that's fine too. But if you feel after reading this that using Groovy/... might make you a more productive and happy developer then I humbly recommend that you try it and evaluate for yourself whether it is a positive change or not.<br><br>And yes, Kent Beck and Chuck Norris do write their tests in Java.<br><br>I apologize to all who feel irritated or offended by this post. That was not intended. Please eradicate it from your memory.
<h3>Warning</h3>
Unfortunately I have to say that despite all the benefits of Groovy I wouldn't recommand using it in Eclipse (3.7). The support there is very week, for example basic refactorings like creating a method/class used in the test but not really existing isn't supported. Contrary to that, IntelliJ is perfectly suitable for using Groovy. I haven't tried NetBeans.
<h2>Additional Links</h2>
<ul>
	<li><a href="https://www.docjar.com/docs/api/org/codehaus/groovy/runtime/DefaultGroovyMethods.html">DefaultGroovyMethods</a>.java (<a href="https://grepcode.com/file/repo1.maven.org/maven2/org.codehaus.groovy/groovy-all/1.8.2/org/codehaus/groovy/runtime/DefaultGroovyMethods.java">src</a>): defines the methods added to all objects</li>
	<li><a href="https://grepcode.com/file/repo1.maven.org/maven2/org.codehaus.groovy/groovy-all/1.8.2/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java#DefaultTypeTransformation">DefaultTypeTransformation</a>.java: methods used internally to convert between types and when using "as aType" - useful to know what <em>as</em> can convert</li>
</ul>
<div class="linkscent-iconblock" style="float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent !important;width:auto !important;height:auto !important;display:block !important;overflow:visible !important;position:static !important;text-indent:0 !important;z-index:auto !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:auto !important;top:auto !important;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;margin:0!important;padding:0!important;"><img class="linkscent-icon" style="float:none !important;border:0 solid #ff0000 !important;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:298px;top:123px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;background:url('http://groovy.codehaus.org/favicon.ico') no-repeat scroll center center transparent !important;opacity:0;margin:0;padding:0!important;" src="//interclue/content/cluecore/skins/default/pixel.gif" alt="" /><img class="linkscent-icon" style="float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:316px;top:123px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;opacity:0;margin:0;padding:0!important;" src="//interclue/content/cluecore/skins/default/pixel.gif" alt="" /></div>
++++
