{:title "Tips And Resources For Creating DSLs in Groovy",
 :date "2011-11-13",
 :layout :post,
 :tags ["java" "groovy"],
 :tags-orig ["dsl" "groovy" "java"],
 :categories ["General" "Languages"],
 :extra-css #{}
}

++++
Paul King had a very good <a href="https://vimeo.com/28763158">presentation</a> (last year's <a href="https://www.slideshare.net/paulk_asert/groovy-dsls-from-beginner-to-expert">slides</a>) at JavaZone about why to use <a href="https://martinfowler.com/bliki/DomainSpecificLanguage.html">Domain-Specific Languages</a> and how to create <a href="https://martinfowler.com/bliki/InternalDslStyle.html">internal DSLs</a> in Groovy. I'd like to list here few tips that he has mentioned but before we get to that, why would you want to create a DSL? Martin Fowler answers that in his <a href="https://www.amazon.com/Domain-Specific-Languages-Addison-Wesley-Signature-Fowler/dp/0321712943">Domain-Specific Languages book</a> (2010). Some of the reasons are to have a higher-level, more focused and conscise representation that also domain experts can read and perhaps even write. You  have certainly already used a DSL such as regular expressions, CSS, SQL, <a href="https://code.google.com/p/spock/">Spock</a>'s BDD tests, build instructions in <a href="https://www.gradle.org/tutorial_using_tasks">Gradle</a> - these are rather technical but sometimes DSLs are also created to be used by business users, f.ex. for anti-malaria drug resistance simulation. (Want <a href="https://www.warneronstine.com/2008/04/24/groovy-dsl-roundup/">more DSLs in Groovy</a>?).<br><br>Paul mentions one important thing - you can always make your DSL better, i.e. more fail-proof (case insensitive, support plural endings, ...) and secure and more like a natural language but it all comes at a cost and you must evaluate when the cost overweights the benefit (beware the 80:20 rule).<br><br>Some of the Groovy DSL implementation tips:
<!--more-->
<ul>
	<li>Add methods to any object/class via metaprogramming: &lt;class|instance&gt;.metaclass.&lt;method name or getProperty&gt; = {MyType param -&gt; ... } - you can use 'delegate' to refer to the instance</li>
<ul>
	<li>notice that <em>getProperty</em> is called for anything that isn't a method as in map['key'] == map.key - useful to implement e.g. 1.kg</li>
	<li>Call ExpandoMetaClass.enableGlobally() to propagate methods added to Number also to Integer etc.</li>
</ul>
	<li>Use a GroovyShell and a custom Binding subclass overriding getVariable(String symbol) so as to return/create an object for unknown "variables" (ex.: "newOrder" -&gt; new Order(), creation of vars for symbols like "h", "km" etc. =&gt; 24.km/h)</li>
	<li>Operator overloading: methods of specific names are invoked for operators (/ -&gt; div, * -&gt; multiply etc.)</li>
	<li>Use a closure setting its delegate and configuring it the cosure's resolve strategy to delegate unknown methods further to the delegate</li>
	<li>Create a custom Closure subclass and use that for a closure instead of the default one</li>
	<li>Use Groovy's Categories (st. like a temporary mixin, activated via the use(category) { .. } form) to add localy methods to classes</li>
	<li>Use Groovy Builders for tree-like DSLs (builder &lt;-&gt; method calls that take a Closure as argument)</li>
	<li>Use map attributes to get st. resembling named atributes</li>
	<li>Use GroovyShell with a custom classloader and compilation phase something to prevent calls of other static and instance methods than allowed</li>
</ul>
<h2>Resources</h2>
<ul>
	<li>Book <a href="https://www.packtpub.com/groovy-for-domain-specific-languages-dsl/book">Groovy for Domain-Specific Languages</a> (a <a href="https://blogs.bytecode.com.au/glen/2010/08/18/book-review-groovy-for-domain-specific-languages.html">review</a>) - I hope I'll get a chance to read this one</li>
	<li>M. Fowler's <a href="https://www.amazon.com/Domain-Specific-Languages-Addison-Wesley-Signature-Fowler/dp/0321712943">Domain-Specific Languages</a> book</li>
	<li>Groovy<a href="https://groovy.codehaus.org/Writing+Domain-Specific+Languages"> wiki: Writing Domain-Specific Languages</a></li>
	<li>DZone: <a href="https://groovy.dzone.com/news/domain-specific-language-unit-">Unit-specific DSL using JScience</a>, using Groovy</li>
	<li>M. Fowler's <a href="https://martinfowler.com/dslCatalog/">DSL Patterns Catalog</a></li>
</ul>
PS: The latest release of Groovy in Action should also contain a chapter on DSLs.
++++
