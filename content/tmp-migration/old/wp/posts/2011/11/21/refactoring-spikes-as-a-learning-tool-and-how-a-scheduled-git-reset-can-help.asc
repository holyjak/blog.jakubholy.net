{:title
 "Refactoring Spikes as a Learning Tool and How a Scheduled Git Reset Can Help",
 :date "2011-11-21",
 :layout :post,
 :tags ["learning" "legacy" "methodology" "refactoring"],
 :tags-orig ["agile" "exercise" "learning" "legacy" "refactoring"],
 :categories ["General"],
 :extra-css #{}
}

++++
To learn how complex your code base really is and how much effort a particular refactoring might require compared to the initial expectations, follow these steps:
<ol>
	<li>Schedule <kbd>git reset --hard; git clean -fd</kbd> to run in 1 hour (e.g. via cron)</li>
	<li>Do the refactoring</li>
	<li>"<em>WT*?! All my changes disappeared?!</em>" - this experience indicates the end of the refactoring :-)</li>
	<li>Go for a walk or something and think about what you have learned about the code, its complexity, the refactoring</li>
	<li>Repeat regularly, f. ex. once every week or two - thus you'll improve your ability to direct the refactoring so that you learn as much as possible during the short time</li>
</ol>
<!--more-->The exercise has been recommended by Kent Beck, I've just added the scheduled reset because my discipline is not strong enough to resist the likely urge to continue "just little further" and to keep the code if it looks any good. (If I become absorbed in the refactoring so much that I'll forget to stop on time then I'll surely also forget about the reset and thus the tendency to just cancel it won't stand a chance.)<br><br>Notice that if you do any larger-scale refactoring, it might be pretty wise to apply the <a href="https://mikadomethod.wordpress.com/">Mikado method</a> to help you keep track of where you are going and where you are while also keeping your buildable.<br><br>When I get to try this out I might write about my experiences here as well.
++++
