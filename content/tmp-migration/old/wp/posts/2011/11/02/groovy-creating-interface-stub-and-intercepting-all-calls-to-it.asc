{:title
 "Groovy: Creating an Interface Stub and Intercepting All Calls to It",
 :date "2011-11-02",
 :layout :post,
 :tags ["testing" "java" "groovy"],
 :tags-orig ["groovy" "java" "Testing"],
 :categories ["Languages" "Testing"],
 :extra-css #{}
}

++++
It's sometimes useful for unit testing to be able to create a simple no-op stub of an interface the class under test depends upon and to intercept all calls to the stub, for example to remember all the calls and parameters so that you can later verify that they've been invoked as expected. Often you'd use something like Mockito and its verify method but if you're writing <a title="Only a Masochist Would Write Unit Tests in Java. Be Smarter, Use Groovy (or Scala…)." href="/2011/10/18/only-a-masochist-would-write-unit-tests-in-java-be-smarter-use-groovy-or-jruby-or-st-else-similar/">unit tests in Groovy as I recommend</a> then there is a simpler and in a way a more powerful alternative.<!--more-->
<h2>Solution 1 - When Calling the Stub From a Groovy Object</h2>
<pre><code>
@Before
public void setUp() {
   this.collectedCalls = []
   // The following works when a method on the listener is called from Groovy but not from Java:
   this.listener = {} as PageNodeListener
   listener.metaClass.invokeMethod = { name, args -&gt;
      collectedCalls &lt;&lt; new Call(method: name, args: args) // Call is a simple structure class
   }
}<br><br>@Test
public void listener_stub_should_report_all_calls_to_it() throws Exception {
   listener.fileEntered(&quot;fileName.dummy&quot;)
   assert collectedCalls.find { it.equals(new Call(method: &quot;fileEntered&quot;, args: [&quot;fileName.dummy&quot;]))}
}
</code></pre><br><br>Notes:
<ul>
	<li>5: <code>{} as PageNodeListener</code> uses Groovy's <a title="Groovy: Closure coercion" href="https://groovy.codehaus.org/Groovy+way+to+implement+interfaces">closure coercion</a> - basically it creates an implementation of the interface which uses the (empty) closure whenever any method is called (we could capture its arguments but not the method name via <code>{Object[] args -&gt; /*...*/} as PageNodeListener</code>)</li>
	<li>6-7: We then specify an interceptor method that should be invoked whenever any method is called on the instance</li>
	<li><a href="/2011/11/02/groovy-use-canonical-to-get-compiler-generated-equals-hashcode-and-tostring/">Groovy makes it very easy to create beans like Call with equals, toString etc.</a></li>
</ul>
Beware that using a coerced closure as an interface implementation works only for methods that are either void or can return null (which is the return value of an empty closure, when invoked). Other methods will throw an NPE:<br><br><pre><code>
def list = {} as java.util.List
list.clear()    // OK, void
list.get(0)     // OK, returns null
list.isEmpty()  // NullPointerException at $Proxy4.isEmpty
</code></pre><br><br>Alternatively, you may use <a href="https://docs.codehaus.org/display/GROOVY/Using+MockFor+and+StubFor">Groovy's built-in mocking with MockFor and StubFor</a> (from the groovy.mock.interceptor package). The caller of the mock/stub must be in Groovy.
<h2>Solution 2 - When Calling the Stub From a Java Object</h2>
The solution 1 is small and elegant but for me it hasn't worked when the stub was invoked by a Java object (a clarification of why that happened would be welcome). Fortunately Christoph Metzendorf proposed <a href="https://stackoverflow.com/questions/1765469/dynamically-implement-interface-in-groovy-using-invokemethod/1766824#1766824">a solution at StackOverflow</a> (adjusted):<br><br><pre><code>
@Before
public void setUp() {
   this.collectedCalls = []
   PageNodeListener listener = createListenerLoggingCallsInto(collectedCalls)
   this.parser = new MyFaces21ValidatingFaceletsParser(TEST_WEBROOT, listener)
}<br><br>def createListenerLoggingCallsInto(collectedCalls) {
   def map = [:]<br><br>   PageNodeListener.class.methods.each() { method -&gt;
      map.&quot;$method.name&quot; = { Object[] args -&gt;
         collectedCalls &lt;&lt; new Call(method.name, args)
      }
   }<br><br>   return map.asType(PageNodeListener.class)
}<br><br>@Test
public void should_notify_about_file_entered() throws Exception {
   parser.validateExpressionsInView(toUrl(&quot;empty.xhtml&quot;), &quot;/empty.xhtml&quot;)
   assert collectedCalls.find { it.equals(new Call(method: &quot;fileEntered&quot;, args: [&quot;/empty.xhtml&quot;]))}
}
</code></pre><br><br>Notes:
<ul>
	<li>12-13: We create a map containing {method name} -&gt; {closure} for each of the interface's method</li>
	<li>17: The <a title="Groovy: Map coercion" href="https://groovy.codehaus.org/Groovy+way+to+implement+interfaces">map is then coerced to the interface</a> (the same as <code>someMap as PageNodeListener</code>). Notice that if it didn't contain an entry for a method then it would throw a NullPointerException if the method was invoked on the stub.</li>
</ul>
Notice that this version is more flexible than the Groovy-only one because we have full access to java.lang.reflect.<a title="class in java.lang.reflect" href="https://download.oracle.com/javase/1,5.0/docs/api/java/lang/reflect/Method.html" target="classFrame">Method</a> when we create the map and thus can adjust the return value of the method closure w.r.t. what is expected. Thus it's possible to stub any interface, even if it has methods returning primitive types.
<h2>Conclusion</h2>
This is a nice and simple way to stub an interface with methods that are void or return non-primitive values and collect all calls to the stub for a verification. If your requirements differ then you might be better of with a different type of <a href="https://docs.codehaus.org/display/GROOVY/Groovy+Mocks">mocking in Groovy</a> or with a true mocking library.
<h2>Additional Information</h2>
Groovy version: 1.8.2, Java: 6.0.<br><br>See the full source code in the JSF EL Validator's <a href="https://github.com/holyjak/static-jsfexpression-validator/blob/5e89d97f6b5e98a197b1074dc1759fabb1048116/static-jsfexpression-validator-jsf20/src/test/java/org/apache/myfaces/view/facelets/compiler/NotifyingCompilationManagerTest.groovy">NotifyingCompilationManagerTest.groovy</a>.
<div class="linkscent-iconblock" style="padding:0!important;margin:0!important;float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent !important;width:auto !important;height:auto !important;display:block !important;overflow:visible !important;position:static !important;text-indent:0 !important;z-index:auto !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:auto !important;top:auto !important;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;"><img class="linkscent-icon" style="padding:0!important;margin:0;float:none !important;border:0 solid #ff0000 !important;width:16px !important;height:16px !important;display:block;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:484px;top:651px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:visible;background:url('/favicon.ico') no-repeat scroll center center transparent !important;opacity:.5;" src="//interclue/content/cluecore/skins/default/pixel.gif" alt="" /><img class="linkscent-icon" style="padding:0!important;margin:0;float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:502px;top:651px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;" src="//interclue/content/cluecore/skins/default/pixel.gif" alt="" /></div>

++++
