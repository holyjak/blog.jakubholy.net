{:title
 "Groovy: Use @Canonical to Get Compiler-generated Equals, HashCode and ToString",
 :date "2011-11-02",
 :layout :post,
 :tags ["java" "groovy"],
 :tags-orig ["groovy" "java"],
 :categories ["General" "Languages"],
 :extra-css #{}
}

++++
Groovy makes it extremely easy to create Java beans with getters, setters, equals, hashCode, and toString:<br><br><pre><code>
@groovy.transform.Canonical
class Call {
   def method
   def args<br><br>   /* // custom impl. reusing the auto-generated one:
   String toString() {
      _toString().replaceFirst(&quot;^.*?Call&quot;, &quot;&quot;)
   }*/
}
</code></pre><br><br>You can then do:<br><br><pre><code>
// Auto-gen. constr. with positional arguments:
def call1 = new Call(&quot;someMethod&quot;, &quot;someArgs&quot;)
def call2 = new Call(method: &quot;someMethod&quot;, args: &quot;someArgs&quot;)
assert call1.getMethod() == call1.method
assert call2.equals(call1)
assert ([call1, call2] as Set).size() == 1 // hashCode
</code></pre><br><br>As you might have noticed, you may provide your own implementation of toString and reuse the auto-generated toString by calling <code>_toString()</code>.
<h2>References</h2>
JavaDoc for <a href="https://groovy.codehaus.org/api/groovy/transform/Canonical.html">@Canonical</a>. You can also use separately any of: <a title="annotation in groovy.transform" href="https://groovy.codehaus.org/api/groovy/transform/ToString.html" target="classFrame">@ToString</a>. <a title="annotation in groovy.transform" href="https://groovy.codehaus.org/api/groovy/transform/EqualsAndHashCode.html" target="classFrame">@EqualsAndHashCode</a>, <a title="annotation in groovy.transform" href="https://groovy.codehaus.org/api/groovy/transform/TupleConstructor.html" target="classFrame">@TupleConstructor</a>. And may be check also the <a href="https://groovy.codehaus.org/api/groovy/transform/package-frame.html">other available AST annotations</a> such as Immutable and Synchronized and perhaps also <a href="https://groovy.codehaus.org/api/groovy/beans/package-frame.html" target="packageFrame">groovy.beans</a>'s Bindable and Vetoable annotations, if you need true Java Beans.
++++
