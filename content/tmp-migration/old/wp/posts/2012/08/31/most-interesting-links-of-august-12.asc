{:title "Most interesting links of August '12",
 :date "2012-08-31",
 :layout :post,
 :tags ["methodology" "human" "data"],
 :tags-orig ["agile" "BI" "http" "human" "network" "proxy"],
 :categories ["General" "Tools" "Top links of month"],
 :extra-css #{}
}

++++
<h2>Recommended Readings</h2>
<ul>
	<li><a href="https://www.mountaingoatsoftware.com/articles/how-to-fail-with-agile">How To Fail With Agile:Twenty Tips to Help You Avoid Success</a> - a great overview of ways people may make agile projects and initiatives fail - use them to either avoid the failure or to make it certain, according to your attitude towards agile</li>
	<li><a href="https://vim-adventures.com/">vim-adventures.com</a>: Learning Vim keys in an entertaining way by playing an on-line 2D game. A brilliant idea!</li>
	<li><a href="https://architects.dzone.com/articles/search-better-big-data">The Search for a Better BIG Data Analytics Pipeline</a> - how to use big data and analytics on it in a company. Big data = lot of data, simple processing; deep analysis = representative, small sample of data (no need for all), advanced techniques. Big data can provide input for analysis.</li>
</ul>
<h2>Links to Keep</h2>
<ul>
	<li>Pat Kua's <a href="https://www.thekua.com/atwork/category/onboarding-strategies/">Onboarding Strategies series</a> - tips for getting new people onto your team as a tech lead and making them productive quickly. He also wrote the InfoQ article <a href="https://www.infoq.com/articles/pat-kua-onboarding-new">A Leaner Start: Reducing Team Setup Times</a> based on the series. Some posts: Catalogue of patterns applied, Airing .. about feedback meetings, Pair programming, Preparation e-mail, Domain driven design and readable code, Tech huddles (what-we-learned session every 2nd day), Transparent technical debt, Visible architecture, Big vision business problem.</li>
</ul>
<h2>Useful Tools</h2>
<ul>
	<li><a href="https://www.owasp.org/index.php/OWASP_Hatkit_Proxy_Project">OWASP Hatkit Proxy</a>: TCP/HTTP proxy intended for developers that can intercept and modify requests and store parsed communication into MongoDB for later exploration. You can define what (not) to store/intercept with white- (black-)lists. Syntax highlighting, Swing UI etc.</li>
	<li><a href="https://queue.acm.org/detail.cfm?id=1483108&amp;CFID=1014150&amp;CFTOKEN=54279563">Using Doxygen to understand a code base</a> - Doxygen can generate a full cross reference of source code, class diagram, caller and call graphs for many languages including Java, PHP, C.</li>
</ul>
<h2>Interesting Quotes</h2>
<blockquote>Our standards by default exclude comments where possible replaced by representing as much intent as possible in the code itself. We focus on what it does and why. I’ve found “What” tends to be best represented by production code, whilst “Why” is better explained in tests because you can better represent different contexts there.
- <em>Pat Kua: <a href="https://www.thekua.com/atwork/category/onboarding-strategies/">Onboarding strategy: Domain driven design and readable code</a></em></blockquote>
++++
