{:title "Creating Custom Login Modules In JBoss AS 7 (and Earlier)",
 :date "2012-06-21",
 :layout :post,
 :tags ["security" "webdev" "java"],
 :tags-orig ["java" "jboss" "security" "webapp"],
 :categories ["j2ee" "Languages" "Tools"],
 :extra-css #{}
}

++++
JBoss AS 7 is neat but the documentation is still quite lacking (and error messages not as useful as they could be). This post summarizes how you can create your own JavaEE-compliant login module for authenticating users of your webapp deployed on JBoss AS. A working elementary username-password module provided.<br><br><!--more-->
<h2>Why to use Java EE standard authentication?</h2>
<h3>Java EE security primer</h3>
A part of the Java EE specification is security for web and EE applications, which makes it possible both to specify declarative constraints in your web.xml (such as "role X is required to access resources at URLs "/protected/*") and to control it programatically, i.e. verifying that the user has a particular role (see <a href="https://docs.oracle.com/javaee/1.4/api/javax/servlet/http/HttpServletRequest.html#isUserInRole%28java.lang.String%29">HttpServletRequest.isUserInRole</a>).<br><br>It works as follows:
<ol>
	<li>You declare in your web.xml:
<ol>
	<li>Login configuration - primarily whether to use browser prompt (basic) or a custom login form and a name for the login realm
<ul>
	<li>The custom form uses "magic" values for the post action and the fields, starting with j_, which are intercepted and processed by the server</li>
</ul>
</li>
	<li>The roles used in your application (typically you'd something like "user" and perhaps "admin")</li>
	<li>What roles are required for accessing particular URL patterns (default: none)</li>
	<li>Whether HTTPS is required for some parts of the application</li>
</ol>
</li>
	<li>You tell your application server how to authenticate users for that login realm, usually by associating its name with one of the available login modules in the configuration (the modules ranging from simple file-based user list to LDAP and Kerberos support). Only rarely do you need to create your own login module, the topic of this post.</li>
</ol>
If this is new for you than I strongly recommend reading <a href="https://docs.oracle.com/javaee/5/tutorial/doc/bncbx.html">The Java EE 5 Tutorial - Examples: Securing Web Applications</a> (Form-Based Authentication with a JSP Page incl. security constraint specification, Basic Authentication with JAX-WS, Securing an Enterprise Bean, Using the isCallerInRole and getCallerPrincipal Methods).
<h3>Why to bother?</h3>
<ul>
	<li>Declarative security is nicely decoupled from the business code</li>
	<li>It's easy to propagate security information between a webapp and for example EJBs (where you can protect a complete bean or a particular method declaratively via xml or via annotations such as <a href="https://docs.oracle.com/javaee/5/tutorial/doc/bnbzj.html#bnbzk">@RolesAllowed</a>)</li>
	<li>It's easy to switch to a different authentication mechanism such as LDAP and it's more likely that SSO will be supported</li>
</ul>
<h2>Custom login module implementation options</h2>
If one of the <a href="https://community.jboss.org/wiki/JBossAS7SecurityDomainModel#Security_Domains">login modules (a.k.a. security domains) provided out of the box</a> with JBoss, such as UsersRoles, Ldap, Database, Certificate, isn't sufficient for you then you can adjust one of them or implement your own. You can:
<ol>
	<li>Extend one of the concrete modules, overriding one or some of its methods to ajdust to your needs - see f.ex. how to <a href="https://community.jboss.org/wiki/CreatingACustomLoginModule">override the DatabaseServerLoginModule to specify your own encryption</a> of the stored passwords. This should be your primary choice, of possible.</li>
	<li>Subclass UsernamePasswordLoginModule</li>
	<li>Implement javax.security.auth.spi.LoginModule if you need maximal flexibility and portability (this is a part of Java EE, namely <a href="https://docs.oracle.com/javase/1.4.2/docs/guide/security/jaas/JAASLMDevGuide.html">JAAS</a>, and is quite complex)</li>
</ol>
JBoss EAP 5 <a href="https://docs.redhat.com/docs/en-US/JBoss_Enterprise_Application_Platform/5/html/Security_Guide/sect-Custom_Modules.html">Security Guide Ch. 12.2. Custom Modules</a> has an excellent description of the basic modules (AbstractServerLoginModule, UsernamePasswordLoginModule) and how to proceed when subclassing them or any other standard module, including description of the key methods to implement/override. You must read it. (The guide is still perfectly applicable to JBoss AS 7 in this regard.) The custom <a href="https://docs.redhat.com/docs/en-US/JBoss_Enterprise_Application_Platform/5/html/Security_Guide/sect-Custom_LoginModule_Example.html">JndiUserAndPass module example</a>, extending UsernamePasswordLoginModule, is also worth reading - it uses module options and JNDI lookup.
<h3>Example: Custom UsernamePasswordLoginModule subclass</h3>
See the <a href="https://github.com/holyjak/blog/blob/master/miniprojects/jboss-custom-login/src/main/java/custom/MySimpleUsernamePasswordLoginModule.java">source code of MySimpleUsernamePasswordLoginModule</a> that extends JBoss' <em>UsernamePasswordLoginModule</em>.<br><br>The abstract <a href="https://www.docjar.com/html/api/org/jboss/security/auth/spi/UsernamePasswordLoginModule.java.html">UsernamePasswordLoginModule</a> (<a href="https://www.docjar.com/src/api/org/jboss/security/auth/spi/UsernamePasswordLoginModule.java">source code</a>) works by comparing the password provided by the user for equality with the password returned from the method getUsersPassword, implemented by a subclass. You can use the method getUsername to obtain the user name of the user attempting login.
<h4>Implement abstract methods</h4>
<h5>getUsersPassword()</h5>
Implement getUsersPassword() to lookup the user's password wherever you have it. If you do not store passwords in plain text then read how to customize the behavior via other methods below
<h5>getRoleSets()</h5>
Implement getRoleSets() (from <a href="https://www.docjar.com/html/api/org/jboss/security/auth/spi/AbstractServerLoginModule.java.html">AbstractServerLoginModule)</a> to return at least one group named "Roles" and containing 0+ roles assigned to the user, see the implementation in <a href="https://github.com/holyjak/blog/blob/master/miniprojects/jboss-custom-login/src/main/java/custom/MySimpleUsernamePasswordLoginModule.java">the source code for this post</a>. Usually you'd lookup the roles for the user somewhere (instead of returning hardcoded "user_role" role).
<h4>Optionally extend initialize(..) to get access to module options etc.</h4>
Usually you will also want to extend <em>initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options)</em> (called for each authentication attempt),
<ul>
	<li>To get values of properties declared via the &lt;module-option ..&gt; element in the security-domain configuration - <a href="https://docs.redhat.com/docs/en-US/JBoss_Enterprise_Application_Platform/5/html/Security_Guide/sect-Custom_LoginModule_Example.html">see JBoss 5 custom module example</a></li>
	<li>To do other initialization, such as looking up a data source via JNDI - see the <a href="https://www.docjar.com/html/api/org/jboss/security/auth/spi/DatabaseServerLoginModule.java.html">DatabaseServerLoginModule</a></li>
</ul>
<h4>Optionally override other methods to customize the behavior</h4>
If you do not store passwords in plain text (a wise choice!) and your hashing method isn't supported out of the box then you can override <em>createPasswordHash(String username, String password,  String digestOption)</em> to hash/encrypt the user-supplied password before comparison with the stored password.<br><br>Alternatively you could override <em>validatePassword(String inputPassword, String expectedPassword)</em> to do whatever conversion on the password before comparison or even do a different type of comparison than equality.
<h2>Custom login module deployment options</h2>
In JBoss AS you can
<ol>
	<li>Deploy your login module class in a JAR as a standalone module, independently of the webapp, under <em>&lt;JBoss AS 7&gt;/modules/</em>, together with a module.xml - described at <a href="https://community.jboss.org/wiki/JBossAS7SecurityCustomLoginModules">JBossAS7SecurityCustomLoginModules</a></li>
	<li>Deploy your login module class as a part of your webapp (no module.xml required)
<ol>
	<li> In a JAR inside WEB-INF/lib/</li>
	<li>Directly under WEB-INF/classes</li>
</ol>
</li>
</ol>
In each case you have to declare a corresponding security-domain it inside JBoss configuration (standalone/configuration/standalone.xml or domain/configuration/domain.xml):<br><br><pre><code>
&lt;security-domain name=&quot;form-auth&quot; cache-type=&quot;default&quot;&gt;
  &lt;authentication&gt;
    &lt;login-module code=&quot;custom.MySimpleUsernamePasswordLoginModule&quot; flag=&quot;required&quot;&gt;
      &lt;!--module-option name=&quot;exampleProperty&quot; value=&quot;exampleValue&quot;/--&gt;
    &lt;/login-module&gt;
  &lt;/authentication&gt;
&lt;/security-domain&gt;
</code></pre><br><br>The <em>code</em> attribute should contain the fully qualified name of your login module class and the security-domain's <em>name</em> must match the declaration in jboss-web.xml:<br><br><pre><code>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;jboss-web&gt;
  &lt;security-domain&gt;form-auth&lt;/security-domain&gt;
  &lt;disable-audit&gt;true&lt;/disable-audit&gt;
&lt;/jboss-web&gt;
</code></pre>
<h2>The code</h2>
<a href="https://github.com/holyjak/blog/tree/master/miniprojects/jboss-custom-login">Download the webapp jboss-custom-login</a> containing the custom login module <a id="dbc2bb6d6dfd6a92fb06631e16bc9fc0c17b8816" href="https://github.com/holyjak/blog/blob/master/miniprojects/jboss-custom-login/src/main/java/custom/MySimpleUsernamePasswordLoginModule.java">MySimpleUsernamePasswordLoginModule</a>, follow the deployment instructions in the <a href="https://github.com/holyjak/blog/blob/master/miniprojects/jboss-custom-login/README.md">README</a>.
++++
