{:title
 "Exposing Functionality Over HTTP with Groovy and Ultra-Lightweight HTTP Servers",
 :date "2012-04-04",
 :layout :post,
 :tags ["webdev" "java" "groovy" "api"],
 :tags-orig ["groovy" "java" "REST" "webapp"],
 :categories ["j2ee" "Languages"],
 :extra-css #{}
}

++++
I needed a quick and simple way to enable some users to query a table and figured out that the easiest solution was to use an embedded, ligthweight HTTP server so that the users could type a URL in their browser and get the results. The question was, of course, which server is best for it. I'd like to summarize here the options I've discovered - including Gretty, Jetty, Restlet, Jersey and others - and their pros &amp; cons together with complete examples for most of them. I've on purpose avoided various frameworks that might support this easily such as Grails because it didn't feel really lightweight and I needed only a very simple, temporary application.<br><br>I used Groovy for its high productivity, especially regarding JDBC - with GSQL I needed only two lines to get the data from a DB in a user-friendly format.<br><br>My ideal solution would make it possible to start the server with support for HTTPS and authorization and declare handlers for URLs programatically, in a single file (Groovy script), in just few lines of code. (Very similar to the Gretty solution below + the security stuff.)<br><br><!--more-->
<h2>Side Notes</h2>
<h3>Note on Grape</h3>
<a href="https://groovy.codehaus.org/Grape">Grape</a>, the Groovy packaging engine, makes it possible to download dependencies at runtime via @Grab annotations. If you run your groovy script f.ex. via &lt;your groovy 1.8 installation&gt;/bin/groovy then it will just work because Groovy is distributed together with Ivy, which is required for Grape to work. (If using IntelliJ then add ivy.jar manually to the project's classpath and then invoke intention action (Mac: Alt+Enter) on the @Grab annotation to download it and add it to the classpath.)
 
<h3>Note on HTTPS/SSL Configuration</h3>
To enable HTTPS, you will need to create a keystore with a key pair, which is <a href="https://docs.codehaus.org/display/JETTY/How+to+configure+SSL#HowtoconfigureSSL-step1">well described in the documentation of Jetty</a> (step 1a).<br><br>For the impatient:
<ul>
	<li>Run<pre><code>keytool -keystore $HOME/.keystore -alias myGroovyServer -genkey -keyalg RSA</code></pre></li>
	<li>When asked "What is your first and last name?", provide the hostname where the service will be running, e.g. "localhost" or "myserver.example.com"</li>
	<li>Specify the same password for the keystore and the generated key (e.g. "myKeystorePsw")</li>
	<li>When running the server, supply the (absolute) path to the generated file <var>.keystore</var> (in a server-specific way) and set the system property <var>javax.net.ssl.keyStorePassword</var> to the password</li>
</ul>
<h2>1. Simple HTTP Request and Response Solutions</h2>
<h3>Attempt 1: Gretty</h3>
<a href="https://github.com/groovypp/gretty">Gretty</a> is a Groovy wrapper for Netty, the asynchronous web server, and is written in Groovy++. (<a href="https://groovy.dzone.com/articles/groovy-action">Intro article for Gretty</a>.)<br><br><strong>Pros</strong>: Well integrated with Groovy, simple to get started with, supports serving static resources and more, Netty is cool.<br><br><strong>Cons</strong>: Undocumented, the project seems to be dormant, no clear way to add user authorization and HTTPS.<br><br>The code:<br><br><pre><code>
@GrabConfig(systemClassLoader=true)
@GrabResolver(name='gretty', root='http://groovypp.artifactoryonline.com/groovypp/libs-releases-local')
@Grapes([
    @Grab('org.mbte.groovypp:gretty:0.4.279'),
    @Grab('mysql:mysql-connector-java:5.1.16')])<br><br>import org.mbte.gretty.httpserver.*
import groovy.sql.Sql<br><br>class Main {<br><br>    final def db = [url: 'jdbc:mysql://localhost:3306/user', user: 'dbUser', psw: 'dbPsw' ]<br><br>    def run() {
        startServer()
    }<br><br>    def getUser(def code) {
        println &quot;Connecting to the DB to check '$code'...&quot;
        def sql = Sql.newInstance( db.url, db.user, db.psw)
        return sql.firstRow(&quot;select * from users where code = $code&quot;) ?: &quot;No such code found&quot;
    }<br><br>    def startServer() {
        GrettyServer server = []
        server.groovy = [
                localAddress: new InetSocketAddress(6789), // no host =&gt; all
                defaultHandler: {
                    response.redirect &quot;/&quot;
                },
                &quot;/:code&quot;: {
                    get {
                        def user = getUser(it.code)
                        response.text = &quot;The code '${it.code}' refers to $user\n&quot;
                        // =&gt; st. like: &quot;The code 'abc' refers to [id:123, name:me@somewhere.no, code:abc]&quot;
                    }
                }
        ]
        server.start()
        println &quot;Groovy server is ready to serve&quot;
    }
}<br><br>new Main().run()
</code></pre><br><br><h3>Jetty</h3>
<strong>Pros</strong>: Mature, powerful, often used in the embedded form, supports <a href="https://docs.codehaus.org/display/JETTY/How+to+configure+SSL">HTTPS</a> and <a href="https://docs.codehaus.org/display/JETTY/How+to+Configure+Security+with+Embedded+Jetty">authorization (also programatically)</a>.<br><br><strong>Pitfall</strong>: You cannot use org.eclipse.jetty:jetty-server because Grape.grab will fail to download the dependency <var>org.eclipse.jetty.orbit:javax.servlet</var> <a href="https://jira.codehaus.org/browse/JETTY-1493">due to Ivy getting confused</a> by packaging vs. extension. Use <var>org.eclipse.jetty.<strong>aggregate</strong>:jetty-server</var> instead (the <a href="https://wiki.eclipse.org/Jetty/Reference/Dependencies#Aggregate_JARs">Jetty aggregate packages</a> merge multiple smaller JARs).<br><br><h4>Example: Jetty with Security</h4> <br><br>(based on the articles about <a href="https://wiki.eclipse.org/Jetty/Tutorial/Embedding_Jetty">Embedding Jetty</a> (including SSL) for programatic configuration and handling requests via a custom handler or servlet (very well written indeed) and <a href="https://docs.codehaus.org/display/JETTY/How+to+Configure+Security+with+Embedded+Jetty#HowtoConfigureSecuritywithEmbeddedJetty-Programmaticsecurityconstraintsnowebxml">How to Configure Security with Embedded Jetty</a> for programatic configuration of authentication and authorization)<br><br><pre><code>
import groovy.sql.Sql
import javax.servlet.*
import javax.servlet.http.*
import org.eclipse.jetty.server.*
import org.eclipse.jetty.server.ssl.SslSelectChannelConnector
import org.eclipse.jetty.servlet.*
import org.eclipse.jetty.security.*
import org.eclipse.jetty.util.security.*<br><br>@GrabConfig(systemClassLoader = true)
@Grapes([
    @Grab('org.eclipse.jetty.aggregate:jetty-server:8.1.2.v20120308'),
    @Grab('org.eclipse.jetty.aggregate:jetty-servlet:8.1.2.v20120308'),
    @Grab(group='javax.servlet', module='javax.servlet-api', version='3.0.1'),
    @Grab('mysql:mysql-connector-java:5.1.16')])
class Main extends HttpServlet {<br><br>    final def db = [url: 'jdbc:mysql://localhost:3306/user', user: 'dbUser', psw: 'dbPsw' ]<br><br>    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        final String code = request.pathInfo.substring(1); // skip leading '/'
        response.setContentType(&quot;text/plain&quot;);<br><br>        try {
            def user = getUser(code)
            response.setStatus(HttpServletResponse.SC_OK);
            response.getWriter().println(&quot;Usage of the code '${code}': $user\n&quot;)
        } catch (Exception e) {
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)
            response.getWriter().println(&quot;Connection to the database failed. This may be due to temporary &quot; +
                    &quot;connection problems or due to misconfiguration. Try later.&quot;)
        }
    }<br><br>    def getUser(def code) {
        println &quot;Connecting to the DB to check '$code'...&quot;
        def sql = Sql.newInstance( db.url, db.user, db.psw)
        return sql.firstRow(&quot;select * from users where code = $code&quot;) ?: &quot;No such code found&quot;
    }<br><br>    public static startServer() {
        Server server = new Server();
        server.setHandler(createServletHandlerWithAuthentication(
                &quot;/&quot;, new Main(), createAuthenticationConstraint()))
        server.setConnectors((Connector[])[createSslConnector()])
        server.start();
        server.join();
    }<br><br>    /** Wrap the servlet in the servlet handler and configure it to run at the given URL, setting its security handler. */
    private static createServletHandlerWithAuthentication(String contextPath, Servlet servlet, SecurityHandler securityHandler) {
        final String pathSpec = &quot;/*&quot;
        ServletContextHandler servletHandler = new ServletContextHandler(ServletContextHandler.NO_SESSIONS)
        servletHandler.setContextPath(contextPath)
        servletHandler.setSecurityHandler(securityHandler)
        servletHandler.addServlet(new ServletHolder(servlet), pathSpec)
        return servletHandler
    }<br><br>    /** Create HTTPS connector running at port 6789 and using key pair from the hard-coded keystore. */
    private static Connector createSslConnector() {
        SslSelectChannelConnector ssl_connector = new SslSelectChannelConnector()
        ssl_connector.setPort(6789)<br><br>        def cf = ssl_connector.getSslContextFactory()
        cf.setKeyStore(System.getProperty(&quot;user.home&quot;) + &quot;/.keystore&quot;)
        cf.setKeyStorePassword(&quot;myKeystorePsw&quot;)
        cf.setKeyManagerPassword(&quot;myKeystorePsw&quot;)<br><br>        return ssl_connector
    }<br><br>    /** Create a security handler requiring authentication with username/password. */
    private static SecurityHandler createAuthenticationConstraint() {
        Constraint constraint = new Constraint();
        constraint.setName(Constraint.__BASIC_AUTH);
        constraint.setRoles((String[])[&quot;user&quot;]);
        constraint.setAuthenticate(true);<br><br>        ConstraintMapping cm = new ConstraintMapping();
        cm.setConstraint(constraint);
        cm.setPathSpec(&quot;/*&quot;); // auth. required for any URL<br><br>        def loginSrv = new HashLoginService()
        loginSrv.putUser(&quot;myLogin&quot;, new Password(&quot;myPassword&quot;), (String[])[&quot;user&quot;])
        loginSrv.setName(&quot;My App Realm&quot;)<br><br>        SecurityHandler sh = new ConstraintSecurityHandler()
        sh.setLoginService(loginSrv)
        sh.setConstraintMappings((ConstraintMapping[])[cm]);<br><br>        return sh
    }
}<br><br>Main.startServer()
</code></pre><br><br>Additional resources:
<ul>
	<li>Post: <a href="https://mrhaki.blogspot.com/2009/10/groovy-goodness-groovlets-as.html">Embedded Groovy executing Groovlets</a> (Groovy scripts with access to request/response and support for generating HTML)</li>
	<li>Post: A <a href="https://www.joergm.com/2009/12/scripting-magic-with-groovy-grape-and-jetty/">Groovy+Jetty blog featuring support for command-line arguments, @Grab</a>, and serving of static resources</li>
	<li>Post: <a href="https://actionsresults.com/blog/2009/10/24/embedded-jetty-ssl-https/">Enabling HTTPS for an Embedded Jetty</a></li>
</ul>
<h3>Winstone</h3>
<a href="https://winstone.sourceforge.net/">Winstone</a> is a 200KB servlet container <a href="https://search.maven.org/#search|ga|1|winstone">available via Maven</a>, last release 2008. It seems to be focused on serving WARs.
<h3>Sun Java 6 HttpServer</h3>
<a href="https://blogs.oracle.com/michaelmcm/entry/http_server_api_in_java">Sun JRE 6+ contains a ligthweight, programmatically controled HTTP server</a>, supporting also HTTPS. <a href="https://alistairisrael.wordpress.com/2009/09/02/functional-http-testing-with-sun-java-6-httpserver/">Example code</a>.
<h2>2. REST-based Solutions</h2><br><br><h3>Jersey JAX-RS</h3>
Jersey, the reference implementation of JAX-RS (aka REST), can run on an embedded test server such as Grizzly, GlassFish, or Jetty.<br><br><strong>Pros</strong>: The reference implementation of JAX-RS, i.e. standard.<br><br><strong>Cons</strong>: <a href="/2012/01/31/troubleshooting-jersey-rest-server-and-client/">Troubleshooting Jersey</a> isn't as easy as I'd like it to be. The documentation should be better (compare to Jetty's), this is really a weak point (try to find anything about securing Jersey with an embedded Grizzly).<br><br><h4>Example: Jersey with embedded Grizzly, without security</h4><br><br>(If interested in security and authentication, check out the sample project <a href="https://maven.java.net/content/repositories/releases/com/sun/jersey/samples/https-clientserver-grizzly/1.12/https-clientserver-grizzly-1.12-project.zip">https-clientserver-grizzly</a>. It seems little to complex to me.)<br><br><pre><code>
import groovy.sql.Sql<br><br>import javax.ws.rs.*
import javax.ws.rs.core.*
import com.sun.jersey.api.core.*
import com.sun.jersey.api.container.grizzly2.GrizzlyServerFactory
import org.glassfish.grizzly.http.server.HttpServer<br><br>@GrabConfig(systemClassLoader = true)
@GrabResolver(name = 'gretty', root = 'http://groovypp.artifactoryonline.com/groovypp/libs-releases-local')
@Grapes([
    @Grab('com.sun.jersey:jersey-server:1.12'),
    @Grab('com.sun.jersey:jersey-core:1.12'),
    @Grab(group='com.sun.jersey', module='jersey-grizzly2', version='1.12'),
    @Grab(group='javax.ws.rs', module='jsr311-api', version='1.1.1'),
    @Grab('mysql:mysql-connector-java:5.1.16')])<br><br>@Path(&quot;/{code}&quot;)
class Main {<br><br>    final def db = [url: 'jdbc:mysql://localhost:3306/user', user: 'dbUser', psw: 'dbPsw' ]<br><br>    @GET @Produces(&quot;text/plain&quot;)
    public Response getUserByCode(@PathParam('code') String code) {
        try {
            def user = getUser(code)
            return Response.ok().entity(&quot;Usage of the code '${code}': $user\n&quot;.toString()).build();
        } catch (Exception e) {
            Response.serverError().entity(&quot;Connection to the database failed. This may be due to temporary &quot; +
                    &quot;connection problems or due to misconfiguration. Try later. Cause: $e&quot;.toString()).build();
        }
    }<br><br>    def getUser(def code) {
        println &quot;Connecting to the DB to check '$code'...&quot;
        def sql = Sql.newInstance( db.url, db.user, db.psw)
        return sql.firstRow(&quot;select * from users where code = $code&quot;) ?: &quot;No such code found&quot;
    }<br><br>    public static startServer() {
        ResourceConfig resources = new ClassNamesResourceConfig(Main)
        def uri = UriBuilder.fromUri(&quot;http://localhost/&quot;).port(6789).build();
        HttpServer httpServer = GrizzlyServerFactory.createHttpServer(uri, resources);
        println(&quot;Jersey app started with WADL available at ${uri}application.wadl&quot;)
        System.in.read();
        httpServer.stop();
    }
}<br><br>Main.startServer()
</code></pre><br><br>
<h3>RESTEasy with an Embedded TJWS (Tiny Java Web Server and Servlet Container)</h3>
TJWS is trully miniature, 100KB footprint, runs also on Android, about 5 times smaller than the competitors <a href="https://www.gefionsoftware.com/" target="_blank">LWS</a> and <a href="https://jetty.mortbay.org/jetty/index.html" target="_blank">Jetty</a>.<br><br>From the RESTEasy documentation:<br><br><pre><code>
@Path(&quot;&quot;)
public class MyResource {<br><br>   @GET public String get() { return &quot;hello world&quot;; }<br><br>   public static void main(String[] args) throws Exception  {
      TJWSEmbeddedJaxrsServer tjws = new TJWSEmbeddedJaxrsServer();
      tjws.setPort(8081);
      tjws.getRegistry().addPerRequestResource(MyResource.class);
      tjws.start();
   }
}
</code></pre><br><br><a href="https://tjws.sourceforge.net/#security">TJWS itself supports SSL</a>, I'm not sure about the JBoss TJWS plugin for RESTEasy (which is the only version of tjws availabe in Maven). It <a href="https://tjws.sourceforge.net/#embedded">can be also embedded</a> but isn't available via Maven and I don't know if it supports mapping of requests to code (instead of WARs and JSPs).
<h3>Restlet with an Embedded Server</h3>
See the article <a href="https://blog.arc90.com/2008/06/04/building-restful-web-apps-with-groovy-and-restlet-part-1-up-and-running/">Building RESTful Web Apps with Groovy and Restlet, Part 1: Up and Running</a> (2008). As Restlet is available in Maven, we could just @Grab the dependencies.<br><br>What is even more interesting is the <a href="https://docs.codehaus.org/display/GROOVY/GroovyRestlet">GroovyRestlet module that let you configure authorization and request handling programatically</a>, with only few lines. (You can <a href="https://www.restlet.org/documentation/1.1/tutorial#part11">do this also in Java</a>, with some more LoC.)<br><br>Doc for the release 2.1: <a href="https://wiki.restlet.org/docs_2.1/13-restlet/27-restlet/46-restlet.html">How to implement authorization and HTTPS</a>, <a href="https://wiki.restlet.org/docs_2.1/13-restlet/21-restlet/318-restlet/319-restlet.html">the simplest possible REST server</a> in ~ 6 lines of Java.<br><br>(Notice that Restlet comes with a simple HTTP server but can also use Jetty or Grizzly.)<br><br><strong>Pros</strong>: RESt (though non-standard), good integration with Groovy (though it might be outdated)<br><br><strong>Cons</strong>: As of 4/2012 Restlet is only in its private Maven repository though they're <a href="https://github.com/restlet/restlet-framework-java/issues/481">going to be in Maven Central</a> too, JAX-RS support <a href="https://wiki.restlet.org/docs_2.1/13-restlet/28-restlet/57-restlet.html">isn't fully implemented</a> yet (Restlet 2.1-RC3). The documentation could be better (more comprehensive, more interlinked, more varied examples). To use HTTPS you must choose some other server than the internal one.
<h4>Example: Restlet + SimpleFramework Server + HTTPS and Authentication (w/o Groovy integration)</h4>
<pre><code>
import groovy.sql.Sql
import org.restlet.*
import org.restlet.data.*
import org.restlet.resource.*
import org.restlet.security.*<br><br>@GrabConfig(systemClassLoader = true)
@GrabResolver(name = 'gretty', root = 'http://groovypp.artifactoryonline.com/groovypp/libs-releases-local')
@GrabResolver(name = 'restlet', root = 'http://maven.restlet.org')
@Grapes([
   @Grab('org.restlet.jse:org.restlet:2.1-RC3'),
   @Grab('org.restlet.jse:org.restlet.ext.simple:2.1-RC3'),
   @Grab('mysql:mysql-connector-java:5.1.16')])
class Main extends ServerResource {<br><br>    final def db = [url: 'jdbc:mysql://localhost:3306/user', user: 'dbUser', psw: 'dbPsw' ]<br><br>    @Get public String getUser() {
        def code = getRequestAttributes().get(&quot;code&quot;)
        def user = getUser(code)
        return &quot;Usage of the code '${code}': $user\n&quot;
    }<br><br>    def getUser(def code) {<br><br>        println &quot;Connecting to the DB to check '$code'...&quot;
        def sql = Sql.newInstance( db.url, db.user, db.psw)
        return sql.firstRow(&quot;select * from users where code = $code&quot;) ?: &quot;No such code found&quot;
    }<br><br>    public static startServer() {
        Component component = new Component();
        def userResourceFinder = component.getDefaultHost().createFinder(Main.class);
        component.getDefaultHost().attach(&quot;/{code}&quot;
                , wrapResourceInAuthenticationCheck(component.getContext(), userResourceFinder));
        configureHttpsServer(component, 6789)
        component.start()
    }<br><br>    /**
     * Add a Guard (a filter) that asks the user for username/password and checks it against a map.
     */
    private static Restlet wrapResourceInAuthenticationCheck(Context context, Restlet resource) {
        MapVerifier verifier = new MapVerifier();
        verifier.getLocalSecrets().put(&quot;myLogin&quot;, &quot;myPassword&quot;.toCharArray());<br><br>        ChallengeAuthenticator guard = new ChallengeAuthenticator(context.createChildContext(), ChallengeScheme.HTTP_BASIC, &quot;My App&quot;);
        guard.setVerifier(verifier);
        guard.setNext(resource);<br><br>        return guard;
    }<br><br>    /**
     * Create the server, instruct it to use a SslContextFactory, and configure the factory with
     * our keystore and password. I guess that which server to use is determined by Restlet based on which
     * package (*.ext.simple.*, *.ext.jetty.* etc.) is available.
     */
    private static void configureHttpsServer(Component component, int port) {
        def secureServer = component.getServers().add(Protocol.HTTPS, port);<br><br>        // See http://www.restlet.org/documentation/2.1/jse/ext/org/restlet/ext/ssl/DefaultSslContextFactory.html
        // for params such as keystore path and password
        System.setProperty(&quot;javax.net.ssl.keyStorePassword&quot;, &quot;myKeystorePsw&quot;) // used for keystorePassword &amp; keyPassword
        def confg = secureServer.getContext().getParameters()
        confg.add(&quot;sslContextFactory&quot;, &quot;org.restlet.ext.ssl.DefaultSslContextFactory&quot;)
        // Beware: keystorePath shall default to ${user.home}/.keystore but doesn't seem to do so =&gt; set it explicitly
        confg.add(&quot;keystorePath&quot;, &quot;${System.getProperty('user.home')}/.keystore&quot;)
    }
}<br><br>Main.startServer()
</code></pre><br><br><h2>Conclusion</h2>
I'd perhaps use either Jetty if REST isn't needed and Jersey+Jetty otherwise (I'd certainly pick Jetty over Grizzly as the documentation is much better). Restlet might be interesting too provided that the Groovy integration works and if you don't mind using a non-standard REST implementation.<br><br>Looking at the length of the code samples it might have been better to try Grails or st. similar after all :-)
++++
