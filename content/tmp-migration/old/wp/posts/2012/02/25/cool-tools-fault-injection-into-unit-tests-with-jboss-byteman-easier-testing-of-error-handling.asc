{:title
 "Cool Tools: Fault Injection into Unit Tests with JBoss Byteman - Easier Testing of Error Handling",
 :date "2012-02-25",
 :layout :post,
 :tags ["library"],
 :tags-orig ["AOP" "concurrency"],
 :categories ["Testing" "Tools"],
 :extra-css #{}
}

++++
How do you test error handling in your application? Do you? Is it at all possible to simulate SocketTimeoutException, SQLException? Normally the answer would be that it isn't possible or very difficult, requiring a complicated setup. Not anymore - with <a href="https://www.jboss.org/byteman">JBoss Byteman</a> you can easily inject whatever code - e.g. throw new SocketTimeoutException() - in any place - e.g. Socket.connect. The code is injected before your test runs and unloaded when it finishes. Here is an example:<br><br><pre><code>
@RunWith(BMUnitRunner.class)
public class BytemanJUnitTests {
@Test(expected=MyServiceUnavailableException.class)
   @BMRule(name=&quot;throw timeout at 1st call&quot;,
   targetClass = &quot;Socket&quot;,
   targetMethod = &quot;connect&quot;,
   action = &quot;throw new java.io.IOException()&quot;)
   public void testErrorInPipeline() throws Exception {
      // Invokes internally Socket.connect(..):
      new MyHttpClient(&quot;http://example.com/data&quot;).read();
   }
}
</code></pre><br><br><!--more-->
What's even more cool, the Byteman rules also support various conditions such as count downs or rendezvous - a special object that can be used to synchonize and order independent thread, e.g. to ensure that thread A executes method a before thread B executes method b - which makes it possible to <strong>test different orders of execution and concurrency issues</strong> that they might cause.<br><br>Fault injection in JUnit tests and the use of conditions such as rendezvous is well explained in the official tutorial <a href="https://community.jboss.org/wiki/FaultInjectionTestingWithByteman">Fault Injection Testing With Byteman</a>.<br><br>In general, JBoss Byteman 2.0.0 is a Bytecode Manipulation, Testing, Fault Injection, Logging and generally aspect-oriented programming tool. More exactly it is a Java agent which helps testing, tracing, and monitoring code. Additional code is injected (instrumentation) based on simple scripts (rules) in the event-condition-action form (the conditions may use counters, timers etc.). Contrary to standard AOP, there is no need to create classes or compile code. "Byteman is also simpler to use and easier to change, especially for testing and ad hoc logging purposes." "Byteman was invented primarily to support automation of tests for multi-threaded and multi-JVM Java applications using a technique called fault injection."<br><br>Yyou can <a href="https://www.jboss.org/byteman/downloads">download Byteman</a> from the project site or get it from the <a href="https://repository.jboss.org/nexus/content/groups/public">JBoss Maven repository</a> (let's hope they'll release into Maven Central too.)<br><br><a href="https://github.com/holyjak/presentations/tree/master/UnitTestingSwissKnife/ExampleByteman">Get a complete example project</a> from my JavaZone 2012 talk at GitHub.<br><br><strong>Update</strong>: Brett L. Schuchert argues very well in <a href="https://martinfowler.com/articles/modernMockingTools.html">Modern Mocking Tools and Black Magic - An example of power corrupting</a> why using such black magic (<a href="https://code.google.com/p/jmockit/">JMockIt</a> in his case) should be avoided as only treating the symtomps in favor of actually fixing the code.
++++
