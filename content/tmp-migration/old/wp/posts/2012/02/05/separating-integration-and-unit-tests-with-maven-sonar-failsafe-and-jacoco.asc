{:title
 "Separating Integration and Unit Tests with Maven, Sonar, Failsafe, and JaCoCo",
 :date "2012-02-05",
 :layout :post,
 :tags ["testing" "java" "tool"],
 :tags-orig ["java" "Maven" "Sonar" "Testing"],
 :categories ["Languages" "Testing" "Tools"],
 :extra-css #{}
}

++++
<strong>Goal</strong>: Execute the slow integration tests separately from unit tests and show as much information about them as possible in Sonar.<br><br>The first part - executing IT and UT separately - is achieved by using the <a href="https://maven.apache.org/plugins/maven-failsafe-plugin/" rel="nofollow">maven-failsafe-plugin</a> and by naming the integration tests *IT (so that the unit test running surefire-maven-plugin will ignore them while failsafe will execute them in the <em>integration-test</em> phase and collect results in the <em>verify </em>phase).<br><br>The second part - showing information about integration tests in Sonar - is little more tricky. Metrics of integration tests will not be included in the Test coverage + Unit tests success widget. You can add Integration test coverage (IT coverage) widget if you enable JaCoCo but there is no alternative for the test success metrics. But don't despair, read on!<br><br>Important notice: The integration of Sonar, JaCoCo and Failsafe evolves quite quickly so this information may easily get outdated with the next releases of Sonar<br><br><strong>Versions</strong>: Sonar 2.12, Maven 3.0.3<br><br><!--more-->
<h3 id="Sonar-PrerequisityHowSonarWorks">Prerequisity: How Sonar Works</h3>
It's important to understand how Sonar works and how it is integrated into the build process. Briefly:
<ul>
	<li>Sonar is run <em>after</em> the project is built (and thus various artifacts are already generated): either as a post- action in Jenkins or after executing mvn install manually</li>
	<li>Sonar comes bundled with various integrated quality analysis plugins such as PMD, Checkstyle, Findbugs (depending on the quality profile chosen). You do not need to add them manually to your POM (but you can, if you need to configure them). However if you need something it doesn't do yet such as collecting coverage for integration tests, you have to do it manually.</li>
	<li>Sonar may either reuse existing reports (checkstyle, ...) or generate its own.</li>
	<li>F.ex. if you choose JaCoCo as the default code coverage provider, Sonar will automatically rerun unit tests with JaCoCo enabled to collect the coverage metrics. You can see the file target/sonar/sonar-pom.xml that it generates to see what it does.</li>
</ul>
<h3 id="Sonar-SonarITTestSuccess">Fooling Sonar to Display IT Test Success</h3>
Executing unit tests via Surefire and integration tests via Failsafe results in not beeing able to see when integration tests fail. (Because this is shown by the Unit test success widget, which doesn't support Failsafe.) However it's possible to fool Sonar to show test success for both unit and integration tests together by instructing Failsafe to store its test reports to the same directory as Surefire instead of the default failsafe-reports, and that's what we do:<br><br><pre><code>
&lt;!-- pom.xml, the build/plugins section --&gt;
&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;
    &lt;configuration&gt;
        &lt;reportsDirectory&gt;${project.build.directory}/surefire-reports&lt;/reportsDirectory&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>
<h3 id="Sonar-SonarITCodeCoverage">How to display IT Code Coverage in Sonar</h3>
Sonar 2.12 currently isn't able to compute test coverage for integration tests automatically and thus we have to do it manually. Summary:
<ol>
	<li>Add Failsafe to your Maven configuration as shown above.</li>
	<li>Add JaCoCo to Maven and combine it with Failsafe to produce the coverage report when integration tests are run</li>
	<li>Instruct Sonar to execute the verify phase and pass the path to the integration test report to it</li>
</ol>
<h4>1. Add Failsafe to your Maven configuration as shown above</h4>
See the pom.xml fragment under "Fooling Sonar to Display IT Test Success" above.
<h4>2. Add JaCoCo to Maven and combine it with Failsafe to produce the coverage report when integration tests are run</h4>
As Sonar 2.12 doesn't automatically reconfigure Failsafe to collect code coverage, we have to instruct Failsafe manually to load the JaCoCo java agent that will collect and store the coverage report (to target/jacoco.exec by default):<br><br><pre><code>
&lt;!-- pom.xml fragment: --&gt;
&lt;build&gt;
 ...
     &lt;!-- Run integration tests (*IT) --&gt;
    &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
            &lt;reportsDirectory&gt;${project.build.directory}/surefire-reports&lt;/reportsDirectory&gt;
            &lt;argLine&gt;${jacoco.agent.argLine}&lt;/argLine&gt;
        &lt;/configuration&gt;
    &lt;/plugin&gt;
    &lt;!--
        Compute integration test coverage for Sonar
        BEWARE: Sonar doesn't run the verify phase, it has to be forced by setting -Dsonar.phase=verify
    --&gt;
    &lt;plugin&gt;
        &lt;groupId&gt;org.jacoco&lt;/groupId&gt;
        &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
            &lt;propertyName&gt;jacoco.agent.argLine&lt;/propertyName&gt; &lt;!-- default: argLine --&gt;
            &lt;includes&gt;
                &lt;include&gt;com/comoyo/**&lt;/include&gt;
            &lt;/includes&gt;
            &lt;destFile&gt;${project.build.directory}/jacoco-integration.exec&lt;/destFile&gt; &lt;!-- agent --&gt;
            &lt;dataFile&gt;${project.build.directory}/jacoco-integration.exec&lt;/dataFile&gt; &lt;!-- report --&gt;
        &lt;/configuration&gt;
        &lt;executions&gt;
            &lt;execution&gt;
                &lt;id&gt;agent&lt;/id&gt;
                &lt;goals&gt;&lt;goal&gt;prepare-agent&lt;/goal&gt;&lt;/goals&gt;
            &lt;/execution&gt;
        &lt;/executions&gt;
    &lt;/plugin&gt;
&lt;/build&gt;
</code></pre><br><br>The key lines are 10 (argLine) and 28 (prepare-agent before verify - the default phase, if unspecified, is <em>init</em>).
<h4>3. Instruct Sonar to execute the verify phase and pass the path to the integration test report to it</h4>
<em>Important: If you use Sonar prior to 2.12 then you must install the Sonar JaCoCo plugin manually.</em><br><br>Whether running Sonar from Jenkins or locally we have to make sure that the verify phase is run and pass to Sonar the path to the generated JaCoCo integration test coverage report. This is best done in Sonar in the JaCoCo plugin configuration (on the project level?) but you could also do it manually by passing it to maven via "-Dsonar.jacoco.itReportPath=target/jacoco-integration.exec" or by setting the property in pom.xml under project/properties.<br><br><strong>Jenkins Sonar plugin</strong> does not require any special <a href="https://docs.codehaus.org/display/SONAR/Activate+Sonar+on+Jenkins+job" rel="nofollow">configuration</a> if path to the report is set inside Sonar's JaCoCo plugin.<br><br><strong>Command line</strong> (the <a href="https://docs.codehaus.org/display/SONAR/Analyse+with+Maven" rel="nofollow">recommended</a> way; the first line runs among others the phase verify and thus generates the report):
<pre>payment$ mvn clean install -Dtest=false -DfailIfNoTests=false
payment$ mvn <a href="https://sonarsonar/" rel="nofollow">sonar:sonar</a></pre>
We could actually invoke Maven with a single line, though that isn't recommended because it would run tests multiple times:
<pre>payment$ mvn -Dsonar.phase=verify <a href="https://sonarsonar/" rel="nofollow">sonar:sonar</a></pre>
<div>NOTE: If you set JaCoCo as the default code coverage provider in Sonar than it will produce coverage for unit tests overriding the integration test coverage from the verify phase. Solutions: 1) Don't enable JaCoCo, 2) Configure JaCoCo to use a different file for integration tests (which we do)</div>
Some logs of interest from running mvn sonar:sonar:
<pre>...
JaCoCo agent (version 0.5.3.201107060350) extracted: /var/folders/k0/2842tm752zv1dh4q77_gmgdr0000gn/T/jacocoagent2548420105762793132.jar
JVM options: -<a rel="nofollow">javaagent:/var/folders/k0/2842tm752zv1dh4q77_gmgdr0000gn/T/jacocoagent2548420105762793132.jar=destfile=target/jacoco.exec,excludes=*_javassist_*</a>
Initializer FindbugsMavenInitializer...
Initializer FindbugsMavenInitializer done: 4 ms
Execute maven plugin maven-surefire-plugin...
Execute org.apache.maven.plugins:maven-surefire-plugin:2.8.1:test...
...
Execute maven plugin maven-surefire-plugin done: 9856 ms
Initializer JacocoMavenInitializer...
..
Sensor SquidSensor done: 2207 ms
Sensor JaCoCoSensor...
Analysing /myproject/target/jacoco.exec
Sensor JaCoCoSensor done: 559 ms
Sensor JaCoCoItSensor...
Analysing /myproject/target/jacoco-integration.exec
Sensor JaCoCoItSensor done: 89 ms
Sensor SurefireSensor...</pre>
<ul>
	<li>Notice that I've JaCoCo set as my code coverage provider in Sonar and Sonar does use its own copy of it  (the line JaCoCo agent .. extracted), which it uses in the test phase</li>
	<li>Notice that Sonar runs surefire:test automatically (with instrumentation) to collect code coverage</li>
	<li>Notice that JaCoCo processed both *.exec files (the first generated by Sonar for unit tests, the other generated by Maven in verify prior to calling Sonar)</li>
</ul>
<h4 id="Sonar-Caveats">Tip: Compute the total code coverage of unit + integration tests</h4>
Unit and integration test coverage are computed separately; to see the total code coverage we would need to merge the two (notice we can't just sum them as both kinds of tests can cover some of the same lines). It would be possible by using JaCoCo both to compute unit test coverage (supported out of the box) and integration test coverage into different files and using its Ant task to merge the two coverage files, passing the resulting file as the IT test coverage file to Sonar (for we cannot get a 3rd widget to display this summed coverage). However I haven't tried it.
<h4 id="Sonar-NoteonTestingJaCoCoFailsafeandMavenIntegration">Note on Testing JaCoCo, Failsafe and Maven Integration</h4>
If Sonar doesn't show the IT coverage widget though it is on the dashboard (click on Configure widgets while logged in) or shows 0% though it should be higher, you may check the data that JaCoCo is generating by producing HTML report from them. There is both an Ant task for that, which didn't work for me, and Maven goal. This is how you instruct JaCoCo to generate the report when "mvn site" is run - notice the lines 13, 14 (remember that you must run "mvn verify" first to generate the binary coverage report):<br><br><pre><code>
&lt;!-- pom.xml build/plugins fragment --&gt;
&lt;plugin&gt;
    &lt;groupId&gt;org.jacoco&lt;/groupId&gt;
    &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;id&gt;agent&lt;/id&gt;
            &lt;phase&gt;pre-integration-test&lt;/phase&gt;
            &lt;goals&gt;&lt;goal&gt;prepare-agent&lt;/goal&gt;&lt;/goals&gt;
        &lt;/execution&gt;
        &lt;execution&gt;
            &lt;id&gt;report&lt;/id&gt;
            &lt;phase&gt;site&lt;/phase&gt;
            &lt;goals&gt;&lt;goal&gt;report&lt;/goal&gt;&lt;/goals&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
&lt;/plugin&gt;
</code></pre>
<h3 id="Sonar-References">References</h3>
JaCoCo Maven plugin has minimal <a href="https://www.eclemma.org/jacoco/trunk/doc/maven.html">documentation</a> but you can get useful info via:
<pre>mvn <a href="https://helpdescribe/" rel="nofollow">help:describe</a> -Dplugin=org.<a href="https://jacocojacoco-maven-plugin/" rel="nofollow">jacoco:jacoco-maven-plugin</a> -Ddetail</pre>
Sonar: <a href="https://www.sonarsource.org/measure-code-coverage-by-integration-tests-with-sonar/" rel="nofollow">Measure Code Coverage by Integration Tests with Sonar</a> (9/2010) - doesn't use the JaCoCo Maven plugin and thus has to configure the argLine manually<br><br><h3 id="pom">The Complete POM</h3>
<a href="https://github.com/holyjak/blog/blob/master/snippets/split_integration_tst_and_coverage-pom.xml">See the complete POM at GitHub</a>.
++++
