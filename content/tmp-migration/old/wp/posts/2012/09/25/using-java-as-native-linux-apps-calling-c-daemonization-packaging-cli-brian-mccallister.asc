{:title
 "Using Java as Native Linux Apps - Calling C, Daemonization, Packaging, CLI (Brian McCallister)",
 :date "2012-09-25",
 :layout :post,
 :tags ["java" "DevOps"],
 :tags-orig ["daemon" "deployment" "java" "linux" "native" "ops"],
 :categories ["Languages"],
 :extra-css #{}
}

++++
This is a summary of the excellent JavaZone 2012 talk <a href="https://vimeo.com/49478286">Going Native (vimeo)</a> by <a href="https://skife.org/">Brian McCallister</a>. Content: Using native libraries in Java and packaging them with Java apps, daemonization, trully executable JARs, powerful CLI, creating manpages, packaging natively as deb/rpm.<br><br><h2>1. Using Native Libs in Java</h2>
<h3>Calling Native Libs</h3>
Calling native libraries such as C ones was hard and ugly with JNI but is very simple and nice with <a href="https://github.com/twall/jna">JNA</a> (GPL) and <a href="https://github.com/jnr/jffi">JNR</a> (Apache/LGPL)
<!--more--><br><br>JNR and JNA use the functions <a href="https://tldp.org/HOWTO/Program-Library-HOWTO/dl-libraries.html">dlopen, dlsym</a> to dynamically load a shared library and symbols (i.e. functions) in it.<br><br>The JNA code belows shows how to load the library MagickWand (/usr/lib/libMagickWand.so) and call some methods mapped to native functions on it, e.g. MagickWandGenesis.<br><br><pre><code>
// 1. The interfaceto use a dynamically loaded native lib:
import jnr.ffi.Pointer;
public interface MagickWand {
  public void MagickWandGenesis();
  /* MagickWand* */ Pointer NewMagickWand();
  int MagickReadImage(Pointer wand, String path);
}
// 2. Using it:
int MagickFalse = 0;
final MagickWand w =
Library.loadLibrary(&quot;MagickWand&quot;, MagickWand.class);
w.MagickWandGenesis();
Pointer magick_wand = w.NewMagickWand();
int rs = w.MagickReadImage(magick_wand, &quot;bunny.jpg&quot;);
if (rs == MagickFalse) {
   fail(&quot;bad exit code&quot;);
}
</code></pre><br><br>See <a href="https://github.com/twall/jna/blob/master/www/GettingStarted.md">Getting Started with JNA</a> for more examples, this time based on JNA.<br><br><h3>Packaging Native Libs with Your Java App</h3>
Ok, so we can call a native library but how we get to it? One way to ensure the native lib is on the target system is to package it with your java application. <a href="https://fusesource.com/forge/sites/hawtjni/">Hawt-JNI</a> is a library and Maven plugin that (among others) makes it possible to build a native library, attach it to you application and load it at runtime.<br><br><a href="https://github.com/fusesource/leveldbjni/blob/master/leveldbjni/src/main/java/org/fusesource/leveldbjni/internal/NativeDB.java">Leveldbjni uses JNI to access the native leveldb</a> library and Hawt-JNI to generate JNI code from annotations (instead of using the more user-friendly JNA or JNR) and to include it inside its JAR and to access it.<br><br>The auto-loading of the packaged native library is done by the Hawt-JNI call<br><br><pre><code>
private static final Library LIBRARY = new Library(&quot;simple&quot;, Simple.class);
static {
  LIBRARY.load();
}
</code></pre><br><br>- it does the same thing as <code>System.loadLibrary("simple")</code> but also extracts the library from the JAR and loads if from there (<a href="https://hawtjni.fusesource.org/documentation/developer-guide.html#getting-started">copied from the doc</a>).<br><br>You might want to check out <a href="https://github.com/chirino/hawtjni/tree/master/hawtjni-example/">the example Hawt-JNI maven project</a> and perhaps alos <a href="https://hawtjni.fusesource.org/documentation/developer-guide.html#adding-to-maven-build">How to Add HawtJNI to an Existing Maven Build</a>. Notice you don't need to use Hawt to build you library, you can use is as well to only package it in (goal package-jar) and to load it.<br><br>This is how a maven library with baked-in native libs looks like:<br><br><pre><code>
$ unzip -l leveldbjni-all-1.2.jar | grep libleveldbjni
655754 02-27-12 12:44 META-INF/native/linux32/libleveldbjni.so
707423 02-27-12 12:44 META-INF/native/linux64/libleveldbjni.so
446052 02-27-12 12:44 META-INF/native/osx/libleveldbjni.jnilib
</code></pre>
<h2>2. Daemonization</h2>
Daemonization of Java apps wasn't easy. You'd often use <a href="https://commons.apache.org/daemon/">commons-daemon</a> or create a wrapper script leveraging e.g. Ubuntu's start-stop-daemon. Daemonization is difficult because you need to do lot of stuff that is difficult from the JVM: fork, setsid so you parent doesn't own you, dup to protect your files, fork again, …. Fork in Java is risky (you'd miss all system threads such as gc; risk of incosistencies), the rest can be faked via posix - but you can basically use posix_spawn instead (via jnr-ffi). Read on!
<h3>Gressil: The Daemonization Library (~25min in the talk)</h3>
<a href="https://github.com/brianm/gressil">Gressil</a> is a Java library created by Brian for simple and nice daemonization of Java apps (it basically spawns a new JVM via jnr-ffi, handles pid file, stdin/stderr/out etc.)<br><br><pre><code>
public static void main(String[] args) throws IOException
{
  new Daemon().withMainArgs(args)
              .withPidFile(new File(&quot;/tmp/chatty.pid&quot;))
              .withStdout(new File(&quot;/tmp/chatty.out&quot;))
              .withExtraMainArgs(&quot;hello&quot;, &quot;world,&quot;)
              .withExtraJvmArgs(remoteDebugOnPort(5005))
              .daemonize();
  ...
}
</code></pre><br><br>Isn't that cool?
<h2>3. Using Java As a Proper Linux Program (27min)</h2>
JAR is just a ZIP file and zip allows for arbitrary crap at the beginning (until a magic number) =&gt; you can prepend e.g. a shell script to expand the jar (beware: you need the empty line after the exec otherwise jar gets confused):<br><br><pre><code><br><br>$ head -4 ./target/dwarf # this is actually a .jar
#!/bin/sh<br><br>exec java -jar &quot;$0&quot; &quot;$@&quot;<br><br>$<br><br></code></pre><br><br>You can use Brian's <a href="https://github.com/brianm/really-executable-jars-maven-plugin">Maven plugin really-executable-jars</a> to create such an executable JAR for you.<br><br>End result:<br><br><pre><code>
  # Instead of executing this:
$ java -jar ./dwarf.jar --waffles=yes
  # You can execute this:
$ dwarf --waffles=yes
</code></pre><br><br>Check out Brian's project Dwarf (link at the bottom of this post) for a practical example using the Maven plugin.
<h2>4. Better CLI With Airline (~31 min)</h2>
<a href="https://github.com/airlift/airline">Airline</a> is a Java library for creating better command-line interfaces. It has also support for commands (such as git's git add, git log) that are implemented by individual classes. It even generates bash autocompletion.<br><br><pre><code>
public static void main(String[] args)
{
  CliBuilder builder = Cli.buildCli(&quot;git&quot;, Runnable.class)
          .withDescription(&quot;the stupid content tracker&quot;)
          .withDefaultCommand(Help.class)
          .withCommands(Help.class, Add.class);
  builder.withGroup(&quot;remote&quot;)
         .withDescription(&quot;Manage set of tracked repositories&quot;)
         .withDefaultCommand(RemoteShow.class)
         .withCommands(RemoteShow.class, RemoteAdd.class);
  Cli gitParser = builder.build();
  gitParser.parse(args).run();
}<br><br>// And the add command implementation:
@Command(name=&quot;add&quot;, description=&quot;Add file contents to the index&quot;)
public static class Add implements Runnable
{
  @Option(type=OptionType.GLOBAL, name=&quot;-v&quot;, description=&quot;Verbose mode&quot;)
  public boolean verbose;<br><br>  @Arguments(description = &quot;Patterns of files to be added&quot;)
  public List patterns;<br><br>  @Option(name=&quot;-i&quot;, description=&quot;Add modified contents interactively.&quot;)
  public boolean interactive;<br><br>  public void run()
  {
    System.out.println(getClass().getSimpleName());
  }
}
</code></pre><br><br>And the use of it:<br><br><pre><code>
$ git help
usage: git [-v] &lt;command&gt; []
The most commonly used git commands are:
    add       Add file contents to the index
    help      Display help information
    remote    Manage set of tracked repositories
See 'git help &lt;command&gt;' for more information on a specific command.
</code></pre>
<h2>5. Creating Manpages</h2>
The Man pages native format is terrible but fortunately you can use <a href="https://daringfireball.net/projects/markdown/">Markdown</a> and the command-line utility <a href="https://rtomayko.github.com/ronn">ronn</a> to turn it into a manpage. (It basically turns md into html and then via some black magic incantantions into grof.)
<h2>6. Packaging (37min)</h2>
You have an executable, a man page, perhaps some scripts and now you want to install them on the target system. The best way is to use its native package manager.
<ul>
	<li> .deb: mvn plugin <a href="https://github.com/tcurdt/jdeb">jdeb</a> (deb ~ tar)</li>
	<li>.rpm: mvn plugin <a href="https://mojo.codehouse.org/rpm-maven-plugin">rpm-maven-plugin</a>, needs locally installed <a href="https://www.rpm.org/max-rpm-snapshot/rpmbuild.8.html">rpmbuild</a></li>
	<li>mac: a mess, use e.g. homebrew manually</li>
</ul>
<h2>Example Project: Dwarf</h2>
Brian used many of this techniques in his open source <a href="https://github.com/brianm/dwarf/">project Dwarf</a> so check it out. <a href="https://github.com/brianm/dwarf/blob/master/pom.xml">It uses f.ex</a> jdeb, manpage generation from Markdown via ronn (manually), executable jar.<br><br>That's all, folks! Go and watch the <a href="https://vimeo.com/49478286">Going Native video</a>!
<h2>Related</h2>
Brian's posts
<ul>
	<li><a href="https://skife.org/java/2012/01/24/java_daemonization_with_gressil.html">Java Daemonization with posix_spawn(2)</a>, also introducing Gressil</li>
	<li><a href="https://skife.org/java/2012/01/10/posix_from_java.html">POSIX from Java</a> - proper access to POSIX and libc system calls,  <a href="https://github.com/jnr/jnr-posix">jnr-posix</a></li>
	<li><a href="https://skife.org/java/unix/2011/06/20/really_executable_jars.html">Making Really Executable Jars</a></li>
</ul>
<em>Acknowledgement: Thanks to Brian for providing his slides and granting the permission to use the examples from them.</em>
++++
