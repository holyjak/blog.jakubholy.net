{:title "(Unit) Testing Swiss Knife: All the Tools You Wanted to Know",
 :date "2012-09-09",
 :layout :post,
 :tags ["testing" "java"],
 :tags-orig ["java" "JavaZone" "junit"],
 :categories ["Languages" "Testing" "Tools"],
 :extra-css #{}
}

++++
I love testing. And I like productivity. There are many tools and libraries that make writing tests easier, more convenient, more fun. I would like to introduce here those that I found the most useful during the years, from selected advanced features of JUnit to assertion libraries, powerful behavior/fault injection, testing of database-related code, and finally to boosting your testing productivity hundredfold with Groovy.<br><br>This post accompanies <a href="https://javazone.no/incogito10/events/JavaZone%202012/sessions#2e8d5563-5a8f-4cda-9881-ef41c5509d48">my JavaZone 2012 lightning talk</a> and goes more in depth and introduces additional tools and tips.<br><br><!--more-->
<h2>Table of Content</h2>
<ol>
	<li><a href="#junit">Advanced JUnit 4: Useful to Know</a>
<ol>
	<li><a href="#junit-rules">Removing Duplication And Simplyfing Tests With @Rule</a></li>
	<li><a href="#junit-parametrized">@RunWith(Parametrized): Re-Run Tests With Different Data</a></li>
	<li><a href="#junit-runners">The Almighty Custom Runners</a></li>
	<li><a href="#junit-assume">Conditionally Ignore Tests With Assume</a></li>
	<li><a href="#junit-theories">Theories (Experimental!)</a></li>
</ol>
</li>
	<li><a href="#dbunit_express">Testing DAOs with DbUnit Express</a></li>
	<li><a href="#matchers">Readable Tests with Matchers</a></li>
	<li><a href="#groovy">Attaining Eternal Bliss with Groovy</a></li>
	<li><a href="#byteman">Fault Injection with JBoss Byteman</a></li>
	<li><a href="#other">Other Stuff to Know</a>
<ol>
	<li><a href="#arquillian">Java EE Integration Testing With JBoss Arquillian</a></li>
	<li><a href="#infinitest">Continuous Integration In Your IDE With Infinitest</a></li>
</ol>
</li>
	<li><a href="#code">The Code</a></li>
</ol>
<h2 id="junit">Advanced JUnit 4: Useful to Know</h2>
<h3 id="junit-rules">Removing Duplication And Simplyfing Tests With @Rule</h3>
Rules have been introduced to JUnit around version 4.8. Simply said, rules can perform actions before and after each test or the whole test case, similarly to your @Before[Class] and @After[Class] methods but even before/after them. To use a rule you would assign it a <em>public</em> field of your test class. Example:<br><br><pre><code>
public class ExampleTest {
   @Rule public ExpectedException thrown = ExpectedException.none(); // *must* be public<br><br>   @Test
   public void throwsNullPointerExceptionWithMessage() {
      thrown.expect(NullPointerException.class); // same as @Test(expected=...)
      thrown.expectMessage(&quot;cool failure&quot;);      // check message substring
      throw new NullPointerException(&quot;My cool failure message&quot;);
  }
}
</code></pre><br><br>You can use <a href="https://kentbeck.github.com/junit/javadoc/latest/org/junit/Rule.html">@Rule</a> with a public instance field for rules that should act before/after each test method and <a href="https://kentbeck.github.com/junit/javadoc/latest/org/junit/ClassRule.html">@ClassRule</a> with a public static field for rules that should act before/after the whole test case.<br><br>You can use the <a href="https://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/TestRule.html">existing rule implementations</a> to simplify your tests. Some of the most useful rules are (click on the name for JavaDoc with examples):
<ul>
	<li><a title="class in org.junit.rules" href="https://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/ExpectedException.html"><code>ExpectedException</code></a>: check that an exception has been thrown and that the message is as expected
<ul>
	<li>See my post <a href="/2011/09/16/junit-tip-verifying-that-an-exception-with-a-particular-message-was-thrown/">JUnit Tip: Verifying that an Exception with a Particular Message was Thrown</a> for more details</li>
</ul>
</li>
	<li><a title="class in org.junit.rules" href="https://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/TemporaryFolder.html"><code>TemporaryFolder</code></a>: create fresh files/folders before test and delete them after test</li>
</ul>
If you are repeating the same set-up and tear-down code in multiple test cases then you should consider creating your own rule implementation (usually by extending <a href="https://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/ExternalResource.html">ExternalResource</a>) and pushing the set-up/tear-down code there. Let's how introducing a rule simplified tests of the DbUnit Express users.<br><br>Before introducing @Rule, every DbUnit Express test required the declaration of a db tester and it initialization in setUp:<br><br><pre><code>
public class SimpleNonExtendingEmbeddedDbJUnit4Test {<br><br>    private final EmbeddedDbTester testDb = new EmbeddedDbTester();<br><br>    @Before
    public void setUp() throws Exception {
       testDb.onSetup();
   }
// ...
</code></pre><br><br>Introducing <a href="https://github.com/holyjak/dbunit-express/blob/master/src/main/java/net/jakubholy/dbunitexpress/EmbeddedDbTesterRule.java">EmbeddedDbTesterRule</a> simplified that to one annotated line:<br><br><pre><code>
public class EmbeddedDbTesterRuleTest {<br><br>    @Rule
    public final EmbeddedDbTesterRule embeddedDb = new EmbeddedDbTesterRule();
// ...
</code></pre><br><br>(The EmbeddedDbTesterRule is more complicated than usual because I wanted it to extend the original class, EmbeddedDbTester, and thus couldn't extend ExternalResource.)<br><br>See also <a href="/2011/09/04/dry-use-junit-rule-instead-of-repeating-setupbefore-in-each-test/">DRY: Use JUnit @Rule Instead of Repeating Setup/@Before in Each Test</a>.
<h3 id="junit-parametrized">@RunWith(Parametrized): Re-Run Tests With Different Data</h3>
Occasionally we need to execute the same test method(s) repeatedly for different data. The typical solution is to copy, paste and adjust (brrr, a certain path to hell) or to use iteration:<br><br><pre><code>
@Test public void acceptAllValidEmails() {
   String emails = {&quot;word@example.com&quot;, &quot;under_score@a.b.cz&quot;, &quot;d.ot@here.org&quot;};
   for (String email: emails) {
      assertTrue(&quot;Should accept &quot; + email, this.filter.accept(email));
   }
}
</code></pre><br><br>The Parametrized runner provides a different way by creating a new instance of the test class for each data set with the data passed to its constructor and available to all test methods, the data itself provided by a static method:<br><br><pre><code>
@RunWith(value = Parameterized.class)
public class FilterTest {<br><br>   private String email;
   private Filter filter = ...;<br><br>   public FilterTest(String email) { this.email = email; } // parametrized constructor<br><br>   @Parameters // the 1st element of each array will be assigned to the 1st constructor parameter etc.
   public static Collection&lt;Object[]&gt; data() {
     return Arrays.asList(new String[][]  { {&quot;word@example.com&quot;}, {&quot;under_score@a.b.cz&quot;}, {&quot;d.ot@here.org&quot;}});
   }<br><br>   @Test public void acceptAllValidEmails() {
      assertTrue(&quot;Should accept &quot; + this.email, this.filter.accept(this.email));
   }
}
</code></pre><br><br>The downside is that it requires quite lot of typing and thus it pays off only sometimes. A limitation is that you cannot apply a set of values to a single test method, which stems from the design of JUnit which expects you to create a different TestCase for each individual fixture, i.e. test data/context (which isn't a bad idea but sometimes it is just too costly to do).
<h4>Alternatives:</h4>
<ul>
	<li>Use the <a href="https://twip.sourceforge.net/howto.html">TwiP runner</a> (available separately) that adds support for parameters to test methods and supplies values from a provided set or randomly from the whole space</li>
	<li>Use the <a href="https://code.google.com/p/junitparams/">JUnitParamsRunner</a> (available separately) that permits more flexible specification of data and to do it on per-method basis</li>
	<li>Use <a href="https://dimitrisli.wordpress.com/2011/02/24/testng-showcase-parameterized-testing/">TestNG</a> :-)</li>
	<li>Use JUnit Theories, see below</li>
</ul>
<h3 id="junit-runners">The Almighty Custom Runners</h3>
You have certainly used an alternative JUnit runner (activated by the @RunWith(&lt;runner class&gt;) annotation), such as Parametrized, MockitoJUnitRunner, or SpringJUnit4ClassRunner. But have you ever considered writing your own?<br><br>Runner is the most powerful and flexible part of the JUnit architecture, it can decide how the test class is instantiated and initialized, what methods are executed and how and in what order etc. You can therefore use it for some neat tricks.<br><br>For example <a href="https://johannesbrodwall.com/">Johannes Brodwall</a> of Steria wrote a custom runner that switches between using a fast in-memory database and the true stand-alone database based on whether the tests run on a developer's machine or on the continuous integration server.<br><br>You'd typically extend the default runner <a href="https://kentbeck.github.com/junit/javadoc/latest/org/junit/runners/BlockJUnit4ClassRunner.html">BlockJUnit4ClassRunner</a> (<a href="https://jarvana.com/jarvana/view/junit/junit/4.10/junit-4.10-sources.jar!/org/junit/runners/BlockJUnit4ClassRunner.java?format=ok">source</a>), as e.g. Mockito and Spring do.
<h3 id="junit-assume">Conditionally Ignore Tests With Assume</h3>
It's useful to be able to @Ignore tests based on a condition, for example to disable database integration tests in environments where the database isn't available. You can use the <a href="https://kentbeck.github.com/junit/javadoc/latest/org/junit/Assume.html"><code>org.junit.Assume</code></a> class for that - if you call any of its <code>assume*</code> methods in a test method and it evaluates to false than the test will be treated is if it were marked with @Ignore. You can ignore all tests by doing this in a @Before method.<br><br>Example: Ignore DB tests if a particular system property is set:<br><br><pre><code>
@Before public void ignoreTestsIfDbTestsDisabled() {
   assumeThat(System.getProperties().containsKey(&quot;tests.db.disable&quot;), is(false));
}
</code></pre><br><br>(Assume is also often used together with Theories to define what values are legal for a particular theory.)
<h3 id="junit-theories">Theories (Experimental!)</h3>
Theories are parametrized test methods that are executed for each possible combination of values of their parameters. The values are defined as fields annotated with @DataPoint or provided by a method annotated with @DataPoints. You use @RunWith(Theories.class) and annotate each test method with @Theory instead of @Test.<br><br>Jens Schauder wrote an <a href="https://blog.schauderhaft.de/2010/01/31/new-feature-of-junit-theories/">example test where each test method (theory) is executed for all possible 2-element combinations of three string values</a>. Jacob Childress uses <a href="https://blogs.oracle.com/jacobc/entry/junit_theories">theories as an alternative to Parametrized by using only a single parameter</a> (thus there are no combinations) and a @DataPoints method. Adam Hepner has written <a href="https://programmers.stackexchange.com/questions/63016/parameterized-tests-when-and-why-do-you-use-them/63135#63135">brief instructions</a> for two parameter method and assume at StackOverflow.<br><br>Contrary to Parametrized, the Theories runner doesn't supply fixed sets of parameters to the test methods but generates all combinations of the available values and runs the tests for each of them, making it easier to test many more cases.<br><br>Notice that you can exclude some combinations/values by using assume (discussed above).
<h2 id="dbunit_express">Testing DAOs with DbUnit Express</h2>
<a href="https://github.com/holyjak/dbunit-express">DbUnit Express</a> is a thin wrapper around <a href="https://www.dbunit.org/">DbUnit</a> (unit testing of code interacting with a database) intended to make starting with DB testing as quick and as easy as possible by introducing convention over configuration, by using an embedded Derby database out of the box (though you can change that), and by providing various utilities for initializing, using, and checking the content of the test database.<br><br>The main feature of DbUnit [Express] is the ability to ensure a clean, defined state of the database before each test by removing and inserting data based on (optionally test class-specific) data set files (XML, csv, Excel, ...). In addition to that it provides access to the database via a Connection or DataSource and utilities for checking the data. The goal of DbUnit Express is to help you to get your first complete DB test ready in 10 minutes in a form that can be easily distributed to other developers (in-memory DB automatically initialized from a provided .ddl file).<br><br>Example:<br><br><pre><code>
public class ExampleJUnit4WithRuleTest {<br><br>	/**
	 * Initialize the test and instruct it to use a custom data set file instead of the default dbunit-test_data_set.xml.
	 * The set up of the test DB will be executed automaticaly thanks to the magic of @Rule.
	 */
    @Rule
    public EmbeddedDbTesterRule testDb = new EmbeddedDbTesterRule(&quot;EmbeddedDbTesterRuleTest-data.xml&quot;);<br><br>    @Test
    public void should_contain_data_supplied_by_dbunit() throws Exception {
    	// 1. TODO: Invoke the database-using class that you want to test, passing to it the test database
    	// via testDb.getDataSource() or testDb.getSqlConnection()
    	// ex.: new MyUserDao(testDb.getDataSource()).save(new User(&quot;Jakub&quot;, &quot;Holy&quot;));<br><br>    	// 2. Verify the results ...
    	// Here we use a checker to check the content of the my_test_table loaded from the EmbeddedDbTesterRuleTest-data.xml
        testDb.createCheckerForSelect(&quot;select some_text from my_test_schema.my_test_table&quot;)
                .withErrorMessage(&quot;No data found =&gt; onSetup wasn't executed as expected&quot;)
                .assertRowCount(1)
                .assertNext(&quot;EmbeddedDbTesterRuleTest data&quot;); // the 1st row
    }
}
</code></pre><br><br>Read more information about set up, usage, and benefits on the <a href="https://github.com/holyjak/dbunit-express">DbUnit Express documentation page</a>.<br><br><strong>Related:</strong>
<ul>
	<li><a href="https://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/jdbc.html#jdbc-embedded-database-support">Spring's Embedded database support</a> - automatically create and load an embedded DB (Derby, H2, HSQL).</li>
</ul>
<h2 id="matchers">Readable Tests with Matchers</h2>
Tests are much better if they clearly express what they test. However JUnit itself doesn't make it possible (perhaps by design?) to express more complex conditions such as checking the content of a list or particular atributes of entities within a list. You can make your tests much more conscise and easier to understand by using matcher libraries such as <a href="https://github.com/alexruiz/fest-assert-2.x/wiki">FEST-Assert</a> (currently at version 2 milestone 7) or <a href="https://hamcrest.org/JavaHamcrest/">Hamcrest</a>. As a bonus, you will get much more descriptive and clear error messages.<br><br><pre><code>
// JUnit
assertNotNull(list);
assertEquals(6, list.size());
assertTrue(list.contains(sam));
assertTrue(list.contains(frodo));
</code></pre><br><br>&nbsp;<br><br><pre><code>
// FEST-Assert
assertThat(list)
 .hasSize(6)
 .contains(frodo, sam);
</code></pre><br><br>&nbsp;<br><br><pre><code>
// Hamcrest
assertThat(list.size(), is(6));
assertThat(list, hasItems(frodo, sam));
</code></pre><br><br>Personally I prefer FEST-Assert because it has a nice fluent API that is intuitive to use and easy to discover via autocompletion in IDE. Hamcrest is older and suffers from issues with generics - earlier or later you run into a case where you have to add same strange casts or convert a generic list to List and then cast it to List&lt;SomethingElse&gt; to get Hamcrest working. It even sometimes happens that the code works with Maven but fails with Eclipse or vice versa.<br><br><a href="https://weblogs.java.net/blog/johnsmart/archive/2008/04/on_the_subtle_u.html">Hamcrest &amp; generics hell</a> by J.F. Smart and <a href="https://stackoverflow.com/search?q=hamcrest+generics">at StackOverflow</a> (e.g. explicit <a href="https://stackoverflow.com/questions/9707531/hamcrest-generics-hell-2-iterablewithsize-gives-errror-is-not-applicable-for">cast to collection element type</a>).<br><br>Learn some <a href="https://github.com/alexruiz/fest-assert-2.x/wiki/Tips-and-tricks">great tips and tricks for Fest-Assert</a> such as <a href="https://github.com/alexruiz/fest-assert-2.x/wiki/Tips-and-tricks#wiki-extracted-properties-assertion">extracting a particular property</a> from beans in a collection or <a href="https://github.com/alexruiz/fest-assert-2.x/wiki/Tips-and-tricks#wiki-filters">retaining only objects matching</a> a condition.
<h2 id="groovy">Attaining Eternal Bliss with Groovy</h2>
The happiest moment in my testing life was when I realized that I can use one language - typically Java - for the production code and another, much more productive one for tests - Groovy.<br><br>Why to use Groovy?
<ul>
	<li>It's syntax is 99.9% of Java + 1000% more =&gt; you can copy &amp; paste to Groovy (and back), you can learn the productive features of Groovy gradually</li>
	<li>Powerful, concise, productive</li>
	<li>It has literals for lists, maps, regular expressions etc.</li>
	<li>Groovy adds many extremely useful and poweful methods to JDK classes that skyrocket your productivity:
<ul>
	<li><a href="https://groovy.codehaus.org/groovy-jdk/java/util/Collection.html">Collections</a>: filter, map, ...</li>
	<li><a href="https://groovy.codehaus.org/groovy-jdk/java/io/File.html">File</a>: getText(), ...</li>
</ul>
</li>
	<li>A single powerful assert ("assert &lt;expressions&gt;") providing very clear failure messages about all parts of the expression involved. With Groovy you generally don't need to learn and use a matcher library</li>
	<li>Closures now &amp; here :-)</li>
	<li>Multi-line strings and strings with variable replacement ("text $replacedWithVariableValue text")</li>
	<li>Useful libraries such as <a href="https://code.google.com/p/spock/">Spock</a></li>
</ul>
Read more about how Groovy can make you much more productive and happy at <a href="/2011/10/18/only-a-masochist-would-write-unit-tests-in-java-be-smarter-use-groovy-or-jruby-or-st-else-similar/">Only a Masochist Would Write Unit Tests in Java. Be Smarter, Use Groovy (or Scala…)</a>.<br><br><strong>Alternatives</strong>: <a href="https://www.scalatest.org/">ScalaTest</a> if you know Scala - it also integrates very well with JUnit and production code in Java
<h2 id="byteman">Fault Injection with JBoss Byteman</h2>
Byteman is pure magic. It can change behavior of any method on the call stack executed during a test. And you don't need to have access to the object owning the method. The <a href="/2011/09/07/practical-introduction-into-code-injection-with-aspectj-javassist-and-java-proxy/">behavior is injected</a> into the target method before a test and removed when it finishes (contrary to most other <abbr title="Aspect-Oriented Programming">AOP</abbr> tools that change code at load time and leave it so).<br><br>There are two primary uses of Byteman:
<ol>
	<li>Testing of failure handling by "injecting" failures, usually in the form of throwing an exception such as SocketTimeoutException or FileNotFoundException, into methods somewhere down the call stack</li>
	<li>Testing of legacy code - Byteman enables you to shortcut/replace dependencies that would otherwise prevent you from testing a class (e.g. a web service client instantiated internally in the class)</li>
</ol>
Ex.:<br><br><pre><code>
@RunWith(BMUnitRunner.class)
public class MyMainTest {<br><br>	@Test(expected = IllegalStateException.class)
	@BMRule(name=&quot;throw IllegalStateException from the helper class&quot;,
			targetClass = &quot;MainsHelper&quot;,
			targetMethod = &quot;sayHello&quot;,
			action = &quot;throw new java.lang.IllegalStateException(\&quot;Exception injected by Byteman\&quot;)&quot;)
	public void testSayHello() {
		new MyMain().sayHello();
		fail(&quot;sayHello should have failed due to Byteman injecting an exception into sayHello&quot;);
	}
}
</code></pre><br><br>Read more at <a href="/2012/02/25/cool-tools-fault-injection-into-unit-tests-with-jboss-byteman-easier-testing-of-error-handling/">Cool Tools: Fault Injection into Unit Tests with JBoss Byteman – Easier Testing of Error Handling</a> and get the <a href="https://github.com/holyjak/presentations/tree/master/UnitTestingSwissKnife/ExampleByteman">complete ExampleByteman project from GitHub</a>.<br><br>Beware that with great power comes also great responsibility. You should only use Byteman as the last resort since such tests are harder to understand and more brittle.<br><br><strong>Alternative</strong>: <a href="https://code.google.com/p/jmockit/">JMockit</a> (might be easier to use since you only write code as Java code and not as text as in the case of Byteman)<br><br><strong>Update</strong>: Brett L. Schuchert argues very well in <a href="https://martinfowler.com/articles/modernMockingTools.html">Modern Mocking Tools and Black Magic - An example of power corrupting</a> why using such black magic (<a href="https://code.google.com/p/jmockit/">JMockit</a> in his case) should be avoided as only treating the symtomps in favor of actually fixing the code.
<h2 id="other">Other Stuff to Know</h2>
<h3 id="arquillian">Java EE Integration Testing With JBoss Arquillian</h3>
Java EE in the version 5/6 incarnations has become a lean yet powerful platform worth considering. If you go this way and delegate cross-cutting concerns to the container (in the form of interceptors, dependency injection, eventing etc.) then you will also need to verify that these container-managed pieces are assembled correctly and work as expected.<br><br><a href="https://www.jboss.org/arquillian.html">JBoss Arquillian</a> is the best tool for this job - it let you define what classes and resources to include in a test and runs it on an embedded server (Glassfish, JBoss, ...). If you use Java EE then you absolutely should have a look at Arquillian.
<h3 id="infinitest">Continuous Integration In Your IDE With Infinitest</h3>
<a href="https://infinitest.github.com/">Infinitest</a> (<a href="https://infinitest.github.com/user_guide.html">User Guide</a>) is my absolutely favorite Eclipse/IntelliJ plugin. It provides you with immediate feedback whenever you change your production or test code by running the tests affected by the change and reporting their failures directly in the source code as markers.<br><br>If you have to run your tests manually then you will tend to run them less often, after larger changes. With Infinitest you learn about a failure that you introduced soon after having done so, making it much easier to understand what's wrong and to fix it.<br><br>Infinitest can be easily configured to skip some tests (typically slow/integration tests) and set JVM arguments for the tests and supports both JUnit and TestNG. It isn't completely perfect but it does a great job anyway. Highly recommended.
<h3>And Even More...</h3>
<a href="/wiki/development/testing/">See my wiki page on Testing for even more tools and libraries</a>.
<h2 id="code">The Code</h2>
The code is available in my <a href="https://github.com/holyjak/presentations/tree/master/UnitTestingSwissKnife/">UnitTestingSwissKnife GitHub repository</a>.<br><br>PS: Feedback is welcomed.
++++
