{:title "Help, My Code Isn't Testable! Do I Need to Fix the Design?",
 :date "2012-09-09",
 :layout :post,
 :tags ["design" "legacy" "quality"],
 :tags-orig ["CleanCode" "design" "legacy" "testability"],
 :categories ["Testing"],
 :extra-css
 #{"https://github.githubassets.com/assets/gist-embed-123720f37c57ce9a8f29de081c38ed61.css"}
}

++++
Our code is often untestable because there is no easy way to "sense<sup>1</sup>" the results in a good way and because the code depends on external data/functionality without making it possible to replace or modify these during a test (it's missing a seam<sup>2</sup>, i.e. a place where the <em>behavior</em> of the code can be changed without modifying the code itself). In such cases the best thing to do is to fix the design to make the code testable instead of trying to write a brittle and slow integration test. Let's see an example of such code and how to fix it.<br><br><!--more-->
<h2>Example Spaghetti Design</h2>
The following code is a REST-like service that fetches a list of files from the Amazon's Simple Storage Service (S3) and displays them as a list of links to the contents of the files:<div id="gist3683899" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-s3filesresource-java" class="file">
    

  <div itemprop="text" class="Box-body p-0 blob-wrapper data type-java ">
      
<table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-s3filesresource-java-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-s3filesresource-java-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">S3FilesResource</span> {</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-s3filesresource-java-LC2" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-s3filesresource-java-LC3" class="blob-code blob-code-inner js-file-line">    <span class="pl-smi">AmazonS3Client</span> amazonS3Client;</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-s3filesresource-java-LC4" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="file-s3filesresource-java-LC5" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> ...</span></td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="file-s3filesresource-java-LC6" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="file-s3filesresource-java-LC7" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">@Path</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>/files<span class="pl-pds">&quot;</span></span>)</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="file-s3filesresource-java-LC8" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">listS3Files</span>() {</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="file-s3filesresource-java-LC9" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">StringBuilder</span> html <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">StringBuilder</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&lt;html&gt;&lt;body&gt;<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="file-s3filesresource-java-LC10" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">List&lt;<span class="pl-smi">S3ObjectSummary</span>&gt;</span> files <span class="pl-k">=</span> <span class="pl-c1">this</span><span class="pl-k">.</span>amazonS3Client<span class="pl-k">.</span>listObjects(<span class="pl-s"><span class="pl-pds">&quot;</span>myBucket<span class="pl-pds">&quot;</span></span>)<span class="pl-k">.</span>getObjectSummaries();</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="file-s3filesresource-java-LC11" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-smi">S3ObjectSummary</span> file <span class="pl-k">:</span> files) {</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="file-s3filesresource-java-LC12" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">String</span> filePath <span class="pl-k">=</span> file<span class="pl-k">.</span>getKey();</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="file-s3filesresource-java-LC13" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span>filePath<span class="pl-k">.</span>endsWith(<span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>)) { <span class="pl-c"><span class="pl-c">//</span> exclude directories</span></td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="file-s3filesresource-java-LC14" class="blob-code blob-code-inner js-file-line">                html<span class="pl-k">.</span>append(<span class="pl-s"><span class="pl-pds">&quot;</span>&lt;a href=&#39;/content?fileName=<span class="pl-pds">&quot;</span></span>)<span class="pl-k">.</span>append(filePath)<span class="pl-k">.</span>append(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;&gt;<span class="pl-pds">&quot;</span></span>)<span class="pl-k">.</span>append(filePath)</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="file-s3filesresource-java-LC15" class="blob-code blob-code-inner js-file-line">                    .append(<span class="pl-s"><span class="pl-pds">&quot;</span>&lt;/a&gt;&lt;br&gt;<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="file-s3filesresource-java-LC16" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="file-s3filesresource-java-LC17" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="file-s3filesresource-java-LC18" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> html<span class="pl-k">.</span>append(<span class="pl-s"><span class="pl-pds">&quot;</span>&lt;/body&gt;&lt;/html&gt;<span class="pl-pds">&quot;</span></span>)<span class="pl-k">.</span>toString();</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="file-s3filesresource-java-LC19" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="file-s3filesresource-java-LC20" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="file-s3filesresource-java-LC21" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">@Path</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>/content<span class="pl-pds">&quot;</span></span>)</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="file-s3filesresource-java-LC22" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">getContent</span>(<span class="pl-k">@QueryParam</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>fileName<span class="pl-pds">&quot;</span></span>) <span class="pl-smi">String</span> <span class="pl-v">fileName</span>) {</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="file-s3filesresource-java-LC23" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-smi">UnsupportedOperationException</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Not implemented yet<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L24" class="blob-num js-line-number" data-line-number="24"></td>
        <td id="file-s3filesresource-java-LC24" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L25" class="blob-num js-line-number" data-line-number="25"></td>
        <td id="file-s3filesresource-java-LC25" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L26" class="blob-num js-line-number" data-line-number="26"></td>
        <td id="file-s3filesresource-java-LC26" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
</table>


  </div>

  </div>
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/holyjak/3683899/raw/8d0aaba4fe58770e093aca4a1d2ef554f8374cae/S3FilesResource.java" style="float:right">view raw</a>
        <a href="https://gist.github.com/holyjak/3683899#file-s3filesresource-java">S3FilesResource.java</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>



<h3>Why is the code difficult to test?</h3>
<ol>
	<li>There is no seam that would enable us to bypass the external dependency on S3 and thus we cannot influence what data is passed to the method and cannot test it easily with different values. Moreover we depend on network connection and correct state in the S3 service to be able to run the code.</li>
	<li>It's difficult to sense the result of the method because it mixes the data with their presentation. It would be much easier to have direct access to the data to verify that directories are excluded and that the expected file names are displayed. Moreover the core logic is much less likely to change than the HTML presentation but changing the presentation will break our tests even though the logic won't change.</li>
</ol>
<h3>What can we do to improve it?</h3>
We first test the code as-is to be sure that our refactoring doesn't break anything (the test will be brittle and ugly but it is just temporary), refactor it to break the external dependency and split the data and presentation, and finally re-write the tests.<br><br>We start by writing a simple test:<div id="gist3684047" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-s3filesresourcetest-java" class="file">
    

  <div itemprop="text" class="Box-body p-0 blob-wrapper data type-java ">
      
<table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-s3filesresourcetest-java-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-s3filesresourcetest-java-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">S3FilesResourceTest</span> {</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-s3filesresourcetest-java-LC2" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-s3filesresourcetest-java-LC3" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">@Test</span></td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-s3filesresourcetest-java-LC4" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">listFilesButNotDirectoriesAsHtml</span>() <span class="pl-k">throws</span> <span class="pl-smi">Exception</span> {</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="file-s3filesresourcetest-java-LC5" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">S3FilesResource</span> resource <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">S3FilesResource</span>(<span class="pl-c"><span class="pl-c">/*</span> pass AWS credentials ... <span class="pl-c">*/</span></span>);</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="file-s3filesresourcetest-java-LC6" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">String</span> html <span class="pl-k">=</span> resource<span class="pl-k">.</span>listS3Files();</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="file-s3filesresourcetest-java-LC7" class="blob-code blob-code-inner js-file-line">        assertThat(html)</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="file-s3filesresourcetest-java-LC8" class="blob-code blob-code-inner js-file-line">            .contains(<span class="pl-s"><span class="pl-pds">&quot;</span>&lt;a href=&#39;/content?fileName=/dir/file1.txt&#39;&gt;/dir/file1.txt&lt;/a&gt;<span class="pl-pds">&quot;</span></span>)</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="file-s3filesresourcetest-java-LC9" class="blob-code blob-code-inner js-file-line">            .contains(<span class="pl-s"><span class="pl-pds">&quot;</span>&lt;a href=&#39;/content?fileName=/dir/another.txt&#39;&gt;/dir/another.txt&lt;/a&gt;<span class="pl-pds">&quot;</span></span>)</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="file-s3filesresourcetest-java-LC10" class="blob-code blob-code-inner js-file-line">            .doesNotContain(<span class="pl-s"><span class="pl-pds">&quot;</span>/dir/&lt;/a&gt;<span class="pl-pds">&quot;</span></span>); <span class="pl-c"><span class="pl-c">//</span> directories should be excluded</span></td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="file-s3filesresourcetest-java-LC11" class="blob-code blob-code-inner js-file-line">        assertThat(html<span class="pl-k">.</span>split(quote(<span class="pl-s"><span class="pl-pds">&quot;</span>&lt;/a&gt;<span class="pl-pds">&quot;</span></span>)))<span class="pl-k">.</span>hasSize(<span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">1</span>); <span class="pl-c"><span class="pl-c">//</span> two links only</span></td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="file-s3filesresourcetest-java-LC12" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="file-s3filesresourcetest-java-LC13" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="file-s3filesresourcetest-java-LC14" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
</table>


  </div>

  </div>
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/holyjak/3684047/raw/604fb0b2e17fc1fc28b3b771b9199f7dc2c0e5d5/S3FilesResourceTest.java" style="float:right">view raw</a>
        <a href="https://gist.github.com/holyjak/3684047#file-s3filesresourcetest-java">S3FilesResourceTest.java</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>



<h2>Refactoring the Design</h2>
This is the refactored design, where I have decoupled the code from S3 by introducing a Facade/Adapter and split the data processing and rendering:<div id="gist3684066" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-s3facade-java" class="file">
    

  <div itemprop="text" class="Box-body p-0 blob-wrapper data type-java ">
      
<table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-s3facade-java-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-s3facade-java-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public</span> <span class="pl-k">interface</span> <span class="pl-en">S3Facade</span> {</td>
      </tr>
      <tr>
        <td id="file-s3facade-java-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-s3facade-java-LC2" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">List&lt;<span class="pl-smi">S3File</span>&gt;</span> <span class="pl-en">listObjects</span>(<span class="pl-smi">String</span> <span class="pl-v">bucketName</span>);</td>
      </tr>
      <tr>
        <td id="file-s3facade-java-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-s3facade-java-LC3" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
</table>


  </div>

  </div>
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/holyjak/3684066/raw/fba5a9abe6a9455afcc5658aee3f8ed9abfb04ed/S3Facade.java" style="float:right">view raw</a>
        <a href="https://gist.github.com/holyjak/3684066#file-s3facade-java">S3Facade.java</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-s3facadeimpl-java" class="file">
    

  <div itemprop="text" class="Box-body p-0 blob-wrapper data type-java ">
      
<table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-s3facadeimpl-java-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-s3facadeimpl-java-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">S3FacadeImpl</span> <span class="pl-k">implements</span> <span class="pl-e">S3Facade</span> {</td>
      </tr>
      <tr>
        <td id="file-s3facadeimpl-java-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-s3facadeimpl-java-LC2" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3facadeimpl-java-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-s3facadeimpl-java-LC3" class="blob-code blob-code-inner js-file-line">    <span class="pl-smi">AmazonS3Client</span> amazonS3Client;</td>
      </tr>
      <tr>
        <td id="file-s3facadeimpl-java-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-s3facadeimpl-java-LC4" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3facadeimpl-java-L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="file-s3facadeimpl-java-LC5" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">@Override</span></td>
      </tr>
      <tr>
        <td id="file-s3facadeimpl-java-L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="file-s3facadeimpl-java-LC6" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">public</span> <span class="pl-k">List&lt;<span class="pl-smi">S3File</span>&gt;</span> <span class="pl-en">listObjects</span>(<span class="pl-smi">String</span> <span class="pl-v">bucketName</span>) {</td>
      </tr>
      <tr>
        <td id="file-s3facadeimpl-java-L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="file-s3facadeimpl-java-LC7" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">List&lt;<span class="pl-smi">S3File</span>&gt;</span> result <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-k">ArrayList&lt;<span class="pl-smi">S3File</span>&gt;</span>();</td>
      </tr>
      <tr>
        <td id="file-s3facadeimpl-java-L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="file-s3facadeimpl-java-LC8" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">List&lt;<span class="pl-smi">S3ObjectSummary</span>&gt;</span> files <span class="pl-k">=</span> <span class="pl-c1">this</span><span class="pl-k">.</span>amazonS3Client<span class="pl-k">.</span>listObjects(bucketName)<span class="pl-k">.</span>getObjectSummaries();</td>
      </tr>
      <tr>
        <td id="file-s3facadeimpl-java-L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="file-s3facadeimpl-java-LC9" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-smi">S3ObjectSummary</span> file <span class="pl-k">:</span> files) {</td>
      </tr>
      <tr>
        <td id="file-s3facadeimpl-java-L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="file-s3facadeimpl-java-LC10" class="blob-code blob-code-inner js-file-line">            result<span class="pl-k">.</span>add(<span class="pl-k">new</span> <span class="pl-smi">S3File</span>(file<span class="pl-k">.</span>getKey(), file<span class="pl-k">.</span>getKey())); <span class="pl-c"><span class="pl-c">//</span> later we can use st. else for the display name</span></td>
      </tr>
      <tr>
        <td id="file-s3facadeimpl-java-L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="file-s3facadeimpl-java-LC11" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file-s3facadeimpl-java-L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="file-s3facadeimpl-java-LC12" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> result;</td>
      </tr>
      <tr>
        <td id="file-s3facadeimpl-java-L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="file-s3facadeimpl-java-LC13" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file-s3facadeimpl-java-L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="file-s3facadeimpl-java-LC14" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3facadeimpl-java-L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="file-s3facadeimpl-java-LC15" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
</table>


  </div>

  </div>
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/holyjak/3684066/raw/fba5a9abe6a9455afcc5658aee3f8ed9abfb04ed/S3FacadeImpl.java" style="float:right">view raw</a>
        <a href="https://gist.github.com/holyjak/3684066#file-s3facadeimpl-java">S3FacadeImpl.java</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-s3file-java" class="file">
    

  <div itemprop="text" class="Box-body p-0 blob-wrapper data type-java ">
      
<table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-s3file-java-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-s3file-java-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">S3File</span> {</td>
      </tr>
      <tr>
        <td id="file-s3file-java-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-s3file-java-LC2" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">public</span> <span class="pl-k">final</span> <span class="pl-smi">String</span> displayName;</td>
      </tr>
      <tr>
        <td id="file-s3file-java-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-s3file-java-LC3" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">public</span> <span class="pl-k">final</span> <span class="pl-smi">String</span> path;</td>
      </tr>
      <tr>
        <td id="file-s3file-java-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-s3file-java-LC4" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3file-java-L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="file-s3file-java-LC5" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">public</span> <span class="pl-en">S3File</span>(<span class="pl-smi">String</span> <span class="pl-v">displayName</span>, <span class="pl-smi">String</span> <span class="pl-v">path</span>) {</td>
      </tr>
      <tr>
        <td id="file-s3file-java-L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="file-s3file-java-LC6" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">this</span><span class="pl-k">.</span>displayName <span class="pl-k">=</span> displayName;</td>
      </tr>
      <tr>
        <td id="file-s3file-java-L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="file-s3file-java-LC7" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">this</span><span class="pl-k">.</span>path <span class="pl-k">=</span> path;</td>
      </tr>
      <tr>
        <td id="file-s3file-java-L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="file-s3file-java-LC8" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file-s3file-java-L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="file-s3file-java-LC9" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
</table>


  </div>

  </div>
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/holyjak/3684066/raw/fba5a9abe6a9455afcc5658aee3f8ed9abfb04ed/S3File.java" style="float:right">view raw</a>
        <a href="https://gist.github.com/holyjak/3684066#file-s3file-java">S3File.java</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-s3filesresource-java" class="file">
    

  <div itemprop="text" class="Box-body p-0 blob-wrapper data type-java ">
      
<table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-s3filesresource-java-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-s3filesresource-java-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">S3FilesResource</span> {</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-s3filesresource-java-LC2" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-s3filesresource-java-LC3" class="blob-code blob-code-inner js-file-line">    <span class="pl-smi">S3Facade</span> amazonS3Client <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">S3FacadeImpl</span>();</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-s3filesresource-java-LC4" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="file-s3filesresource-java-LC5" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> ...</span></td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="file-s3filesresource-java-LC6" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="file-s3filesresource-java-LC7" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">@Path</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>/files<span class="pl-pds">&quot;</span></span>)</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="file-s3filesresource-java-LC8" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">listS3Files</span>() {</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="file-s3filesresource-java-LC9" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">StringBuilder</span> html <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">StringBuilder</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&lt;html&gt;&lt;body&gt;<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="file-s3filesresource-java-LC10" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">List&lt;<span class="pl-smi">S3File</span>&gt;</span> files <span class="pl-k">=</span> fetchS3Files();</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="file-s3filesresource-java-LC11" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-smi">S3File</span> file <span class="pl-k">:</span> files) {</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="file-s3filesresource-java-LC12" class="blob-code blob-code-inner js-file-line">            html<span class="pl-k">.</span>append(<span class="pl-s"><span class="pl-pds">&quot;</span>&lt;a href=&#39;/content?fileName=<span class="pl-pds">&quot;</span></span>)<span class="pl-k">.</span>append(file<span class="pl-k">.</span>path)<span class="pl-k">.</span>append(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;&gt;<span class="pl-pds">&quot;</span></span>)<span class="pl-k">.</span>append(file<span class="pl-k">.</span>displayName)</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="file-s3filesresource-java-LC13" class="blob-code blob-code-inner js-file-line">                    .append(<span class="pl-s"><span class="pl-pds">&quot;</span>&lt;/a&gt;&lt;br&gt;<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="file-s3filesresource-java-LC14" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="file-s3filesresource-java-LC15" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> html<span class="pl-k">.</span>append(<span class="pl-s"><span class="pl-pds">&quot;</span>&lt;/body&gt;&lt;/html&gt;<span class="pl-pds">&quot;</span></span>)<span class="pl-k">.</span>toString();</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="file-s3filesresource-java-LC16" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="file-s3filesresource-java-LC17" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="file-s3filesresource-java-LC18" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">List&lt;<span class="pl-smi">S3File</span>&gt;</span> <span class="pl-en">fetchS3Files</span>() {</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="file-s3filesresource-java-LC19" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">List&lt;<span class="pl-smi">S3File</span>&gt;</span> files <span class="pl-k">=</span> <span class="pl-c1">this</span><span class="pl-k">.</span>amazonS3Client<span class="pl-k">.</span>listObjects(<span class="pl-s"><span class="pl-pds">&quot;</span>myBucket<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="file-s3filesresource-java-LC20" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">List&lt;<span class="pl-smi">S3File</span>&gt;</span> result <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-k">ArrayList&lt;<span class="pl-smi">S3File</span>&gt;</span>(files<span class="pl-k">.</span>size());</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="file-s3filesresource-java-LC21" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-smi">S3File</span> file <span class="pl-k">:</span> files) {</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="file-s3filesresource-java-LC22" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span>file<span class="pl-k">.</span>path<span class="pl-k">.</span>endsWith(<span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>)) {</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="file-s3filesresource-java-LC23" class="blob-code blob-code-inner js-file-line">                result<span class="pl-k">.</span>add(file);</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L24" class="blob-num js-line-number" data-line-number="24"></td>
        <td id="file-s3filesresource-java-LC24" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L25" class="blob-num js-line-number" data-line-number="25"></td>
        <td id="file-s3filesresource-java-LC25" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L26" class="blob-num js-line-number" data-line-number="26"></td>
        <td id="file-s3filesresource-java-LC26" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> result;</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L27" class="blob-num js-line-number" data-line-number="27"></td>
        <td id="file-s3filesresource-java-LC27" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L28" class="blob-num js-line-number" data-line-number="28"></td>
        <td id="file-s3filesresource-java-LC28" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L29" class="blob-num js-line-number" data-line-number="29"></td>
        <td id="file-s3filesresource-java-LC29" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">@Path</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>/content<span class="pl-pds">&quot;</span></span>)</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L30" class="blob-num js-line-number" data-line-number="30"></td>
        <td id="file-s3filesresource-java-LC30" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">getContent</span>(<span class="pl-k">@QueryParam</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>fileName<span class="pl-pds">&quot;</span></span>) <span class="pl-smi">String</span> <span class="pl-v">fileName</span>) {</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L31" class="blob-num js-line-number" data-line-number="31"></td>
        <td id="file-s3filesresource-java-LC31" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-smi">UnsupportedOperationException</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Not implemented yet<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L32" class="blob-num js-line-number" data-line-number="32"></td>
        <td id="file-s3filesresource-java-LC32" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L33" class="blob-num js-line-number" data-line-number="33"></td>
        <td id="file-s3filesresource-java-LC33" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3filesresource-java-L34" class="blob-num js-line-number" data-line-number="34"></td>
        <td id="file-s3filesresource-java-LC34" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
</table>


  </div>

  </div>
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/holyjak/3684066/raw/fba5a9abe6a9455afcc5658aee3f8ed9abfb04ed/S3FilesResource.java" style="float:right">view raw</a>
        <a href="https://gist.github.com/holyjak/3684066#file-s3filesresource-java">S3FilesResource.java</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>
<br><br>In practice I'd consider using the built-in conversion capabilities of Jersey (with a custom <a href="https://jersey.java.net/nonav/apidocs/latest/jersey/javax/ws/rs/ext/MessageBodyWriter.html">MessageBodyWriter</a> for HTML) and returning <code>List&lt;S3File&gt;</code> from <code>listS3Files</code>.<br><br>This is what the test looks like now:<div id="gist3684150" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-s3filesresourcetest-java" class="file">
    

  <div itemprop="text" class="Box-body p-0 blob-wrapper data type-java ">
      
<table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-s3filesresourcetest-java-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-s3filesresourcetest-java-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">S3FilesResourceTest</span> {</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-s3filesresourcetest-java-LC2" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-s3filesresourcetest-java-LC3" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">private</span> <span class="pl-k">static</span> <span class="pl-k">class</span> <span class="pl-en">FakeS3Facade</span> <span class="pl-k">implements</span> <span class="pl-e">S3Facade</span> {</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-s3filesresourcetest-java-LC4" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">List&lt;<span class="pl-smi">S3File</span>&gt;</span> fileList;</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="file-s3filesresourcetest-java-LC5" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="file-s3filesresourcetest-java-LC6" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">public</span> <span class="pl-k">List&lt;<span class="pl-smi">S3File</span>&gt;</span> <span class="pl-en">listObjects</span>(<span class="pl-smi">String</span> <span class="pl-v">bucketName</span>) {</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="file-s3filesresourcetest-java-LC7" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> fileList;</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="file-s3filesresourcetest-java-LC8" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="file-s3filesresourcetest-java-LC9" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="file-s3filesresourcetest-java-LC10" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="file-s3filesresourcetest-java-LC11" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">private</span> <span class="pl-smi">S3FilesResource</span> resource;</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="file-s3filesresourcetest-java-LC12" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">private</span> <span class="pl-smi">FakeS3Facade</span> fakeS3;</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="file-s3filesresourcetest-java-LC13" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="file-s3filesresourcetest-java-LC14" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">@Before</span></td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="file-s3filesresourcetest-java-LC15" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">setUp</span>() <span class="pl-k">throws</span> <span class="pl-smi">Exception</span> {</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="file-s3filesresourcetest-java-LC16" class="blob-code blob-code-inner js-file-line">        fakeS3 <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">FakeS3Facade</span>();</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="file-s3filesresourcetest-java-LC17" class="blob-code blob-code-inner js-file-line">        resource <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">S3FilesResource</span>();</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="file-s3filesresourcetest-java-LC18" class="blob-code blob-code-inner js-file-line">        resource<span class="pl-k">.</span>amazonS3Client <span class="pl-k">=</span> fakeS3;</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="file-s3filesresourcetest-java-LC19" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="file-s3filesresourcetest-java-LC20" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="file-s3filesresourcetest-java-LC21" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">@Test</span></td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="file-s3filesresourcetest-java-LC22" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">excludeDirectories</span>() <span class="pl-k">throws</span> <span class="pl-smi">Exception</span> {</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="file-s3filesresourcetest-java-LC23" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">S3File</span> s3File <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">S3File</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>file<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>/file.xx<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L24" class="blob-num js-line-number" data-line-number="24"></td>
        <td id="file-s3filesresourcetest-java-LC24" class="blob-code blob-code-inner js-file-line">        fakeS3<span class="pl-k">.</span>fileList <span class="pl-k">=</span> asList(<span class="pl-k">new</span> <span class="pl-smi">S3File</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>dir<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>/my/dir/<span class="pl-pds">&quot;</span></span>), s3File);</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L25" class="blob-num js-line-number" data-line-number="25"></td>
        <td id="file-s3filesresourcetest-java-LC25" class="blob-code blob-code-inner js-file-line">        assertThat(resource<span class="pl-k">.</span>fetchS3Files())</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L26" class="blob-num js-line-number" data-line-number="26"></td>
        <td id="file-s3filesresourcetest-java-LC26" class="blob-code blob-code-inner js-file-line">            .hasSize(<span class="pl-c1">1</span>)</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L27" class="blob-num js-line-number" data-line-number="27"></td>
        <td id="file-s3filesresourcetest-java-LC27" class="blob-code blob-code-inner js-file-line">            .contains(s3File);</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L28" class="blob-num js-line-number" data-line-number="28"></td>
        <td id="file-s3filesresourcetest-java-LC28" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L29" class="blob-num js-line-number" data-line-number="29"></td>
        <td id="file-s3filesresourcetest-java-LC29" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L30" class="blob-num js-line-number" data-line-number="30"></td>
        <td id="file-s3filesresourcetest-java-LC30" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>* Simplest possible test of listS3Files <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L31" class="blob-num js-line-number" data-line-number="31"></td>
        <td id="file-s3filesresourcetest-java-LC31" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">@Test</span></td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L32" class="blob-num js-line-number" data-line-number="32"></td>
        <td id="file-s3filesresourcetest-java-LC32" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">renderToHtml</span>() <span class="pl-k">throws</span> <span class="pl-smi">Exception</span> {</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L33" class="blob-num js-line-number" data-line-number="33"></td>
        <td id="file-s3filesresourcetest-java-LC33" class="blob-code blob-code-inner js-file-line">        fakeS3<span class="pl-k">.</span>fileList <span class="pl-k">=</span> asList(<span class="pl-k">new</span> <span class="pl-smi">S3File</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>file<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>/file.xx<span class="pl-pds">&quot;</span></span>));</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L34" class="blob-num js-line-number" data-line-number="34"></td>
        <td id="file-s3filesresourcetest-java-LC34" class="blob-code blob-code-inner js-file-line">        assertThat(resource<span class="pl-k">.</span>listS3Files())</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L35" class="blob-num js-line-number" data-line-number="35"></td>
        <td id="file-s3filesresourcetest-java-LC35" class="blob-code blob-code-inner js-file-line">            .contains(<span class="pl-s"><span class="pl-pds">&quot;</span>/file.xx<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L36" class="blob-num js-line-number" data-line-number="36"></td>
        <td id="file-s3filesresourcetest-java-LC36" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file-s3filesresourcetest-java-L37" class="blob-num js-line-number" data-line-number="37"></td>
        <td id="file-s3filesresourcetest-java-LC37" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
</table>


  </div>

  </div>
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/holyjak/3684150/raw/8779bdec8879b9ab09a04276b8341decfe5f60db/S3FilesResourceTest.java" style="float:right">view raw</a>
        <a href="https://gist.github.com/holyjak/3684150#file-s3filesresourcetest-java">S3FilesResourceTest.java</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>
<br><br>Next I'd implement an integration test for the REST service but still using the FakeS3Facade to verify that the service works and is reachable at the expected URL and that the link to a file content works as well. I would also write an integration test for the real S3 client (through S3FilesResource but without running it on a server) that would be executed only on-demand to verify that our S3 credentials are correct and that we can reach S3. (I don't want to execute it regularly as depending on an external service is slow and brittle.)<br><br><em>Disclaimer: The service above isn't a good example of proper REST usage and I have taken couple of shortucts that do not represent good code for the sake of brevity.</em><br><br>----<br><br><sup>1</sup>) Introduced by Michael Feathers in <a href="https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052">Working Effectively with Legacy Code</a>, page 20-21
<sup>2</sup>) ibid, page 31
++++
