[
 {
  "title": "About",
  "published": "2010-04-22 18:42:35",
  "postType": "page",
  "slug": "/about/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "<img style=\"margin:5px;\" src=\"https://lh5.googleusercontent.com/-MWInauot6bc/Tlp7fibsn7I/AAAAAAAACK0/p9hAB-x7XJo/s800/foto-jakub-at-iterate.jpg\" alt=\"Me in 2011\" />I'm a full stack developer from the JVM land since 2005, and occasionally a project manager, working currently with <a href=\"https://teliasonera.no/\">TeliaSonera Norway</a>, in Oslo, Norway. Until 2015 I was a member of the great <a href=\"https://www.iterate.no/\">Iterate AS</a> family and for a couple of years before that I had also the pleasure to work with IBM Austria and <a href=\"https://www.ibacz.eu/-English-\">IBA CZ</a>. During the years I've worked on large and long-term international projects as well as small local ones and both on new and maintenance projects in various positions.<br><br>I enjoy working with people, sharing knowledge, being creative and exploring new stuff. I don't like tedious, repetitive work (though it really is sometimes necessary) and am thus a big fan of automation and tools that can take it over. Having maintained a lot of old code, I really appreciate high-quality, well-written code and good and automated unit tests. I am especially interested in developer productivity, DevOps, testing, and performance.<br><br>I'm also very fond of the lean thinking and agile principles, especially feedback-based development, focus on creating true value ASAP, and respect for people. I am fascinated by post-taylorist organizations that value autonomy and human needs over command &amp; control, such as Zappos. The longer I work in IT, the more I see software development as a human, not a technical problem.<br><br>I have recently fallen in love with Clojure[Script] and functional programming and am exploring <a href=\"https://www.reactivemanifesto.org/\">reactive programming</a>. I've summarized crucial aspects of my approach to development in <a href=\"/2014/03/17/frustration-driven-development-towards-devops-lean-clojure/\" rel=\"bookmark\">Frustration-Driven Development – Towards DevOps, Lean, Clojure</a>.<br><br>You can learn more at my <a href=\"https://cz.linkedin.com/in/jakubholydotnet\">LinkedIn profile</a>.<br><br><h2>Bio &amp; personal</h2><br><br>I was born in 1980. For the second time I was born on November 17, 1989, when the communist regime of Czechoslovakia begun to collapse. For the third time I was born in august 2005, when a thin branch, invisible in the total darkness, saved me from a fast and fatal fall. I studied software engineering at the Czech Technical University and humanities at the Charles University. I also spent two enriching terms at the Linköpings University in Sweden. After the studies I ended up in the company IBA CZ, which turned out to be a warm and friendly place, full of great - nice and smart - people, with challenging tasks and a lot of flexibility. In 2011 I've moved to Norway to broaden my views by living in another country and culture. I'm married and live currently in Oslo, Norway (my <a href=\"https://jakubholy.net/en/cesko.html\">Czech</a> home town has been <a title=\"pictures of the lovely city of Prague\" href=\"https://picasaweb.google.com/lh/view?q=prague&amp;psc=G&amp;filter=1#\">Prague</a> in the previous years).<br><br>In my free time I like to hike, practice yoga, meditate, read fantasy, and play pen&amp;paper Role-Playing Games. I like books by Andrzej Sapkowski and (unrelated:)) admire Mahatma Gandhi. I'm vegetarian because I couldn't find any moral justification for killing other beings.<br><br><h2>The world around us</h2><br><br>The motto of our police is \"Help and protect\". I believe that this is actually the mission of every human, to help and protect others and especially the weaker ones, including not only other humans, but all living beings and the nature itself. Unfortunately too often is this maxim superseded by an attitude that could be summarized as \"Take money and run\". If there were more altruism and compassion than egoism and limitless desires accompanied by wretchlessness, the world would be a much better place. I'm glad there are some people who care, such as <a href=\"https://www.stallman.org/\">R. Stallman</a>, those in Amnesty International and Greenpeace, or a boy in the neighborhood helping an old lady.<br><br><h2>Thoughts on development</h2><br><br>My early experiences in commercial development brought me on the quest for <em>productive development of a software of high inner and outer quality</em>. By productive development I mean that most time is spent bringing real value to the customer and not writing plumbing code, doing mindless and repetitive \"monkey coding\" or fighting with the environment and tools. Inner quality means good documentation and <a title=\"Clean Code: the Bible of those striving for high-quality code\" href=\"https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882\">high-quality, maintainable code</a>. Outer quality covers especially (an acceptable) performance, but also the often neglected usability and doing what the customer actually needs.<br><br>I learned that however technical our profession is, the essential skill necessary for success in IT is a non-technical one - communication. This is best illustrated by the following picture from blogcmmi.com, which I like a lot (though it omits the equal importance of intra-team and personal communication):<br><br><h3><img src=\"https://lh5.ggpht.com/_btcPMCQkYvg/TAjNsPzoeJI/AAAAAAAABX4/9vQ-O__nWN4/s800/requirements-communication.jpg\" alt=\"\" /></h3><br><br>As mentioned above, <a href=\"/2014/03/17/frustration-driven-development-towards-devops-lean-clojure/\" rel=\"bookmark\">Frustration-Driven Development – Towards DevOps, Lean, Clojure</a> summarizes well what &amp; why I am trying to do.<br><br><h3>My professional interests</h3><br><br>People<br><br><ul>\n    <li>Build great, self-motivated, self-organizing teams of happy people</li>\n    <li>Empower people to find solutions</li>\n    <li>Autonomy, mastery, purpose (&lt;- <a href=\"https://www.ted.com/talks/dan_pink_on_motivation.html\">Drive</a>)</li>\n</ul><br><br>Build the right thing<br><br><ul>\n    <li>Find out what the client really needs and if she really needs it - see Impact Mapping</li>\n    <li>Create the maximal business value possible at minimal costs, stop when enough reached</li>\n    <li>Empirical process control, feedback, agility</li>\n    <li>MVP, Specification by example, <a href=\"https://www.gilb.com/Project-Management\">Evo</a>, the 80:20 rule (80% value gained from 20% of the SW, &gt; 50% never/so rarely used that not worth having)</li>\n</ul><br><br>Build it right<br><br><ul>\n    <li>Clean code, software craftmanship =&gt; maintainable, evolvable software\n<ul>\n    <li>TDD, simplicity, \"build the quality in,\" continuous deployment, ...</li>\n</ul>\n</li>\n    <li>Performance, security etc.</li>\n</ul><br><br>Build it quickly<br><br><h2>My open source projects</h2><br><br>Having received so much from the open source community (Linux, Firefox, OpenOffice and counless others), I feel obligated to give something back. Most of own my latest projects live at <a href=\"https://github.com/holyjak\">my GitHub account</a>.<br><br><h3>Current projects</h3><br><br><a href=\"https://github.com/holyjak?tab=repositories\">See my GitHub repositories.</a><br><br><h3>Old (less active) projects</h3><br><br><h4>J(2)EE Holy Utils, a diverse collection of small projects</h4><br><br>The <a href=\"https://jeeutils.sf.net/\">J(2)EE Holy Utils</a> include the projects listed below:<br><br><ul>\n    <li><a href=\"https://sourceforge.net/apps/mediawiki/jeeutils/index.php?title=Main_Page#1._ClassLoaderViewer.jsp\"><strong>ClassLoaderViewer.jsp</strong></a> - utility JSP for finding out where a class is loaded from, whether one class can see another one or a particular resource and from where is it loaded</li>\n    <li><a href=\"https://sourceforge.net/apps/mediawiki/jeeutils/index.php?title=GroovyConsole_servlet_or_portlet\"><strong>GroovyConsole servlet</strong></a> - a JSP page and two jars constituting a console for executing <a href=\"https://groovy.codehaus.org/\">Groovy</a> (Java-like scripting) commands on an application server - great if you need to explore the live environment or experiment with enterprise applications and their libraries that you can't get working stand-alone</li>\n    <li><strong><a href=\"https://sourceforge.net/apps/mediawiki/jeeutils/index.php?title=DbUnit_Test_Skeleton\">DbUnit Express</a></strong> - a layer over DbUnit that extremely simplifies creation of tests agains an embedded Derby database by using convention over configuration and adjusting the default settings (create a .ddl, a .xml with data, extend the base class or create &amp; init an instance and run) and provides few additional utilities (getDataSource, RowComparator). Supports Maven. As a testing fan, I use it on nearly any project.</li>\n</ul><br><br><div>Standalone projects that could be a part of JEE Holy Utils:</div><br><br><div>\n<ul>\n    <li><a href=\"https://github.com/holyjak/perfstats-lib\">perfstats-lib</a> - a light-weight, minimalistic, low-overhead library for collecting and publishing performance statistics in production systems</li>\n    <li><strong><a href=\"https://github.com/holyjak/static-jsfexpression-validator\">static-jsfexpression-validator</a></strong> - build-time validation of EL expressions in JSF pages, check the (older) <a href=\"/2011/06/22/validating-jsf-el-expressions-in-jsf-pages-with-static-jsfexpression-validator/\">JSF EL validator introduction</a></li>\n</ul>\n</div><br><br><h4>MiniPauker, mobile learning application</h4><br><br><a href=\"https://MiniPauker.sf.net/\">MiniPauker</a> is a J2ME flashcard learning application for mobile phones, a little brother of the desktop application <a href=\"https://Pauker.sf.net/\">Pauker</a>. It's great for example for learning and repeating vocabulary. The primary features for me are that it can draw the \"cards\" to repeat in a random order and that it presents you primarily with the cards you have troubles remembering. It was originally developed by Markus Brosch, I took it over in 2009.<br><br><ul>\n    <li><a href=\"https://jedit.org/\">jEdit</a> editor plugin <a href=\"https://plugins.jedit.org/plugins/?TextAutocomplete\">TextAutocomplete</a></li>\n    <li><a href=\"mobilebackup.sourceforge.net\">MobileBackup</a> - a J2ME application for backing up and restoring contacts, calendar entries etc. on mobile phones - I've inherited it and extended to support also restore in addition to backup</li>\n</ul>",
  "excerpt": ""
 },
 {
  "title": "Wiki",
  "published": "2010-05-13 08:41:34",
  "postType": "page",
  "slug": "/wiki/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "Persistent computer-related notes that are still under development.<br><br><h2>Index of pages</h2><br><br><ul>\n    <li><a href=\"/wiki/development/\">Development</a>\n<ul>\n    <li><a title=\"Architecture\" href=\"/wiki/development/architecture/\">Architecture</a></li>\n    <li><a href=\"/wiki/development/books/\">Development Books</a> - the most influential books about software development I've read</li>\n    <li><a title=\"Learning Programming\" href=\"/wiki/development/learning-programming/\">Learning Programming</a> - resources</li>\n    <li><a title=\"Testing\" href=\"/wiki/development/testing/\">Unit Testing Toolbox</a> (for Java) - collection of links to libraries, tools, concepts</li>\n    <li><a title=\"Performance Testing for Webapps Notes\" href=\"/wiki/development/testing/performance-testing-for-webapps-notes/\">Performance &amp; Performance Testing for Webapps</a></li>\n    <li><a title=\"Ops: Monitoring\" href=\"/wiki/development/ops-monitoring/\">Ops: Monitoring</a></li>\n    <li><a title=\"Clojure\" href=\"/wiki/development/clojure/\">Clojure</a> - links to libs, resources etc.</li>\n    <li><a title=\"Cloud\" href=\"/wiki/development/cloud/\">Cloud</a></li>\n    <li><a title=\"Code Conventions (Java)\" href=\"/wiki/development/code-conventions-java/\">Code Conventions (Java)</a></li>\n    <li><a title=\"Frontend\" href=\"/wiki/development/frontend/\">Frontend</a></li>\n    <li><a title=\"Practices\" href=\"/wiki/development/practicies/\">Practices</a>\n<ul>\n    <li><a title=\"Continuous Delivery\" href=\"/wiki/development/practicies/continuous-delivery/\">Continuous Delivery</a></li>\n</ul>\n</li>\n    <li><a title=\"Compiled “Must Watch/Read” Resources\" href=\"/wiki/development/compiled-must-watchread-resources/\">Compiled \"Must Watch/Read\" Resources</a> - JS, functional JS, ...</li>\n</ul>\n</li>\n    <li><a title=\"Better Work\" href=\"/wiki/better-work/\">Better Work </a>- creating more effective organizations with happier people and customers</li>\n    <li><a title=\"Tools\" href=\"/wiki/tools/\">Tools &amp; OS</a>\n<ul>\n    <li><a title=\"Ubuntu@Thinkpad\" href=\"/wiki/tools/ubuntuatthinkpad/\">Ubuntu@ThinkPad</a> - My experiences from running Ubuntu on Lenovo ThinkPad</li>\n    <li><a title=\"Eclipse\" href=\"/wiki/tools/eclipse/\">Eclipse</a> notes and tricks</li>\n    <li><a title=\"Aquamacs/Emacs\" href=\"/wiki/tools/emacs/\">Emacs/Aquamacs</a> mini-reference</li>\n    <li><a title=\"Vagrant Notes\" href=\"/wiki/tools/vagrant-notes/\">Vagrant notes</a> and troubleshooting</li>\n</ul>\n</li>\n</ul><br><br><h3>Development Wiki</h3><br><br><ul>\n    <li><a href=\"/wiki/development/economics-of-coding/\">Economics of Coding</a></li>\n    <li><a title=\"Risk-Based Testing\" href=\"/wiki/development/risk-based-testing/\">Risk-Based Testing</a></li>\n    <li><a title=\"Parallel Design (Parallel Change)\" href=\"/wiki/development/parallel-design-parallel-change/\">Parallel Design (Parallel Change)</a></li>\n</ul><br><br><h2>Tiny notes</h2><br><br><h3>Linux</h3><br><br><h6>Lock user account</h6><br><br>Disable: usermod --expiredate 1 &lt;login&gt;<br><br>Re-enable: usermod --expiredate 2099-01-01 &lt;login&gt;<br><br><h3>Tools</h3><br><br>See the tools page for Git, Vim etc. notes<br><br><h3>Java Development</h3><br><br><h4>What is \"enterprise\"?</h4><br><br>Common enterprise problems: database access, remote procedure invocation, transactions, authentication, directory services, auditing, integration of multiple services, authorization (roles, groups of roles, ...), LDAP, etc.<br><br><h4>Source code &amp; JavaDoc search sites</h4><br><br><ul>\n    <li><a href=\"https://grepcode.com/\">GrepCode.com</a></li>\n    <li><a href=\"https://www.jarvana.com/jarvana/\">jarvana.com</a></li>\n</ul><br><br><h3>Clojure &amp; Ecosystem</h3><br><br>Datomic<br><br><ul>\n    <li>Not for write-heavy apps, i.e. apps with &gt;= 1MB/s sustained write throughput (even 1TB/year is perhaps not a best fit) - Essentially serializable writes (shardable via multiple transactors)</li>\n    <li>Note: Performance of the back-end storage doesn't matter so much - hot data cached on peers, most of the rest can be hold by a memcached cluster in front of the storage</li>\n    <li>A top for Datomic with a single transactor is perhaps around billion rows??</li>\n    <li>Great at answering question about past, what-if, audit trail</li>\n    <li>Good performance at joins for all in local (peer) memory, multiple pears can hold in memory quite different \"hot data\" for diff. use cases x monholitic DB</li>\n    <li>Classical RDBMs and languages based on constraints from 70s that no more true (expensive memory and storage, dedicated machines) - Datomic explores what we would design if we broke those constraints</li>\n    <li>Flexible: contrary to doc stores, here \"documents\" are assembled at query time =&gt; no need to decide ahead of time; schema can evolve much more freely</li>\n    <li>Programmable: everything is data (commands, queries, tx info) =&gt; easy to generate, combine, use</li>\n    <li>Consistency etc. - can use server-side functions to do multi-updates etc.</li>\n</ul>",
  "excerpt": ""
 },
 {
  "title": "Ubuntu@Thinkpad",
  "published": "2010-05-13 08:58:21",
  "postType": "page",
  "slug": "/wiki/tools/ubuntuatthinkpad/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "<h1>My experiences from running Ubuntu on Lenovo ThinkPad</h1>\r\nHow to get things working.<br><br>My latest configuration:\r\n<ul>\r\n\t<li>Ubuntu 10.04 Lucid Lynx <span style=\"text-decoration:line-through;\">Ubuntu 9.04 - the Jaunty Jackalope - released in April 2009</span></li>\r\n\t<li>ThinkPad R61</li>\r\n</ul>\r\n<h2>ToC</h2>\r\n<ul>\r\n\t<li><a href=\"#Ubuntu10.04Lucid\">Ubuntu 10.04 Lucid</a>\r\n<ul>\r\n\t<li><a href=\"#Upgradingfrom9.04to10.04\">Upgrading from 9.04 to 10.04</a></li>\r\n\t<li><a href=\"#HW\">HW</a> - wifi, <a href=\"MultipledisplayswithNvidia\">multiple displays</a> etc.</li>\r\n</ul>\r\n</li>\r\n\t<li><a href=\"#Ubuntu9.04Jaunty\">Ubuntu 9.04 Jaunty</a>\r\n<ul>\r\n\t<li><a href=\"#ConnectivityWifiVPNsandfirewalls\">Connectivity: Wifi, VPNs and firewalls</a></li>\r\n</ul>\r\n</li>\r\n\t<li><a href=\"#Various\">Various</a>\r\n<ul>\r\n\t<li><a href=\"#Applications\">Applications</a> - Eclipse etc.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h1 id=\"Ubuntu10.04Lucid\">Ubuntu 10.04 Lucid</h1>\r\n<h2 id=\"Upgradingfrom9.04to10.04\">Upgrading from 9.04 to 10.04</h2>\r\nThe upgrade from 9.04 to 9.10 and then to 10.04 was very smooth one, with only few issues:\r\n<ul>\r\n\t<li>The upgrade to 9.10 switched my desktop to Xfc and presented itself as Xubuntu, which was quite a surprise, but after ugrading to 10.04 it went back to normal</li>\r\n\t<li>I accepted the new /etc/dnsmasq.conf and thus I had to re-insert the line \"resolv-file=/etc/resolv.conf.forward\" to get it working properly with resolvconf</li>\r\n\t<li>Lotus Notes 8.5 stopped displaying any content and had to be reinstalled. I followed these <a href=\"https://ubuntuforums.org/showpost.php?p=9237024&amp;postcount=5\">instructions for Lotus Notes 8.5.1 on 32-bit Lucid Lynx</a>, which refer a lot to the <a href=\"https://usablesoftware.wordpress.com/2010/03/09/installing-lotus-notes-8-5-1-fp1-on-ubuntu-10-04-lucid-lynx-64bit/\">LN 8.5.1 for 64-bit Lucid Lynx</a> (many thanks to both authors!), with the difference that I installed fixpacks 1, 2, and 3 and did not fetch the libraries from step 5 (I already had them in /usr/lib/)</li>\r\n\t<li>VMware 3.0 failed to compile vmnet due to \"vnetUserListener.c:240: error: ‘TASK_INTERRUPTIBLE’ undeclared\" and others, <a href=\"https://sadevil.org/blog/2009/12/31/vmware-player-3-vs-linux-2-6-32/\">to fix it you need to add one import</a> to some files. (The new <a href=\"https://www.vmware.com/support/player31/doc/releasenotes_player31.html#whatsnew\">VMware 3.1 supports Ubuntu 10.04</a> so it should perhaps work out of the box, but I haven't tried it.)</li>\r\n</ul>\r\n<h3>Issues with Lucid</h3>\r\n<h5>Corrupted display of the console, black screen while booting</h5>\r\n<strong>Symptoms</strong>:\r\n<ol>\r\n\t<li>The screen is mostly black between selecting the kernel to boot from the Grub menu and the display of GDM</li>\r\n\t<li>When I switch to the text console (C+A+F1), it's completely unreadable, the letters resemble much more colorful rectangles then letters, and the console is displayed twice as if there were two columns</li>\r\n</ol>\r\n<strong>Cause:</strong> This is due to the introduction of <a href=\"https://www.ubuntugeek.com/ubuntu-10-4-lucid-boot-experience-changing-from-using-usplash-to-plymouth.html\">Plymouth</a>, an application supposed to display a nice boot progress indication, and the Nvidia graphics card and driver, which doesn't support the <a href=\"https://wiki.ubuntu.com/X/KernelModeSetting\">KMS</a> yet; there is a <a href=\"https://bugs.launchpad.net/ubuntu/+source/plymouth/+bug/506717\">related bug</a><br><br><strong>Solution</strong>: The <a href=\"https://bugs.launchpad.net/ubuntu/+source/plymouth/+bug/506717/comments/99\">solution in the comment #99</a> on the bug's page worked for me. (Note: none of the two files existed.) Now the text console is readable and I see some progress while booting.<br><br>Versions: Plymouth 0.8.2-2ubuntu2, Nvidia driver 'nvidia' v. 195.36.24\r\n<h5>Volume control icon disappered from the panel</h5>\r\nThe volume control is now a part of the Indicator Applet, as well as battery state, Bluetooth control, and IM/email menu. You can thus either add the Indicator Applet to your panel or run the gnome-volume-control-applet (add it to the startup applications). Source: an <a href=\"https://ubuntuforums.org/showthread.php?t=1470635\">Ubuntu forum</a>.\r\n<h5>GDM ignores the custom configuration file</h5>\r\n<em><strong>TBD: Verify that the fix worked.</strong></em> ?! Should have been fixed in 2.26.1-0ubuntu3 ?!<br><br>Changed to the GDM's configuration shall be done in /etc/gdm/custom.conf, however this file is ignored and it actually looks into the (non-existing) file gdm.conf-custom. See the <a href=\"https://bugs.launchpad.net/ubuntu/+source/gdm/+bug/395861\">corresponding bug</a> report.<br><br>Solution: sudo ln -s /etc/gdm/custom.conf /etc/gdm/gdm.conf-custom<br><br>Versions: GDM 2.30.2.is.2.30.0-0ubuntu2\r\n<h2 id=\"HW\">HW</h2>\r\n<h3>WiFi</h3>\r\nFor wifi to work, three conditions must be met:\r\n<ol>\r\n\t<li>WiFi and Bluetooth are enabled by the hardware switch (at the front side of the notebook, move the switch to the right)</li>\r\n\t<li>WiFi must be enabled by the software switch (Fn+F5 or a command-line program)</li>\r\n\t<li>The WiFi interface must be configured and brought up properly</li>\r\n</ol>\r\n<h4>Does the OS see the WiFi card?</h4>\r\n$ lspci\r\n<pre>03:00.0 Network controller: Intel Corporation PRO/Wireless 4965 AG or AGN [Kedron] Network Connection (rev 61)</pre>\r\n$ sudo lshw -C network\r\n<pre>*-network\r\n description: Wireless interface\r\n product: PRO/Wireless 4965 AG or AGN [Kedron] Network Connection\r\n vendor: Intel Corporation\r\n physical id: 0\r\n bus info: pci@0000:03:00.0\r\n logical name: wlan0\r\n version: 61\r\n serial: 00:21:5c:08:51:09\r\n width: 64 bits\r\n clock: 33MHz\r\n capabilities: pm msi pciexpress bus_master cap_list ethernet physical wireless\r\n configuration: broadcast=yes driver=iwlagn ip=192.168.2.101 latency=0 multicast=yes wireless=IEEE 802.11abgn\r\n resources: irq:32 memory:df2fe000-df2fffff</pre>\r\nIf the output starts with *-network DISABLED as below:\r\n<pre>*-network DISABLED\r\n description: Wireless interface\r\n product: PRO/Wireless 4965 AG or AGN [Kedron] Network Connection\r\n ...</pre>\r\nThen one of the three conditions above hasn't been met.\r\n<h4>The wifi driver</h4>\r\nYou may want to verify that the wifi driver functions properly by [removing it if loaded and]  loading it into the kernel and checking the /var/log/kern.log for any related messages. The driver is iwlagn (in some earlier versions it was iwl4965).<br><br>$ sudo modprobe -r iwlagn &amp;&amp; sudo modprobe -i iwlagn &amp;&amp; tail /var/log/kern.log\r\n<pre>iwlagn 0000:03:00.0: PCI INT A disabled\r\ncfg80211: Calling CRDA to update world regulatory domain\r\ncfg80211: World regulatory domain updated:\r\n (start_freq - end_freq @ bandwidth), (max_antenna_gain, max_eirp)\r\n (2402000 KHz - 2472000 KHz @ 40000 KHz), (300 mBi, 2000 mBm)\r\n (2457000 KHz - 2482000 KHz @ 20000 KHz), (300 mBi, 2000 mBm)\r\n (2474000 KHz - 2494000 KHz @ 20000 KHz), (300 mBi, 2000 mBm)\r\n (5170000 KHz - 5250000 KHz @ 40000 KHz), (300 mBi, 2000 mBm)\r\n (5735000 KHz - 5835000 KHz @ 40000 KHz), (300 mBi, 2000 mBm)\r\niwlagn: Intel(R) Wireless WiFi Link AGN driver for Linux, 1.3.27k\r\niwlagn: Copyright(c) 2003-2009 Intel Corporation\r\niwlagn 0000:03:00.0: PCI INT A -&gt; GSI 17 (level, low) -&gt; IRQ 17\r\niwlagn 0000:03:00.0: setting latency timer to 64\r\niwlagn 0000:03:00.0: Detected Intel Wireless WiFi Link 4965AGN REV=0x4\r\niwlagn 0000:03:00.0: Tunable channels: 13 802.11bg, 19 802.11a channels\r\niwlagn 0000:03:00.0: irq 32 for MSI/MSI-X\r\nphy0: Selected rate control algorithm 'iwl-agn-rs'</pre>\r\nIf you watch the kern.log while switching the hardware wifi/BT switch on and off, you can observer messages like\r\n<pre>iwlagn 0000:03:00.0: RF_KILL bit toggled to enable radio.\r\n...\r\niwlagn 0000:03:00.0: RF_KILL bit toggled to disable radio.</pre>\r\n<h4>Enabling the wifi interface</h4>\r\n<h5>First, make sure that the hardware wifi/BT switch is in the ON position</h5>\r\n<h5>Second, enable the software switch via Fn+F5 or the command line utility</h5>\r\nFn+F5 may be confusing because the wifi led may be not switched unless the device is also configured. Using the command-line utility is clearer:<br><br>$ sudo rfkill list wifi\r\n<pre>18: phy0: Wireless LAN\r\n Soft blocked: no\r\n Hard blocked: no</pre>\r\nThis indicates that both the hardware switch and the software switch are enabled.<br><br>$ sudo rfkill block wifi\r\n=&gt; iwconfig wlan0 will return Tx-Power=off\r\n$ sudo rfkill unblock wifi\r\n=&gt; iwconfig wlan0 will return Tx-Power=0 dBm, meaning, that 'off' indicates that one of the switches is disabled while 0 dBm indicates that the interfaces is ready but may yet need to be configured.\r\n<h6>Possible unblock failure: Unknown error 132</h6>\r\nIf \"rfkill unblock wifi\" fails with\r\n<pre>SIOCSIFFLAGS: Unknown error 132</pre>\r\nthen disable and re-enable the hardware wifi/BT switch and try again, the problem should be gone.\r\n<h5>Third, configure the interface</h5>\r\nThe final step, which may or may not be necessary, is to configure the interface by executing<br><br>$ sudo ifconfig wlan0 up\r\n<ul>\r\n\t<li>If it fails with \"SIOCSIFFLAGS: Unknown error 132\" then the interface isn't ready meaning that likely  the HW or SW switch is disabled</li>\r\n\t<li>otherwise you should now be able to list wifi networks around you and connect to some</li>\r\n</ul>\r\n<h5>Forth, connect to a network</h5>\r\nI'd suggest to try both the command-line 'iwlist scanning' and Wicd's [Refresh] (if you're  using wicd) because sometimes one of them provides better results.<br><br>When connected to an access point, iwconfig should return information similar to those below:\r\n<pre>$ iwconfig wlan0\r\nwlan0     IEEE 802.11abgn  ESSID:\"my_wifi_net\"\r\n Mode:Managed  Frequency:2.462 GHz  Access Point: 00:17:1C:5B:55:AB\r\n Bit Rate=0 kb/s   Tx-Power=15 dBm\r\n Retry  long limit:7   RTS thr:off   Fragment thr:off\r\n Power Management:off\r\n Link Quality=61/70  Signal level=-49 dBm\r\n Rx invalid nwid:0  Rx invalid crypt:0  Rx invalid frag:0\r\n Tx excessive retries:0  Invalid misc:0   Missed beacon:0</pre>\r\nBefore you actually connect to a network it's normal that Tx-Power is 0 dBm.\r\n<h3 id=\"MultipledisplayswithNvidia\">Multiple displays with Nvidia</h3>\r\nUsing two monitors is not that easy mainly because (it seems that) Ubuntu/X/Gnome suppose that the primary monitor is the left-most one and have problems if it isn't. To have Gnome panels on your main monitor and for new/popup windows to appear there, I've found the following two step configuration to work:\r\n<ol>\r\n\t<li>Suppose that you have the layout\r\n[NB][<span style=\"text-decoration:underline;\">Mon</span>],\r\ni.e. the notebook is left to the external monitor and you want to use the (bigger) external monitor Mon as the primary display</li>\r\n\t<li>Run System - Administration - NVIDIA X Server Settings, select X Server Display Configuration, click [Detect Displays]</li>\r\n\t<li>By now the Nvidia tool can see both your monitors. Click [Configure] for the external monitor and select TwinView.</li>\r\n\t<li>For the <em>external monitor</em>:\r\n<ol>\r\n\t<li>Check [x] Make this the primary display for the X screen</li>\r\n\t<li>Position: Right of</li>\r\n\t<li>Click [Apply]</li>\r\n\t<li>=&gt; this will make the Gnome panels to be on the external monitor while all the application windows will be moved to the notebook's screen</li>\r\n</ol>\r\n</li>\r\n\t<li>For the <em>external monitor</em> again:\r\n<ol>\r\n\t<li>Keep \"Make this the primary display for the X screen\" checked</li>\r\n\t<li>Position: Left of</li>\r\n\t<li>Click [Apply]</li>\r\n\t<li>=&gt; all applications are back on the (main) external monitor, the notebook's screen is completely empty (aside of a background image)</li>\r\n</ol>\r\n</li>\r\n\t<li>=&gt; You have Gnome panels and all windows on the external monitor and new popup and other windows open there as well. The configuration is contrary to the reality, in other words, you need to drag an application over the right border of the external monitor to get it onto the notebook's display.</li>\r\n</ol>\r\n<h1 id=\"Ubuntu9.04Jaunty\">Ubuntu 9.04 Jaunty</h1>\r\n<h2 id=\"#ConnectivityWifiVPNsandfirewalls\">Connectivity: Wifi, VPNs and firewalls</h2>\r\nI need to run up to two VPN clients and do connect from various locations including home and the company's network, using ethernet or wifi - that gives a couple of combinations.<br><br>Current set up:\r\n<ol>\r\n\t<li><strong>Wicd</strong> as the GUI for managing network connections - the default Network Manager had problems with wifi and the VPNs (which is a long time ago and may be OK now but I prefer to stick with what works)</li>\r\n\t<li><strong>resolvconf</strong> for consolidating DNS entries from the various sources (DHCP, VPN clients - they must be configured to use it)\r\n<ul>\r\n\t<li>Configuring <strong>OpenVPN</strong>: into /etc/openvpn/*.conf add:\r\n<pre>up /etc/openvpn/update-resolv-conf\r\ndown /etc/openvpn/update-resolv-conf</pre>\r\n</li>\r\n</ul>\r\n<ul>\r\n\t<li>Configuring vpnc using the <strong>kvpnc</strong> GUI: check the option to use <em>dns_update</em></li>\r\n</ul>\r\n</li>\r\n\t<li>Local DNS server and cache with <strong>dnsmasq</strong>\r\n<ul>\r\n\t<li>In <em>/etc/dnsmasq.conf</em> add the line \"<em>resolv-file=/etc/resolv.conf.forward</em>\" to make it working corrrectly with resolvconf</li>\r\n</ul>\r\n</li>\r\n\t<li>Firewall:\r\n<ul>\r\n\t<li>GUI: I do not use Firestarter anymore because it required me to manually indicate either eth0 or wlan0 as the internet-facing interface when I switched to ethernet/wifi - indicated by \"sendmsg Operation not permitted\" when trying to ping something; I switched to gufw instead</li>\r\n\t<li>Configuration - allow traffic on the VPN interfaces: needed for firestart (in /etc/firestarter/user-pre), not for (g)ufw</li>\r\n</ul>\r\n</li>\r\n</ol>\r\n<h3>Troubleshooting connectivity problems</h3>\r\nRestart VPNs, resolvconf, dnsmaq.\r\n<h4>What to do</h4>\r\n<ol>\r\n\t<li>Is the network interface up and configured? It should have an IP assigned.\r\n$ ifconfig -a</li>\r\n\t<li>Are packets routed to the correct servers? Verify that the gateways are as expected (for example not routing everything to vmware's interface ...).\r\n$ route -n</li>\r\n\t<li>Is the connection OK, i.e. are the gateways reachable?\r\n$ ping &lt;IP of the default gateway as returned by route -n&gt;</li>\r\n\t<li>Is only the domain name resolution (DNS) broken, i.e. network works but when translating names to IPs we are contacting unreachable DNS servers?\r\n<ol>\r\n\t<li>Try to ping a network server whose IP you know (e.g. google.com has addresses 74.125.87.103  ... .106, yahoo.de 87.248.121.75 and 217.146.186.221).</li>\r\n\t<li>Check availability of the name servers in /etc/resolv.conf or in /var/run/dnsmasq/resolv.conf if using dnsmasq by pinging them.</li>\r\n\t<li>Check what DNS servers are queried and how the query is delegated between them:\r\n<pre>$ dig +trace google.com | grep Received\r\n;; Received 512 bytes from 127.0.0.1#53(127.0.0.1) in 13 ms\r\n;; Received 500 bytes from 198.41.0.4#53(a.root-servers.net) in 109 ms\r\n;; Received 164 bytes from 192.12.94.30#53(e.gtld-servers.net) in 74 ms\r\n;; Received 124 bytes from 216.239.32.10#53(ns1.google.com) in 28 ms</pre>\r\n</li>\r\n\t<li>Try to sumbit the query to a particular DNS server you know to be available:\r\ndig +trace @192.168.2.1 google.com</li>\r\n</ol>\r\n</li>\r\n</ol>\r\n<h4>Resolvconf</h4>\r\nNormally, there is a static file /etc/resolv.conf that contains a list of nameservers used for DNS resolution. If there are multiple application that need to change it, they are likely to override each other's changes and thus it's better to install the resolvconf daemon and configure the applications to use it (see above). Resolvconf will than merge those changes and maintain the file.<br><br>How it works:\r\n<ol>\r\n\t<li>/etc/resolv.conf is composed of /etc/resolvconf/resolv.conf.d/head + the dynamic entries + resolv.conf.d/tail; the file resolv.conf.d/original holds what was generated by the latest VPN/other client modifying the resolv.conf\r\n<ul>\r\n\t<li>If used together with dnsmasq then the dynamic entries will consist of only \"nameserver 127.0.0.1\", i.e. forwarded to dnsmasq</li>\r\n</ul>\r\n</li>\r\n\t<li>When the list of name servers changes, resolvconf executes the scripts in /etc/resolvconf/update.d/; for us the important one is update.d/dnsmasq :\r\n<ul>\r\n\t<li><strong>resolvconf -&gt; dnsmasq</strong>: The script update.d/dnsmasq reads name servers from all /etc/resolvconf/run/interface/&lt;interface name, e.g. eth0&gt; files and puts them into the dnsmasq's actual name server list, namely /var/run/dnsmasq/resolv.conf\r\n<ul>\r\n\t<li>The final order of name servers is determined by the lexical order of interfaces' names (e.g. eth0 &gt; tun0 &gt; wlan0) and the order of nameservers inside the interface files</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ol>\r\nTroubleshooting:\r\n<ul>\r\n\t<li>Reload/restart:\r\n<em>sudo /etc/init.d/resolvconf restart</em>\r\nor <em>sudo /etc/init.d/resolvconf reload</em></li>\r\n\t<li>Documentation: read /usr/share/doc/resolvconf/README.gz</li>\r\n\t<li>Check /etc/resolv.conf (the generated one), /etc/resolv.conf.default (nameserver 127.0.0.1 because of using dnsmasq), resolv.conf.forward, resolv.conf.forward.default (used if no nameservers provided by DHCP), check name servers defined in /etc/resolvconf/run/interface/&lt;interface name, e.g. eth0&gt;</li>\r\n</ul>\r\n<h4>Dnsmasq</h4>\r\nDnsmasq is a caching DNS server, which forwards all requests to upstream servers and caches their responses for better performance.<br><br>How it works:\r\n<ul>\r\n\t<li>To be used, \"nameserver 127.0.0.1\" must be in /etc/resolv.conf</li>\r\n\t<li>To work with resolvconf, edit <em>/etc/dnsmasq.conf</em> and add the line\r\n<em>resolv-file=/etc/resolv.conf.forward</em></li>\r\n\t<li>It reads the upstream servers from its own name server list, namely <strong>/var/run/dnsmasq/resolv.conf</strong> , which is maintained by resolvconf (see above)\r\n<ul>\r\n\t<li>To verify the name server config file check the command used to run it, namely its -r option, by executing <em>ps aux | grep dnsmasq</em></li>\r\n</ul>\r\n</li>\r\n\t<li>Normally it should detect when an upstream server isn't responding and favour another one though this seems not to be working, at least sometimes (e.g. when my vpnc disconnects without removing its name servers from the list)</li>\r\n</ul>\r\nTroubleshooting:\r\n<ul>\r\n\t<li>Check the name server list it's using (/var/run/dnsmasq/resolv.conf)</li>\r\n\t<li>Check the log:\r\n<em>$ grep dnsmasq /var/log/daemon.log</em></li>\r\n</ul>\r\nUseful options (can be set on the command line or - without the two '--' - in /etc/dnsmasq.conf)\r\n<ul>\r\n\t<li>-o, --strict-order\r\nBy default, dnsmasq will send queries to any of the upstream servers it knows about and tries to favour servers that are known to be up. Setting this flag forces dnsmasq to try each query with each server strictly in the order they appear in /etc/resolv.conf</li>\r\n\t<li>--all-servers\r\nBy default, when dnsmasq has more than one upstream server available, it will send queries to just one server. Setting this flag forces  dnsmasq  to  send all queries to all available servers. The reply from the server which answers first will be returned to the original requestor.</li>\r\n</ul>\r\n<h3>Common problems</h3>\r\n<h5>DNS lookup takes long</h5>\r\nIndication: When opening a page in a browser, you see \"looking up &lt;server name&gt;\" for some time; or execute \"host &lt;server name&gt;\" from the command line.<br><br>Likely cause: The list of name servers starts with servers that are unavailable an thus each lookup is delayed by the timeout before the next name server is tried. Check the dnsmasq's resolv conf list.<br><br>Solution: Try to reset the network. At worst, tell wicd to use a static DNS servers and supply the right ones.\r\n<h5>Ping fails with \"sendmsg Operation not permitted\"</h5>\r\nLikely cause: Firewall, namely firestart, is blocking it.Verify by disabling the firewall and restarting.<br><br>Solution: Make sure that the interface (eth0 or wlan0) is configured as the internet (or intranet?) facing one. For me only Firestart exhibited this problem, ufw with the gufw GUI was OK.<br><br>Troubleshooting:\r\n<ul>\r\n\t<li>Dnsmasq - check the command used to run it to find out where does it read the list of name servers from (<em>ps aux | grep dnsmasq</em>) - check the -r option, in my case \"<em>-r /var/run/dnsmasq/resolv.conf</em>\" - so check this file to learn what name servers and in what order are used actually</li>\r\n</ul>\r\n<h3>Common problems</h3>\r\n<h5>DNS lookup takes long</h5>\r\nIndication: When opening a page in a browser, you see \"looking up &lt;server name&gt;\" for some time; or execute \"host &lt;server name&gt;\" from the command line.<br><br>Likely cause: The list of name servers starts with servers that are unavailable an thus each lookup is delayed by the timeout before the next name server is tried. Check the dnsmasq's resolv conf list.<br><br>Solution: Try to reset the network. At worst, tell wicd to use a static DNS servers and supply the right ones.\r\n<h5>Ping fails with \"sendmsg Operation not permitted\"</h5>\r\nLikely cause: Firewall, namely firestart, is blocking it.Verify by disabling the firewall and restarting.<br><br>Solution: Make sure that the interface (eth0 or wlan0) is configured as the internet (or intranet?) facing one. For me only Firestart exhibited this problem, ufw with the gufw GUI was OK.\r\n<h1 id=\"Various\">Various</h1>\r\n<h2 id=\"Applications\">Applications</h2>\r\n<h3>Eclipse</h3>\r\n<h4>Enable a shortcut for Show occurences in file (C+S+u not working)</h4>\r\nThe useful Eclipse action <strong>Search - Occurrences in File - Identifier</strong> has by default the shortcut Control+Shift+U. But under Gnome the shortcut <a href=\"https://help.ubuntu.com/community/ComposeKey#Unicode%20composition\">Control+Shift+U is used for Unicode character input</a>, indicated by an underlined u when pressed. Assigning a different shortcut is easy but there are few \"traps\":\r\n<ol>\r\n\t<li>In Eclipse, go to Window - Preferences - General - Keys</li>\r\n\t<li>Type  the filter <em>occurr</em> and click on \"<em>Shows the Occurrences in File Quick  Menu</em>\". Do not confuse it with \"Occurences in File\" (binding C+S+A, when  Editing in Structured T. Ed.)!\r\n<ol>\r\n\t<li>Make sure that When is \"<em>In Windows</em>\", Category is \"<em>Search</em>\"</li>\r\n\t<li>Click [Unbind Command], click into the Binding field and type the  keys  that you want. Beware that some keys could conflict with existing  bindings  or global Gnome/system bindings. For me e.g. Control+Shift+S  or F8 worked (though I might have to unbind conflicting bindings, I  don't remember anymore).</li>\r\n</ol>\r\n</li>\r\n</ol>\r\nEnvironment: Eclipse 3.5, Gnome 2.30.2, Ubuntu 10.04.\r\n<h3>IBM Applications</h3>\r\n<h4>DB2 9.5 at Ubuntu 10.04</h4>\r\n<h5>Avoiding SQL5043N (inability to start TCP/IP)</h5>\r\nTo avoid the error<br><br><pre><code>\r\nSQL5043N  Support for one or more communications protocols failed to start successfully.\r\nHowever, core database manager functionality started successfully.</code></pre><br><br>with the following cause (resulting with inaccessibility over TCP/IP):<br><br><pre><code>\r\nDIA3201E The service name &quot;db2c_db2inst1&quot; specified in the database\r\nmanager configuration file cannot be found in the TCP/IP services  file.\r\n</code></pre><br><br>You need to add into /etc/services an entry like:<br><br><pre><code>db2c_db2inst1          50000/tcp    # DB2 connections for db2inst1</code></pre><br><br>See a <a href=\"https://serverfault.com/questions/113244/sql5043n-support-for-one-or-more-communications-protocols-failed-to-start-success\">detailed explanation at ServerFault</a>.\r\n<h5>Solving authentication issue with error #15</h5>\r\nIf connection via JDBC fails with<br><br><pre><code>com.ibm.db2.jcc.b.SqlException: Connection authorization failure occurred. Reason: Local security service non-retryable error.</code></pre><br><br>and connection via the db2 command line client (connect to MyDb user myDbUser using MySecretPsw) fails with<br><br><pre><code>SQL30082N  Security processing failed with reason &quot;15&quot; (&quot;PROCESSING FAILURE&quot;).</code></pre><br><br>but you can normally log-in as the user (su - myDbUser) then you need to change the hashing mechanism for your password, e.g. like this:<br><br><pre><code>sudo usermod --password `openssl passwd MySecretPsw` myDbUser</code></pre><br><br>Many thanks to Jan Šťastný for <a href=\"https://blog.stastnarodina.com/honza-en/spot/db2-sql30082n-security-processing-failed-with-reason-15/\">describing the cause and solution</a>!",
  "excerpt": ""
 },
 {
  "title": "Eclipse",
  "published": "2010-11-26 07:24:59",
  "postType": "page",
  "slug": "/wiki/tools/eclipse/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "Eclipse notes and tricks.<br><br>Check also my <a href=\"/category/eclipse/\">blogs in the eclipse category</a>.\r\n<h1 id=\"magic\">My favorite Eclipse magic</h1>\r\n(Shortcuts under Mac - under Linux they're likely the same only having Ctrl instead of <img class=\"wp-smiley\" src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_command.gif\" alt=\"Command key icon\" />)\r\n(| indicates position of the cursor; <img class=\"wp-smiley\" src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_command.gif\" alt=\"Command key icon\" width=\"9\" height=\"9\" /> is Command, <img class=\"wp-smiley\" src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_shift.gif\" alt=\"Shift icon\" width=\"9\" height=\"9\" /> is Shift, <img class=\"wp-smiley\" src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_option.gif\" alt=\"Option or Alt key icon\" width=\"9\" height=\"9\" /> is Alt, ^ is Control)\r\n<ul>\r\n\t<li><strong>Open Type</strong> (<img class=\"wp-smiley\" src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_command.gif\" alt=\"Command key icon\" /><img class=\"wp-smiley\" src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_shift.gif\" alt=\"Shift icon\" width=\"9\" height=\"9\" />T) - quickly find any class on the classpath</li>\r\n\t<li><strong>Open Resource</strong> (<img class=\"wp-smiley\" src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_command.gif\" alt=\"Command key icon\" width=\"9\" height=\"9\" /><img class=\"wp-smiley\" src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_shift.gif\" alt=\"Shift icon\" width=\"9\" height=\"9\" />R) - quickly find any file in the project</li>\r\n\t<li><strong>Quick Outline</strong> (<img class=\"wp-smiley\" src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_command.gif\" alt=\"Command key icon\" width=\"9\" height=\"9\" />O) - opens a pop-up similar to the Outline view but filterable with support for the * wildcard - useful for jumping quickly to a method/member (much better than search)</li>\r\n\t<li><strong>Smart Complete</strong>(^Space) - complete just about anything (variables, methods, types, ...) including predefined Code Templates and more\r\n<ul>\r\n\t<li>Class-level completion (press ^Space anywhere outside of a method for all proposals or type first few letters of what you want first)\r\n<ul>\r\n\t<li>Override/implement method: start typing the name of the method, e.g. \"toS\" for toString() - or just press ^Space and select the proposition you want</li>\r\n\t<li>Quick constructor creation:  if the class has no constructor, just press ^Space, it should come first</li>\r\n\t<li>Quick setter/getter generation: as above</li>\r\n</ul>\r\n</li>\r\n\t<li>Create for/foreach loop to loop over Iterable/Collection/array - type \"for\" and ^Space</li>\r\n\t<li>Surround with try-catch or another block statement (do/while/for loop, try-catch, synchronized, if, runnable) - select at least two lines and ^Space, go to the end of the proposition list (via up arrow in the list)</li>\r\n\t<li>Print to sysout/syserr: select 1 line and ^Space, go to the last propositions</li>\r\n</ul>\r\n</li>\r\n\t<li><strong>Quick Fix</strong> (<img class=\"wp-smiley\" src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_command.gif\" alt=\"Command key icon\" width=\"9\" height=\"9\" />1) - proposes things you are likely to do; experiment with how the proposals differ based on where exactly your cursor is and what is or is not selected\r\n<ul>\r\n\t<li>Create new field initialized in a constructor: declare the constructor's parameter (leaving cusrsor just behind the name), press <img class=\"wp-smiley\" src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_command.gif\" alt=\"Command key icon\" width=\"9\" height=\"9\" />1 and select Assign parameter to new field.</li>\r\n\t<li>Introduce local variable: select a statement and <img class=\"wp-smiley\" src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_command.gif\" alt=\"Command key icon\" width=\"9\" height=\"9\" />1</li>\r\n\t<li>Complete definition of a new local variable - type: type e.g. \"a = new String();|\" and <img class=\"wp-smiley\" src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_command.gif\" alt=\"Command key icon\" width=\"9\" height=\"9\" />1, select \"Create local variable 'a'\" (notice also the other options - field and parameter).</li>\r\n\t<li>Convert local variable to field (cursor behind variable's name), also Inline local variable</li>\r\n\t<li>Many other - just experiment</li>\r\n</ul>\r\n</li>\r\n\t<li><strong>Open Call Hierarchy</strong> - right-click, select it</li>\r\n\t<li><strong>Organize Imports</strong> (<img class=\"wp-smiley\" src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_command.gif\" alt=\"Command key icon\" width=\"9\" height=\"9\" /><img class=\"wp-smiley\" src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_shift.gif\" alt=\"Shift icon\" width=\"9\" height=\"9\" />O)</li>\r\n\t<li>Minor\r\n<ul>\r\n\t<li><strong>Convert to static import</strong> - <img src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_command.gif\" alt=\"Command key icon\" width=\"9\" height=\"9\" /><img src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_shift.gif\" alt=\"Shift icon\" width=\"9\" height=\"9\" />M on a static method/constant (<a href=\"https://bugs.eclipse.org/bugs/show_bug.cgi?id=197850\">not yet available via quick-fix</a> :-()</li>\r\n\t<li><strong>Next editor</strong> (<img src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_command.gif\" alt=\"Command key icon\" width=\"9\" height=\"9\" />F6) - to cycle between open files.</li>\r\n</ul>\r\n</li>\r\n\t<li>Completion - swtich between insert (default) and override - hold Ctrl (see Java - Editor - Content Assist - Insertion)</li>\r\n</ul>\r\nOther noteworthy things:\r\n<ul>\r\n\t<li>When you search for class name (Open Type, completions), Eclipse is clever enough to deal with abbreviated forms like IA, IAE, IllArgEx etc. when searching for IllegalArgumentException.</li>\r\n\t<li>Quick Access (<img class=\"wp-smiley\" src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_command.gif\" alt=\"Command key icon\" width=\"9\" height=\"9\" />3) - search in open windows, options, views, commands, ...</li>\r\n\t<li>Word completion (useful e.g. in JavaDoc): Alt+/  (this and previous tips are <a href=\"https://blog.webfoot.com/2007/08/13/semi-robobait-way-cool-eclipse-keyboard-shortcuts/\">from K. D. Sherwood</a>)</li>\r\n\t<li>Copy/Move Line (<img src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_command.gif\" alt=\"Command key icon\" width=\"9\" height=\"9\" /><img src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_option.gif\" alt=\"Option or Alt key icon\" width=\"9\" height=\"9\" /><img src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_shift.gif\" alt=\"Shift icon\" width=\"9\" height=\"9\" />/<img src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_option.gif\" alt=\"Option or Alt key icon\" width=\"9\" height=\"9\" /><img src=\"https://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1343/ks_shift.gif\" alt=\"Shift icon\" width=\"9\" height=\"9\" /> or down)</li>\r\n</ul>\r\nJohannes Brodwall: <a href=\"https://johannesbrodwall.com/2010/02/18/using-eclipse-better/\">Some eye-openers that people enjoy learning</a> (copy/move line and other valuable things - check it out!).\r\n<h1 id=\"codinghelp\">Coding help</h1>\r\n<h2 id=\"ch_various\">Various</h2>\r\n<h3>Simple import of static methods</h3>\r\nIf you have some static methods that you use often - such as JUnit’s Asserts Mockito's fluent API - you may enable Eclipse to add the necessary static imports by adding these types to your Favorite imports:<br><br>Java -&gt; Editor -&gt; Content Assist -&gt; Favorites, click [New Type...] and select the class defining the static method.<br><br>Normally when you type the name of a static method defined in another class, Eclipse will complain about non-existing method and doesn't offer you to create a static import for the method, unless it is among the favorite imports.<br><br>My favourites:\r\n<pre>org.hamcrest.CoreMatchers.*;\r\norg.hamcrest.Matchers.*;\r\norg.junit.Assume.*;\r\norg.junit.Assert.*;\r\norg.mockito.Mockito.*;\r\norg.mockito.Matchers.*;</pre>\r\nSource: Piotr Jagielski's blog <a href=\"https://piotrjagielski.com/blog/working-with-static-imports-in-eclipse/\">Working With\r\nStatic Imports in Eclipse</a>.\r\n<h2 id=\"ch_templates\">Templates</h2>\r\n<h3>Logging</h3>\r\nFrom the article <a href=\"https://blog.yohanliyanage.com/2010/11/the-dark-art-of-logging/\">The Dark Art of Logging</a> (2010).\r\n<h4>Variant A: commons-logging</h4>\r\nWindow -&gt; Preferences -&gt; Java -&gt; Editor -&gt;Templates.<br><br>Log declaration (\"logdef\"):<br><br><pre><code>\r\n${:import(org.apache.commons.logging.Log, org.apache.commons.logging.LogFactory)} private static final Log LOG = LogFactory.getLog(${enclosing_type}.class);\r\n</code></pre><br><br>\"debug\":<br><br><pre><code>\r\nif (LOG.isDebugEnabled()) {\r\n   LOG.debug(&quot;${enclosing_method}: ${msg}&quot;);\r\n}\r\n</code></pre>\r\n<h4>Variant B: Java logging</h4>\r\nAs above except the templates themselves.<br><br>logdef:<br><br><pre><code>\r\n${:import(java.util.logging.Logger)} private static final Logger LOG = Logger.getLogger(${enclosing_type}.class.getName()) ;\r\n</code></pre>\r\n<h4>Default action in a catch block</h4>\r\nChange the action on exception in the template for try-catch blocks through Window -&gt; Preferences -&gt; Java -&gt; Code Style -&gt; Code Templates. Change the Code -&gt; ‘Catch block body’ and  ‘Code in new catch blocks’  template to the following.<br><br><pre><code>\r\nLOG.error(&quot;${msg}&quot;, ${exception_var});\r\n</code></pre><br><br>(Default is exception.printStackTrace().)\r\n<h3>Various</h3>\r\n<h4>Test method</h4>\r\nA slight modification of the default \"Test\" template:<br><br><pre><code>\r\n@${testType:newType(org.junit.Before)}\r\npublic void setUp() throws Exception {\r\n\t//MockitoAnnotations.initMocks(this);\r\n\t${cursor}\r\n}\r\n</code></pre><br><br>Also <code>setUp</code> may be useful:<br><br><pre><code>\r\n@${testType:newType(org.junit.Test)}\r\npublic void ${testname}() throws Exception {\r\n\t${staticImport:importStatic('org.junit.Assert.*')}fail(&quot;not yet implemented&quot;);${cursor}\r\n}\r\n</code></pre>\r\n<h1 id=\"presentations\">Favorite Plugins</h1>\r\n<ul>\r\n\t<li>DBViewer</li>\r\n\t<li>JUnitMax</li>\r\n\t<li><a href=\"https://andrei.gmxhome.de/anyedit/\">AnyEdit Tools</a> (text and whitespace conversions etc.)</li>\r\n\t<li><a href=\"https://propedit.sourceforge.jp/index_en.html\">Properties Editor</a></li>\r\n\t<li>m2eclipse</li>\r\n\t<li>Git: ?</li>\r\n\t<li>Checkstyle</li>\r\n</ul>\r\nExperimenting with:\r\n<ul>\r\n\t<li>Crap4j</li>\r\n\t<li>CodePro AnalytiX</li>\r\n</ul>\r\n<h1>Using Eclipse at Presentations</h1>\r\n<ul>\r\n\t<li>Increase font size\r\n<ul>\r\n\t<li>Text font: Ctrl+ and Ctrl- with <a href=\"https://code.google.com/p/tarlog-plugins/\">Tarlog's plugin</a> or Preferences - General - Appearance - Colors and Fonts (or just search for Fonts) - select Basic - Text Font and edit it</li>\r\n\t<li>Tab labels: View and Editor Folders - Part title font</li>\r\n\t<li>Content of views (e.g. Package Explorer): this cannot be set from Eclipse, it's taken over from the windowing system so you need to <a href=\"https://techtavern.wordpress.com/2008/09/24/smaller-font-sizes-for-eclipse-on-linux/\">change the font size in your desktop environment</a> (in GTK/..)</li>\r\n</ul>\r\n</li>\r\n\t<li>Hide clutter - the best way is to create a new Perspective for presentations without unnecessary toolbar and menu elements\r\n<ul>\r\n\t<li>Right-click the top toolbar and select Hide Toolbar (redisplay: menu Window - Show Toolbar)</li>\r\n</ul>\r\n</li>\r\n\t<li>Try one of the Fullscreen plugins for Eclipse, f.ex. U. <a href=\"https://github.com/ugosan/Eclipse-Fullscreen/\">Sangiorgi's Eclipse-Fullscreen plugin</a> (<a href=\"https://github.com/ugosan/Eclipse-Fullscreen/blob/master/build/plugins/org.ugosan.eclipse.fullscreen_1.0.8.jar?raw=true\">download</a> into dropins/, 9/2011 in E3.6, Pref. - General - Full Screen - choose whether to hide menu and/or status bar, see Window - Full Screen and Alt+Ctrl+Z or Esc) or M. <a href=\"https://marketplace.eclipse.org/content/fullscreen-mode\">Scharf's Eclipse Mode</a> plugin (12/2009, tested in E3.6) - hides the title bar (but not the status bar)</li>\r\n</ul>\r\nBeware that the settings are valid for a workspace -&gt; you may want to create a new one for the presentation.<br><br>You may also want to try the Eclipse <a href=\"https://github.com/ujhelyiz/Presentation-Theme\">Presentation Theme</a> by Zoltán Ujhelyi to make switching to a bigger font size easier.\r\n<div class=\"linkscent-iconblock\" style=\"float:none!important;border:0 solid #ff0000!important;background:none repeat scroll center center transparent!important;width:auto!important;height:auto!important;display:block!important;overflow:visible!important;position:static!important;text-indent:0!important;z-index:auto!important;max-width:none!important;min-width:0!important;max-height:none!important;min-height:0!important;left:auto!important;top:auto!important;bottom:auto!important;right:auto!important;line-height:16px!important;white-space:nowrap!important;margin:0!important;padding:0!important;\"><img class=\"linkscent-icon\" style=\"float:none!important;border:0 solid #ff0000!important;width:16px!important;height:16px!important;display:block;overflow:visible!important;position:absolute!important;text-indent:0!important;z-index:2147483635!important;max-width:none!important;min-width:0!important;max-height:none!important;min-height:0!important;left:150px;top:2795px;bottom:auto!important;right:auto!important;line-height:16px!important;white-space:nowrap!important;visibility:visible;background:url('http://propedit.sourceforge.jp/favicon.ico') no-repeat scroll center center transparent!important;opacity:.166667;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /><img class=\"linkscent-icon\" style=\"float:none!important;border:0 solid #ff0000!important;background:url('//interclue/content/cluecore/skins/default/sprites.png') no-repeat scroll -8px 0 transparent;width:16px!important;height:16px!important;display:block;overflow:visible!important;position:absolute!important;text-indent:0!important;z-index:2147483635!important;max-width:none!important;min-width:0!important;max-height:none!important;min-height:0!important;left:168px;top:2795px;bottom:auto!important;right:auto!important;line-height:16px!important;white-space:nowrap!important;visibility:visible;opacity:.166667;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" width=\"16\" height=\"16\" /><img class=\"linkscent-icon\" style=\"float:none!important;border:0 solid #ff0000!important;background:none repeat scroll center center transparent;width:16px!important;height:16px!important;display:none;overflow:visible!important;position:absolute!important;text-indent:0!important;z-index:2147483635!important;max-width:none!important;min-width:0!important;max-height:none!important;min-height:0!important;left:186px;top:2795px;bottom:auto!important;right:auto!important;line-height:16px!important;white-space:nowrap!important;visibility:hidden;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /></div>",
  "excerpt": ""
 },
 {
  "title": "Agile Gone Wrong Or Bunch of Phrases Won''t Make You Agile!",
  "published": "0000-00-00 00:00:00",
  "postType": "page",
  "slug": "/814",
  "status": "draft",
  "tags": [],
  "categories": [],
  "content": "<ul>\r\n\t<li>The code is the documentation</li>\r\n\t<li></li>\r\n</ul>",
  "excerpt": ""
 },
 {
  "title": "Backlog",
  "published": "2011-08-29 22:25:26",
  "postType": "page",
  "slug": "/wiki/backlog/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "Personal log of mid-term tasks.\r\n<ol>\r\n\t<li>Read <a href=\"www.amazon.com/Nonviolent-Communication-Language-Life-Changing-Relationships-ebook/dp/B0019O6IWU/\">Nonviolant Communication</a></li>\r\n\t<li>Read <a href=\"www.amazon.com/Goal-Process-Ongoing-Improvement-ebook/dp/B002LHRM2O/\">The Goal</a></li>\r\n\t<li><em>Read <del>Joy of Clojure</del>, <del>Implementation Patterns</del>, Lean from the Trenches, Scrum from the Trenches, Management 3.0, Lean Startup, <del>Running Lean</del>, Why\r\n</em></li>\r\n\t<li>Reach enlightment</li>\r\n</ol>\r\nDone (oldest first):\r\n<ol>\r\n\t<li><del>Publish new version of <a href=\"https://sourceforge.net/apps/mediawiki/jeeutils/index.php?title=DbUnit_Express\">DbUnit Express</a></del></li>\r\n\t<li><del>Bring <a href=\"https://github.com/holyjak/static-jsfexpression-validator\">JSF EL Validator</a> to a \"final\" state and release v.1.0 (Deadline: 31/12 2012)</del></li>\r\n\t<li><del>Finish writing notes for <a href=\"https://www.amazon.com/exec/obidos/ASIN/0321437381/poppendieckco-20\">Implementing Lean Software Development: From Concept to Cash</a> (Deadline:6/1 2012, old: 7/12 2011)</del></li>\r\n\t<li><del>Finish writing notes for <a href=\"https://www.amazon.com/Agile-Project-Management-Microsoft-Professional/dp/073561993X\">Agile Project Management with Scrum</a></del></li>\r\n\t<li><del>Read <a href=\"https://www.amazon.com/Flawless-Consulting-Guide-Getting-Expertise/dp/0470620749\">Flawless Consulting</a> (Deadline: 31/2 2012, old: 1/1 2012; done: 11/1)</del></li>\r\n\t<li><del>Finish <a href=\"https://www.4clojure.com/user/jakubholynet\">4Clojure</a> easy problems to learn Clojure (Deadline: 1/2012)</del></li>\r\n\t<li><del>Read <a href=\"https://specificationbyexample.com/\">Specification by Example</a> (Done 4/2012)</del></li>\r\n</ol>\r\nTo learn:<br><br>Node4j, Clojure (of course!) perhaps with Noir, Twitter's <a href=\"https://twitter.github.com/bootstrap/\">Bootstrap</a> (incl. LESS).<br><br>To consider:<br><br>Cofee/ClojureScript, <a href=\"https://html5boilerplate.com/docs/\">HTML5 Boilerplate</a>\r\n<div class=\"linkscent-iconblock\" style=\"float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent !important;width:auto !important;height:auto !important;display:block !important;overflow:visible !important;position:static !important;text-indent:0 !important;z-index:auto !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:auto !important;top:auto !important;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;margin:0!important;padding:0!important;\"><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:80px;top:99px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;background:url('http://www.amazon.com/favicon.ico') no-repeat scroll center center transparent !important;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:98px;top:99px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /></div>\r\n<div class=\"linkscent-iconblock\" style=\"float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent !important;width:auto !important;height:auto !important;display:block !important;overflow:visible !important;position:static !important;text-indent:0 !important;z-index:auto !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:auto !important;top:auto !important;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;margin:0!important;padding:0!important;\"><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:198px;top:136px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;background:url('http://www.amazon.com/favicon.ico') no-repeat scroll center center transparent !important;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:216px;top:136px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:228px;top:174px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;background:url('//interclue/content/cluecore/skins/default/linkscentExternal.png') no-repeat scroll center center transparent !important;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:246px;top:174px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /></div>\r\n<div class=\"linkscent-iconblock\" style=\"float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent !important;width:auto !important;height:auto !important;display:block !important;overflow:visible !important;position:static !important;text-indent:0 !important;z-index:auto !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:auto !important;top:auto !important;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;margin:0!important;padding:0!important;\"><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:140px;top:156px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;background:url('http://www.4clojure.com/favicon2.ico') no-repeat scroll center center transparent !important;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:158px;top:156px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /></div>\r\n<div class=\"linkscent-iconblock\" style=\"float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent !important;width:auto !important;height:auto !important;display:block !important;overflow:visible !important;position:static !important;text-indent:0 !important;z-index:auto !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:auto !important;top:auto !important;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;margin:0!important;padding:0!important;\"><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:275px;top:42px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;background:url('http://sourceforge.net/favicon.ico') no-repeat scroll center center transparent !important;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:293px;top:42px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /></div>\r\n<div class=\"linkscent-iconblock\" style=\"float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent !important;width:auto !important;height:auto !important;display:block !important;overflow:visible !important;position:static !important;text-indent:0 !important;z-index:auto !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:auto !important;top:auto !important;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;margin:0!important;padding:0!important;\"><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:185px;top:61px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;background:url('http://github.com/favicon.ico') no-repeat scroll center center transparent !important;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;background:url('//interclue/content/cluecore/skins/default/sprites.png') no-repeat scroll -144px -96px transparent;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:203px;top:61px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" width=\"16\" height=\"16\" /><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:221px;top:61px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /></div>",
  "excerpt": ""
 },
 {
  "title": "Testing",
  "published": "2011-09-05 18:15:39",
  "postType": "page",
  "slug": "/wiki/development/testing/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "<h1>Testing in General</h1><br><br><h2>Naming Conventions</h2><br><br>Based on Working Effectively with Legacy Code, ch.18:<br><br><ul>\n    <li>Fake* (ex.: FakeEmailSender) - mocked dependencies</li>\n    <li>Testing* (ex.: TestingOrderController) - test subclasses of production classes (the Sublcass and Override Method pattern)</li>\n    <li>*IT, *Test - integration / unit test classes</li>\n</ul><br><br>Test Doubles: Fake x mock x stub differences <a title=\"Mocks Aren't Stubs\" href=\"https://martinfowler.com/articles/mocksArentStubs.html#TheDifferenceBetweenMocksAndStubs\">explained by Fowler</a>:<br><br><ul>\n    <li>Dummy objects - passed around but never actually used</li>\n    <li>Fake - a working implementation with shortcuts making it unsuitable for production (e.g. in-memory DB)</li>\n    <li>Stubs - provide configured answers to calls made during test and usually nothing outside of these; may also record information about the calls</li>\n    <li>Mocks - \"<em>objects pre-programmed with expectations which form a specification of the calls they are expected to receive</em>\" =&gt; behavior verification (x state verif.)</li>\n</ul><br><br><h2>TDD &amp; Value of Testing</h2><br><br>Do I always need to write tests first? No, it is not suitable for example when exploring or in general when - for same rare reasons - the benefit is less than the cost (-&gt; <a title=\"Economics of Coding\" href=\"/wiki/development/economics-of-coding/\">Economics of Coding</a>).<br><br>Do I need 100% coverage? Hell no, what is the value of testing getters/setters? (versus the cost?) See Brian Marick's <a href=\"https://www.exampler.com/testing-com/writings/coverage.pdf\">How to Misuse Code Coverage</a> (also reflected in Martin Fowler's post on <a href=\"https://martinfowler.com/bliki/TestCoverage.html\">Test Coverage</a>).<br><br>Kent Beck answering a <a href=\"https://stackoverflow.com/a/153565\">question about how much testing to do</a> (highlighted by me):<br><br><blockquote><strong>I get paid for code that works, not for tests, so my philosophy is to test as little as possible to reach a given level of confidence</strong> (I suspect <strong>this level of confidence is high compared to industry standards</strong>, but that could just be hubris). If I don’t typically make a kind of mistake (like setting the wrong variables in a constructor), I don’t test for it. I do tend to make sense of test errors, so I’m extra careful when I have logic with complicated conditionals. When coding on a team, I modify my strategy to carefully test code that we, collectively, tend to get wrong.<br><br>Different people will have different testing strategies based on this philosophy, but that seems reasonable to me given the immature state of understanding of how tests can best fit into the inner loop of coding. Ten or twenty years from now we’ll likely have a more universal theory of which tests to write, which tests not to write, and how to tell the difference. In the meantime, experimentation seems in order.</blockquote><br><br>Kent Beck has posted a good summary of the benefits of TDD in \"<a href=\"https://m.facebook.com/note.php?note_id=472392329460303\">Functional TDD: A Clash of Cultures</a>\" – double checking of the logic (by the implementation and the, preferably quite different, test), solution decomposition (focus on part of the problem, once solve be sure it stays solved),  automatic checking of correctness, outside in design (API first, implementation after that). Plus the pleasant experience of the continuous cycle of tension (failing test) – relief (green).<br><br>Update: See <a title=\"Permanent link to Do You Know Why You Are Testing?! (On The Principles Underlying TDD)\" href=\"/2012/10/27/the-principles-underlying-test-driven-development-or-why-you-should-tdd/\" rel=\"bookmark\">Do You Know Why You Are Testing?! (On The Principles Underlying TDD)</a><br><br><h2>References</h2><br><br><ul>\n    <li><a href=\"https://pragprog.com/magazines/2012-10/its-not-about-the-unit-tests\">It’s Not About the Unit Tests - Learning from iOS Developers</a>: iOS developers don't do much testing yet they manage to produce high quality. How is that possible? The key isn't testing itself, but caring for the code. (Of course, iOS is little special: small apps, no legacy, a powerful platform that does lot for the apps, very visual apps.)</li>\n</ul><br><br><h1>Unit Testing Toolbox (for Java)</h1><br><br>A collection of test-related links to libraries, tools, utilities, concepts etc.<br><br><h2>Notes about Java testing</h2><br><br><ul>\n    <li>Access to tested methods - non-private methods &amp; test in the same directory or private methods accessed via java.lang.reflect and setAccessible <a href=\"https://www.onjava.com/pub/a/onjava/2003/11/12/reflection.html?page=last&amp;x-showcontent=text\">http://www.onjava.com/pub/a/onjava/2003/11/12/reflection.html?page=last&amp;x-showcontent=text</a>.</li>\n    <li>JUni 4.4: assertThat and fluent API via Hamcrest (use junit-dep and full Hamcrest to get much more matchers than the few integrated into JUnit)\n<ul>\n    <li>JUnit 4: @Test, @Before, @After, <em>@RunWith(value=Parameterized.class)</em> and <em>@Parameters public static Collection&lt;Object[]&gt; data() { ... }</em>; and public void testXY(Object param...);</li>\n</ul>\n</li>\n    <li>Great support for testing in Groovy\n<ul>\n    <li><a href=\"https://gmock.org/\" rel=\"nofollow\">Gmock</a> - very easy to use and very readable code, e.g. mock only selected methods and static methods... . Used inside a GmockTasteCase or GroovyTestCase</li>\n    <li>GroovyTestCase - uses just the standard Java assert instead of the various assertEquals etc. Ex.: <em>assert bluegroupsService.groupExist(\"noSuchGroup\")</em> =&gt; <em>java.lang.AssertionError: Expression: bluegroupsService.groupExist(<em>noSuchGroup</em>)</em></li>\n    <li><a href=\"https://groovy.codehaus.org/ObjectGraphBuilder\">ObjectGraphBuilder </a></li>\n</ul>\n</li>\n</ul><br><br><h2>Libraries for unit testing</h2><br><br><ul>\n    <li><strong><a href=\"https://www.unitils.org/summary.html\" rel=\"nofollow\">Unitils</a></strong> (Java 5) -\n<blockquote>an open source library aimed at making unit testing easy and maintainable. Unitils builds further on existing libraries like <a href=\"https://www.dbunit.org/\" rel=\"nofollow\">dbunit</a> and integrates with <a href=\"https://www.junit.org/\" rel=\"nofollow\">JUnit</a> and <a href=\"https://testng.org/\" rel=\"nofollow\">TestNG</a>. Unitils provides general asserion utilities (e.g. via reflection), support for database testing, support for testing with mock objects and offers integration with [or mocking out] <a href=\"https://www.springframework.org/\" rel=\"nofollow\">Spring</a>, <a href=\"https://www.hibernate.org/\" rel=\"nofollow\">Hibernate</a> and the Java Persistence API (JPA). It has been designed to offer these services to unit tests in a very configurable and loosely coupled way. As a result, services can be added and extended very easily. EasyMock integration</blockquote>\n(I'd personally prefer Mockito). See for example <em>ReflectionAssert.assertReflectionEquals</em>, which recursively compares JavaBeans without using their equals, i.e. comparing only primitive values - extremely useful! (Groovy has something similar.)</li>\n    <li>Mocking\n<ul>\n    <li><a href=\"https://code.google.com/p/powermock/\">PowerMock</a> (Java 5) - mj. umí mock pro statické metody; rozšiřuje EasyMock/Mockito použitím custom classloaderu a bytekódové manipulace tkž může mockovat statické, privátní a final metody aj. Podporuje EasyMock a Mockito.</li>\n    <li><a id=\"ttf2\" title=\"an intro article\" href=\"https://community.jboss.org/wiki/MockObjectsforTestDrivenJSFDevelopmentorgjbosstest-jsfjsf-mockproject\">JBoss jsf-mock</a>: can be used to create mock objects for all the main JSF entities. Also the library is fully compatible with JSF 2.0</li>\n</ul>\n</li>\n    <li>Concurrent code testing (some of these are old but it doesn't mean they're worthless!)\n<ul>\n    <li><a href=\"https://www.cs.umd.edu/projects/PL/multithreadedtc/overview.html\">MultithreadedTC</a> (2007) is a wonderful framework for testing concurrent applications; it enables you to test a particular interleaving of blocking method calls from different threads (once all threads block, it increases its counter and notifies any thread waiting for the counter).</li>\n    <li><a href=\"https://code.google.com/p/junit-toolbox/\">junit-toolbox</a>' <a href=\"https://junit-toolbox.googlecode.com/git/javadoc/com/googlecode/junittoolbox/MultithreadingTester.html\">MultithreadingTester</a> (run concurrently, several times), <a href=\"https://junit-toolbox.googlecode.com/git/javadoc/com/googlecode/junittoolbox/ParallelRunner.html\" rel=\"nofollow\">ParallelRunner</a> (run @Test/@Theory methods in parallel)</li>\n    <li><a href=\"https://tempusfugitlibrary.org/documentation/junit/parallel/\">tempus-fugit's ConcurrentTestRunner</a> (2011)- each @Test runs in its own thread; its ConcurrentRule with @Concurrent(count = #threads) enables you to run a particular test in several threads at once and can be combined with RepeatingRule + @Repeating(repetition = #) to run in multiple times in each thread. It has also <a href=\"https://tempusfugitlibrary.org/documentation/\">other goodies</a> worth checking out.</li>\n</ul>\n</li>\n    <li>Integration\n<ul>\n    <li><a id=\"bin9\" title=\"JBoss Arquillian\" href=\"https://java.dzone.com/articles/arquillian-making-integration\">JBoss Arquillian</a> - in-container (integration) testing of JEE</li>\n    <li><a href=\"https://quintanasoft.com/dumbster/\">Dumbster</a> - mock SMTP server for unit testing (start in @Before, get sent messages, stop)</li>\n</ul>\n</li>\n    <li>Specific environments\n<ul>\n    <li>LDAP: embedded LDAP for unit testing w/ apacheDS: <a href=\"https://directory.apache.org/apacheds/1.0/using-apacheds-for-unit-tests.html\">apacheds-for-unit-tests (v1.0)</a> (or <a href=\"https://directory.apache.org/apacheds/1.5/using-apacheds-for-unit-tests.html\">for v1.5</a>, which adds dynamic schema and config.)</li>\n    <li>J(2)EE - <a href=\"https://mockrunner.sourceforge.net/\">Mockrunner</a> “stubs out J2EE by magic”; it has stubs that provide out of the box functionality for JMS, JDBC, Servlet and many other J2EE APIs. It should allow unit testing of code that depends on J2EE APIs outside a container.</li>\n</ul>\n</li>\n    <li>Various\n<ul>\n    <li><a id=\"x5_i\" title=\"MagicTest\" href=\"https://www.magicwerk.org/page-magictest-overview.html\">MagicTest</a>: Allow to check multiple exceptional states in 1 method with nearly no overhead (exceptions are catched and stored and you can then say that they're the expected result); <a id=\"s-x8\" title=\"an intro article\" href=\"https://java.dzone.com/articles/effectively-handling\">an intro article</a></li>\n    <li><a id=\"f_6v\" title=\"parallel-junit\" href=\"https://parallel-junit.dev.java.net/\">parallel-junit</a> - A small library that lets you run JUnit tests in parallel.</li>\n    <li><a id=\"n5y6\" title=\"NetBeans' Memory Leak Unit Test\" href=\"https://blogs.sun.com/tor/entry/leak_unit_tests\">NetBeans' Memory Leak Unit Test</a> library (assertGC performs some dirty tricks to make sure that GC is indeed run and, if the weak reference under test hasn't been GC-ed, prints details of who references the object)</li>\n    <li>JBoss <a href=\"https://www.jboss.org/byteman\">Byteman</a> - tool for <a href=\"/2012/02/25/cool-tools-fault-injection-into-unit-tests-with-jboss-byteman-easier-testing-of-error-handling/\">fault injection into the tested code</a> via AOP and orchestrating multipe threads to exercise possible concurrency issues</li>\n</ul>\n</li>\n    <li>JUnit addons and extensions\n<ul>\n    <li><a id=\"ct3m\" title=\"TwiP\" href=\"https://twip.sourceforge.net/howto.html\">TwiP</a> (JUnit 4, Java 5) - parameters for individual methods and more - more flexible than @ParameterizedRunner</li>\n</ul>\n</li>\n    <li>Mutation testing\n<ul>\n    <li><a id=\"lupo\" title=\"Jester\" href=\"https://jester.sourceforge.net/\">Jester</a> (and Maven plugin Gester) - Kent Beck: <em>“Why just think your tests are good when you can know for sure? Sometimes Jester tells me my tests are airtight, but sometimes the changes it finds come as a bolt out of the blue. Highly recommended.”</em> <a id=\"b5tj\" title=\"An intro article\" href=\"https://www.ibm.com/developerworks/java/library/j-jester/\">An intro article</a>.</li>\n</ul>\n</li>\n    <li><a href=\"https://java.net/projects/quickcheck/pages/Home\">QuickCheck</a> - The goal of QuickCheck is to replace scenario-based testing with specification-based testing. A QuickCheck-based test tries to cover the laws of a domain whereas classical scenario-based testing can only test the validity for heuristically (manually) picked values. Basically QuickCheck is about generators of data.</li>\n</ul><br><br><h2>Test execution</h2><br><br><ul>\n    <li><a href=\"https://test-load-balancer.github.com/\">Test Load Balancer </a>- partitions your tests for executing them in parallel in multiple threads or machines while doing also some other interesting stuff like re-ordering them to have the last failed ones first. It makes sure no tests is executed more times and none is omitted. A benefit is that it is standalone tool that can be integrated into private builds, CI etc. It's written in Java but supports also non-JVM languages. Currently (10/2011) it supports for example. JUnit, Cucumber, Ant, Java, Ruby. Support for Maven is in progress. What it does in detail: \"Balancer gets a list of all the tests that need to be executed from the build script (after the build script has been invoked, and before tests start running). It then prunes that list to make a subset using the historical test information obtained from the Server. This smaller subset is passed-on to the test framework to execute. Balancer continues to listens to events published by the test framework as these tests execute, to record result and time taken by each test. This data is then posted across to the TLB server and acts as seed data for balancing/ordering future builds.\"</li>\n</ul><br><br><h1>Testing-Related Links</h1><br><br><ul>\n    <li><a title=\"(PDF)\" href=\"https://docs.google.com/viewer?url=http://www.agitar.com/downloads/TheWayOfTestivus.pdf\" rel=\"nofollow\">The Way of Testivus</a> - ancient eastern testing wisdom :-) - really worthy brochure for all pragmatic testers</li>\n    <li>Blog <a href=\"https://java.dzone.com/articles/cost-testing\" rel=\"nofollow\">Cost of Testing</a> (10/09)  - a two-week one-man experiment in coding with testing with interesting results such as that only 10% of time was spent writing tests even though their extent is 40-50% of the whole codebase (mainly because tests are usually quite simple, no complicated logic etc.)</li>\n    <li><a href=\"https://cdn.ttgtmedia.com/searchSoftwareQuality/downloads/BeautifulTests.pdf\">Alberto Savoia: Beautiful Tests</a> (a chapter from Beautiful Code) - a good and inspiring example of the though process behind creating a set of tests. Included: a smoke test, gradual addition of boundary tests, randomized testing, testing of performance characteristics. Conclusion: Writing test code can be every bit creative and challenging and tests document the code’s intended behavior and boundaries; help you improve the code; help you gain confidence in the functionality and performance.</li>\n    <li><a href=\"https://www.dzone.com/links/rss/getting_started_with_tdd_in_java_using_eclipse_sc.html\">Getting Started with Tdd in Java using Eclipse [Screencast]</a> - TDD in practice with application of a number of best practices and interesting ideas regarding testing (such as not having for 1 production class just 1 test but more, one for each specific test setup). It has 50m but is really worth the time</li>\n    <li><a href=\"https://xunitpatterns.com/\">xUnitPatterns</a> - one of the elementary sources that anybody interested in testing should read through. Not only it explains all the basic concepts (<a href=\"https://xunitpatterns.com/Mock%20Object.html\">mocks</a>, <a href=\"https://xunitpatterns.com/Test%20Stub.html\">stubs</a>, <a href=\"https://xunitpatterns.com/Fake%20Object.html\">fakes</a>,...) but also many pitfalls to avoid (various <a href=\"https://xunitpatterns.com/Test%20Smells.html\">test smells</a> such as <a href=\"https://xunitpatterns.com/Fragile%20Test.html\">fragile tests</a> due to <em>Data Sensitivity</em>, <em>Behavior Sensitivity</em>, <em>Overspecified Software</em> [due to mocks] etc.), various strategies (such as for <a href=\"https://xunitpatterns.com/Fresh%20Fixture.html\">fixture setup</a>), and general <a href=\"https://xunitpatterns.com/Principles%20of%20Test%20Automation.html\">testing principles</a>.</li>\n    <li><a href=\"https://infinitest.org/\" rel=\"nofollow\">Infinitest</a> is an interesting tool that brings <a href=\"https://groups.csail.mit.edu/pag/continuoustesting/tutorial.html\" rel=\"nofollow\">Continuous Testing</a> to your IDE (similar to Kent Beck's JUnitMax) &amp; <a href=\"https://java.dzone.com/articles/giving-infinitest-and\" rel=\"nofollow\">an experience report</a></li>\n    <li>When software testing failes -ARIANE 5 Flight 501 FailureReport by the Inquiry Board</li>\n    <li>Blog: <a href=\"https://paulszulc.wordpress.com/2009/08/25/writing-even-more-readable-and-maintainable-tests/\" rel=\"nofollow\">extremely readable test of a web app</a> and <a href=\"https://paulszulc.wordpress.com/2009/08/25/writing-even-more-readable-and-maintainable-tests/\" rel=\"nofollow\">even more readable webapp test</a> - really inspiring</li>\n    <li>F. Martinig's <a href=\"https://blog.martinig.ch/?p=304\">10 + 1 Favorite Unit Testing Articles</a>, 2009</li>\n    <li><a href=\"https://blog.james-carr.org/2009/07/22/upcoming-javascript-testing-framework-comparisons/\" rel=\"nofollow\">Upcoming: Javascript Testing Framework Comparisons</a></li>\n</ul><br><br><h2>Testing services etc.</h2><br><br><ul>\n    <li><a href=\"https://xdissent.github.com/ievms/\">VM wth IE 6-9 - ievms</a> (make take hours to install)</li>\n    <li> <a href=\"https://www.browserstack.com/\" target=\"_blank\" rel=\"nofollow\">http://www.browserstack.com/</a> -- testing with proper machine through the browser, support for IE, mobile, and more</li>\n</ul><br><br><h2>Code quality metrics</h2><br><br>Bad quality =&gt; harder testing, that's why it is here.<br><br><ul>\n    <li><a href=\"https://code.google.com/p/testability-explorer/\" rel=\"nofollow\">Testability-explorer </a>by Misko Havery, the Google testing guru - an open-source tool, which analyzes Java bytecode and computes how difficult it will be to write unit tests for the code</li>\n    <li><a href=\"https://www.spinellis.gr/sw/ckjm/\">ckjm</a>— Chidamber and Kemerer Java Metrics - WMC: Weighted methods per class, DIT: Depth of Inheritance Tree, NOC: Number of Children, CBO: Coupling between object classes, RFC: Response for a Class, LCOM: Lack of cohesion in methods. Bonus - Ca: Afferent couplings,NPM: Number of public methods</li>\n    <li><a title=\"External Link\" href=\"https://www.redhillconsulting.com.au/products/simian/\">Simian</a> (Similarity Analyser; free for non-commercial use)</li>\n</ul><br><br><h2>Books</h2><br><br><ul>\n    <li>Martin Fowler: <a id=\"c.xl\" title=\"XUnit Test Patterns - Refactoring Test Code\" href=\"https://xunitpatterns.com/\">XUnit Test Patterns - Refactoring Test Code</a>, 2008 - patterns and anti-patterns for unit tests (I haven't read it yet)</li>\n    <li><a href=\"https://www.amazon.com/Effective-Unit-Testing-guide-Developers/dp/1935182579/\">Lasse Koskela: Effective Unit Testing: A guide for Java Developers</a> (2013) - guide for writting better tests for those who already know how to test. A major part is a catalog of test smells in the form description - example - how to fix - summary, grouped by the topics of readability, maintainability, trustworthiness.  There are also chapters on mocking, testign with Groovy, testable design, speading up test execution etc. <a href=\"https://www.amazon.com/review/R2QZ8BRNFLQPVO/ref=cm_sw_r_fa_cm_cr_notf_app_fbt?post_id=100000437359523_114035022115712#_=_\">Read this review</a>.</li>\n</ul><br><br><h1>Test code samples &amp; discussion</h1><br><br><h2>Naming</h2><br><br>What can be improved with test method name\n@Test public void empty_credit_card_number_should_return_false ?<br><br><ul>\n<li>I believe it should rather be called ...should_be_invalid because we want tests to \"tell a story\", to be more business logic-oriented (\"card invalid\") than implementation-oriented (\"return false\"); with my name it's OK to change the validate(..) method to throw an exception instead of returning false while the original name would need to be changed</li>\n</ul><br><br><h2>Decide in the latest responsible moment</h2><br><br>What could be improved with the following 1st test method code in the TDD approach?\n... assertFalse(CreditCardValidator.validate(\"\")); ...<br><br><ul>\n<li>I believe it's completely unnecessary and harmful to assume and enforce that there 1) exists the class CreditCardValidator 2) and that it has a statically-caled method; what if we later decide that we actually need an instance method instead (which is quite likely)?</li>\n<li>I think that a better solution is to begin by adding the method validate(..) to the test class itself and let this method decide how to perform the validation\n-- thus we can start implementation right there before migrating to a suitable target class\n-- it's no-brainer to switch from static call to instance call because there is just 1 place to change\n-- this approach allows us to postpone the decision how the vlaidation is called til the latest possible moment =&gt; one of the Lean thinking gold principles\n-- when things become more stable, it's a simple refactoring to inline this helper method</li>\n</ul><br><br><div class=\"linkscent-iconblock\" style=\"float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent !important;width:auto !important;height:auto !important;display:block !important;overflow:visible !important;position:static !important;text-indent:0 !important;z-index:auto !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:auto !important;top:auto !important;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;margin:0!important;padding:0!important;\"><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:353px;top:2020px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;background:url('//interclue/content/cluecore/skins/default/linkscentExternal.png') no-repeat scroll center center transparent !important;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:371px;top:2020px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /></div><br><br><div class=\"linkscent-iconblock\" style=\"float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent !important;width:auto !important;height:auto !important;display:block !important;overflow:visible !important;position:static !important;text-indent:0 !important;z-index:auto !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:auto !important;top:auto !important;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;margin:0!important;padding:0!important;\"><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:166px;top:154px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;opacity:0;background:url('http://www.onjava.com/favicon.ico') no-repeat scroll center center transparent !important;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:184px;top:154px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:289px;top:1005px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;background:url('//interclue/content/cluecore/skins/default/linkscentExternal.png') no-repeat scroll center center transparent !important;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:307px;top:1005px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:232px;top:1043px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;background:url('/favicon.ico') no-repeat scroll center center transparent !important;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;background:url('//interclue/content/cluecore/skins/default/sprites.png') no-repeat scroll -48px -96px transparent;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:250px;top:1043px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" width=\"16\" height=\"16\" /><img class=\"linkscent-icon\" style=\"float:none !important;border:0 solid #ff0000 !important;background:none repeat scroll center center transparent;width:16px !important;height:16px !important;display:none;overflow:visible !important;position:absolute !important;text-indent:0 !important;z-index:2147483635 !important;max-width:none !important;min-width:0 !important;max-height:none !important;min-height:0 !important;left:268px;top:1043px;bottom:auto !important;right:auto !important;line-height:16px !important;white-space:nowrap !important;visibility:hidden;opacity:0;margin:0;padding:0!important;\" src=\"//interclue/content/cluecore/skins/default/pixel.gif\" alt=\"\" /></div>",
  "excerpt": ""
 },
 {
  "title": "Development",
  "published": "2011-10-09 11:20:53",
  "postType": "page",
  "slug": "/wiki/development/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "<em>(See the <a href=\"/wiki/\">parent page</a> with its global index for development-related subpages.)</em><br><br><h3>Snippets &amp; Tips</h3><br><br><h4>Bash</h4><br><br><h5>Loop from 00 til 11</h5><br><br><pre><code>for i in $(seq -f '%02g' 2 14); do ... done</code></pre><br><br><h3>Remote pair-programming tools</h3><br><br>What people use:<br><br><ol>\n    <li>Screensharing (VNC, newer <a href=\"https://nomachine.com/\">NX</a>, Skype, Google+ etc.) - high-bandwidth, not responsive enough</li>\n    <li>ssh + screen/tmux and G+ for audio/video - low bandwidth, responsive, text/terminal only - popular with vim</li>\n    <li>Special tools\n<ol>\n    <li><a href=\"https://www.eclipse.org/ecf/\">Eclipse ECF</a> should be usable for remote pair-programming, how is unclear from its docs (<a href=\"https://wiki.eclipse.org/DocShare_Plugin\">DocShare</a> (old) / <a href=\"https://wiki.eclipse.org/RT_Shared_Editing\">RT Shared Editing</a> (old too?)?)</li>\n    <li><a href=\"https://www.saros-project.org/\">Saros - Eclipse plugin</a> for distributed collaborative software development (last 12/2012?)</li>\n    <li><a href=\"https://github.com/proxylocal/proxylocal-gem#readme\">ProxyLocal</a> - proxies your local web-server and makes it publicly available over the internet - useful e.g. when doing web development</li>\n    <li><a href=\"https://emacswiki.org/emacs/Rudel\">Emacs + Rudel</a> (<a href=\"https://technomancy.us/129\">experience report, 2009</a>)</li>\n</ol>\n</li>\n</ol><br><br><ul>\n    <li>PivotLabs: <a href=\"https://pivotallabs.com/how-we-use-tmux-for-remote-pair-programming/\">how we use tmux for remote pair programming</a> (6/2012) - with vim, many config tips including tuning mouse support (a <a href=\"https://pragprog.com/book/bhtmux/tmux\">useful tmux book</a>) + <a href=\"https://vimeo.com/51001103\">Tech Talk on Remote Pairing</a> (2012.10.05)</li>\n    <li>Evan Light does lot of remote pair programming and <a href=\"https://evan.tiggerpalace.com/articles/2011/10/17/some-people-call-me-the-remote-pairing-guy-/\">summarizes the experience</a> (using G+ for A/V and Tmux plus some other tools such as ProxyLocal and DynDNS+DD-WRT; 2011)</li>\n    <li>Jason Haruska has described <a href=\"https://haruska.com/2009/09/29/remote-pair-programming-with-screen-and-vim/\">pros &amp; cons of the different solutions</a> (using screen+vim himself, 2009)</li>\n    <li><a href=\"https://remotepairprogramming.com/\">remotepairprogramming.com</a> - tool tips and setup etc.</li>\n</ul><br><br><h2>Coding</h2><br><br><h3>Guidelines</h3><br><br><h4>Commit Message Guidelines</h4><br><br>Follow the <a href=\"https://stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting\">50/70 format</a> as much as feasible:<br><br><pre><code>Summarize clearly in one line what the commit is about (preferably less than 50 chars)<br><br>Describe the problem the commit solves or the use\ncase for a new feature. Justify why you chose\nthe particular solution. \n(Preferably 70 chars per line)\n</code></pre><br><br><ul>\n    <li>Write the summary line and description of what you have done in the imperative mode, that is as if you were commanding someone. Write “fix”, “add”, “change” instead of “fixed”, “added”, “changed”.</li>\n    <li>The summary must describe both what the patch changes, as well as why the patch might be necessary. It is challenging to be both succinct and descriptive, but that is what a well-written summary should do.</li>\n    <li>Always leave the second line blank.</li>\n    <li>Line break the commit message (to make the commit message readable without having to scroll horizontally in gitk, git log etc.).</li>\n    <li>Try to keep the summary line to 50 chars, though this isn't a hard limit (The subject line is used all over Git, oftentimes in truncated form if too long. But f.ex. Linux uses ~ 70 chars also for the commit summary line)</li>\n    <li>Feel free to use bulleted lists; ex.: \"- list item\" (let's us unite on using f.ex. -)</li>\n</ul><br><br>Gerrit has <a href=\"https://www.mediawiki.org/wiki/Gerrit/Commit_message_guidelines\">read-worthy tips for the content of the message</a>.<br><br>Sources: Tom Pope's blog about the <a href=\"https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\">50/72 format</a>, <a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-commit.html\">git-commit man page</a> (50 chars recommendation), <a href=\"https://git.kernel.org/cgit/git/git.git/tree/Documentation/SubmittingPatches?id=HEAD\">submitting patches guidelines for Git itself</a> (50, imperative), <a href=\"https://stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting\">SO</a>, <a href=\"https://github.com/erlang/otp/wiki/Writing-good-commit-messages\">Erlang/OTP</a> guidelines.<br><br><h2>Online Resources</h2><br><br><h3>Development best practices</h3><br><br><ul>\n    <li><a href=\"https://nathanmarz.com/blog/principles-of-software-engineering-part-1.html\">Nathan Marz: Principles of Software Engineering, Part 1</a> - Nathan has worked with Big Data at Twitter and other places and really knows the perils or large, distributed, real-time systems and this post contains plenty of valuable advice for making robust, reliable SW. Main message: \"<em>there's a lot of <strong>uncertainty</strong> in software engineering</em>\"; every SW operates correctly only for a certain range of inputs (including volume, HW it runs on, ...) and you never control all of them so there always is an opportunity for failure; you can't predict what inputs you will encounter in the wild. <em>\"[..] while software is deterministic, you can't treat it as deterministic in any sort of practical sense if you want to build robust software.</em>\" \"<em><strong>Making software robust is an iterative process</strong>: you build and test it as best you can, but inevitably in production you'll discover new areas of the input space that lead to failure. Like rockets, it's <strong>crucial to have excellent monitoring</strong> in place so that these issues can be diagnosed.</em>\". From the content: Sources of uncertainty (bugs, humans, requirements, inputs, ..), Engineering for uncertainty (minimize dependencies, lessen % of cascading failure [JH: -&gt; <a href=\"https://github.com/Netflix/Hystrix\">Hystrix</a>], measure and monitor)\n<ul>\n    <li><a href=\"https://nathanmarz.com/blog/suffering-oriented-programming.html\">Suffering-oriented programming</a> is certainly also worth reading (summary: do not start with great designs; only start generalizing and creating libs when you have suffered enough from doing things more manually and thus learned the domain; make it possible &gt; make it beautiful &gt; make it fast, repeat)</li>\n</ul>\n</li>\n    <li>Kent Beck: <a href=\"https://www.youtube.com/watch?v=nIonZ6-4nuU\">Making Making CoffeeScript</a>  (screencast, 19min) - an inspiring demonstration of some key development practices: a super-short feedback loop, evolving and refactoring code in small steps without ever breaking it (-&gt; <a title=\"Parallel Design (Parallel Change)\" href=\"/wiki/development/parallel-design-parallel-change/\">Parallel Change</a>), TDD as a vessel of feadback, without a testing framework.</li>\n</ul><br><br><h3>Web dev</h3><br><br><ul>\n    <li><a href=\"https://devdocs.io/\">devdocs.io</a>: \"an all-in-one API documentation reader for [web] developers,\" navigable via keyboard - JS, HTML, CSS, DOM, DOM events, jQuery, Underscore.js</li>\n</ul><br><br><h2>Software Engineering</h2><br><br><ul>\n    <li><a href=\"https://www.cl.cam.ac.uk/~srk31/blog/2014/10/07#seven-type-sins\">Seven deadly sins of talking about “types”</a> by Dr Stephen Kell - what goes wrong in many static vs. dynamic typing discussions - worth being aware of before participating: 1. Not distinguishing abstraction from checking, 2. Pretending that syntactic overhead is the issue, 3. Patronising those outside the faith, 4. Presenting type-level programming as a good thing, 5. Fetishising Curry-Howard, 6. Equivocating around “type-safety,” 7. Omitting the inconvenient truths. See also the essay <a href=\"https://www.cl.cam.ac.uk/~srk31/#onward14\">“In Search of Types”</a> attempts to be a dispassionate review of some of the different concepts, purposes and attitudes surrounding the word “type” in programming.\n\"[..] they [type annotations] force you to structure your code around type-checkability. This is inevitable, since type checking is<em>by definition</em> a specific kind of <em>syntactic</em> reasoning.\" \"Proof has a cost, and the appropriate expenditure depends on the task.\" \"Type systems <em>cannot</em> be a one-stop solution for specification and verification. They are limited by definition. They reason only syntactically, and they specify only at the granularity of expressions.\"</li>\n</ul>",
  "excerpt": ""
 },
 {
  "title": "Tools",
  "published": "2011-10-09 11:22:18",
  "postType": "page",
  "slug": "/wiki/tools/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "<em>(For the index of Tools sub-pages see the <a href=\"/wiki/\">parent page</a> with its global index.)</em><br><br><h1>Mini-notes</h1><br><br><ul>\n    <li>Command line\n<ul>\n    <li>Bash</li>\n</ul>\n</li>\n    <li>Vim</li>\n    <li>jq</li>\n</ul><br><br><h2>Command line</h2><br><br>Quickly jump to a directory based on frequency/clever substring matching:<br><br><ul>\n    <li><a href=\"https://github.com/rupa/z\">z</a> (zsh, bash) - \"z is the new j, yo\" - also <a href=\"https://github.com/rupa/j2\">j2</a> and the fish clone <a href=\"https://github.com/sjl/z-fish\">z-fish</a></li>\n    <li><a href=\"https://www.linuxjournal.com/article/10585?page=0,0\">DirB, Directory Bookmarks for Bash</a> (<a href=\"https://www.dirb.info/\">home</a>) – moving efficiently among favourite directories (<code>s &lt;name&gt;</code> to create a bookmark for pwd, <code>g &lt;bookmark | relative/abs dir path&gt;</code> to enter a dir (=&gt; works both for bookmarks and as a replacement for cd); also support for relative path bookmarks &amp; more; <code>sl</code> lists bookmakrs in the last used order)</li>\n    <li><a href=\"https://jakemccrary.com/blog/2011/07/25/utilities-i-like-autojump/\">Autojump</a>, <a href=\"/2011/12/31/most-interesting-links-of-december-2/\">described in Dec 11</a></li>\n</ul><br><br><h3>Bash</h3><br><br><strong>Loop with 0-padded numbers</strong> for a number of repetitions (using for and seq, from 1 to 50, outputting 01, 02, .., 50):<br><br><pre><code>for i in $(seq -f '%02g' 1 50); do echo $i; done</code></pre><br><br><strong>Basic math</strong> in Bash (addition, ..; using let for a numerical var and $((&lt;expression&gt;)) for math):<br><br><pre><code>let num=0; echo $num; INC=&quot;1&quot;; num=$((num+$INC)); echo $num</code></pre><br><br><h2>Git</h2><br><br><ul>\n    <li>Undo merge: <em>git reset --hard ORIG_HEAD</em> (the pointer ORIG_HEAD is set automatically by Git)</li>\n    <li>Unfo file changes: <em>git co -- path/to/file/to/reset [other/files/..]</em></li>\n    <li><em>git whatchanged master..</em></li>\n</ul><br><br><h2>Vim - useful advanced commands</h2><br><br><ul>\n    <li>Change/delete a text region\n<ul>\n    <li><kbd>(d|c)i&lt;delim&gt;</kbd> - Delete|change text up to the given delimiting character; requires that you are inside pair delimiters such as \"...\" or (...); use '<kbd>a</kbd>' to include the delimiters</li>\n</ul>\n</li>\n    <li>Operations on selections (=&gt; <kbd>y</kbd> to copy (yank), <kbd>d</kbd>to delete)\n<ul>\n    <li>Select lines (e.g. for deletion via '<code>d</code>'): <kbd>S-V</kbd></li>\n    <li>Select rectangle (e.g. to delete whitespace): <kbd>C-V</kbd></li>\n</ul>\n</li>\n    <li>Search and replace with confirmation: <kbd>:%s/foo/bar/gc</kbd></li>\n</ul><br><br><h2>jq - sed for JSON</h2><br><br>Ex.: Extract nested structure with select, filter combination<br><br><pre><code>\r\n// INPUT\r\n{&quot;name&quot;:&quot;Sony Xperia Z3 Black&quot;,\r\n &quot;dealerDetails&quot;:[\r\n    {&quot;dealerGroup&quot;:&quot;webshop&quot;,&quot;rank&quot;:3},{&quot;dealerGroup&quot;:&quot;CustomerCentre&quot;,&quot;rank&quot;:3}]}\r\n// COMMAND\r\njq '. | {name: .name, rank: (.dealerDetails|map(select(.dealerGroup == &quot;webshop&quot;))[0].rank)}'\r\n// OUTPUT\r\n{&quot;name&quot;:&quot;Sony Xperia Z3 Black&quot;,&quot;rank&quot;:3}\r\n</code></pre>",
  "excerpt": ""
 },
 {
  "title": "Books",
  "published": "2011-10-09 11:26:51",
  "postType": "page",
  "slug": "/wiki/development/books/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "<h2>Books that most influenced the way I think about software development</h2>\r\n(so far)\r\n<ol>\r\n\t<li>R.C. Martin: <em><a href=\"https://amzn.com/0132350882\">Clean Code</a> - A Handbook of Agile Software Craftsmanship</em>(2008)\r\n<ul>\r\n\t<li>The essential importance of testing</li>\r\n\t<li>All the basic principles of good code: Don't Repeat Yourself (no copy&amp;paste!), Single Responsability Principle, code cohesion, size of classes &amp; methods, the importance of naming</li>\r\n</ul>\r\n</li>\r\n\t<li>M. &amp; T. Poppendieck: <em><a href=\"https://amzn.com/0321437381\">Implementing Lean Software Development</a> - From Concept to Cash</em>(2006)\r\n<ul>\r\n\t<li>This book persuaded me that lean/agile development is the only feasible way to develop software - and showed me how to do it</li>\r\n</ul>\r\n</li>\r\n\t<li>? Specification by Example</li>\r\n</ol>\r\nOther inspiring reading lists:\r\n<ul>\r\n\t<li><a href=\"https://www.poppendieck.com/reference.htm\">Poppendiecks: Recommended Readings</a> - this list by the gurus of lean thinking is something that you *must* check!</li>\r\n\t<li>Jiri Novotny: <a href=\"https://www.dextronet.com/micro-isv-insights/2012/01/30-books-everyone-in-software-business-should-read-and-why/\">30 books everyone in software business should read (and why)</a> - I guess that tips for some interesting books can be found there</li>\r\n</ul>\r\n<h3>Non-Books</h3>\r\nThe talk <a title=\"Jonah Lehrer: How We Decide\" href=\"https://fora.tv/2010/01/05/Jonah_Lehrer_How_We_Decide\">how we decide</a> helped me to understand that different decision making modes are suitable in different situations and how important it is to understand and be aware of our own thinking/deciding process. Another talk taught me that <a href=\"https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action.html\">the most important thing to succeed is to know (and communicate) why</a>. Finally I got support for my opinion that <a title=\"RSA Animate - Drive: The surprising truth about what motivates us \" href=\"https://www.youtube.com/watch?v=u6XAPnuFjJc\">what motivates us isn’t money, but purpose, mastery, autonomy</a>. I summarize these talks in the post <a href=\"/2011/11/26/the-3-most-important-things-ive-learned-this-year/\">The 3 Most Important Things I’ve Learned This Year (2011)</a>.\r\n<h2>Related</h2>\r\n<ul>\r\n\t<li><a title=\"Books Our Developers Should Read\" href=\"/2013/03/12/books-our-developers-should-read/\">Books Our Developers Should Read</a></li>\r\n\t<li><a href=\"https://javarevisited.blogspot.in/2013/01/top-5-java-programming-books-best-good.html\">Top 5 Java programming books - Best of lot</a> (actually 8) - 1) Head First Java, 2) Effective Java, 3) Thinking in Java, 4) Head First Design Pattern, 5) Concurrency Practice in Java, 6)Java performance, 7) Java Puzzlers, 8) Head First Object Oriented Analysis and Design.</li>\r\n</ul>\r\n<h2>Books read recently (selection)</h2>\r\n2014\r\n<ul>\r\n\t<li><a href=\"https://www.amazon.com/Difficult-Conversations-Discuss-What-Matters-ebook/dp/B004CR6ALA/\">Difficult Conversations: How to Discuss What Matters Most</a> 5* - handle difficult conversations at work and with loved ones by focusing on a \"learning conversation\" - explore and share the underlying emotions, the impact on one's identity and self-image, and discuss what happened / should happen without blaming or judging but with acknowledging the contributions of each party and the fact that everyone's \"story\" matters and has a grain of truth. Adopt the \"and stance\" (ex.: \"I am devastated about breaking with you - and I still think it is the best thing to do for us) rather than focusing on the conflict-laden all-or-nothing thinking. A lot in common with Nonviolent Communication (importance of exploring and communicating emotions, of avoiding blame and judgement). Quotes: \"<em>difficult conversations do not just involve feelings, they are at their very core about feelings.</em>\" \"<em>The point is this: difficult conversations are almost never about getting the facts right. They are about conflicting perceptions, interpretations, and values. [..] Interpretations and judgments are important to explore. In contrast, the quest to determine who is right and who is wrong is a dead end.</em>\" A <a href=\"https://break-throughconsulting.com/book_reports/Difficult_Conversations.pdf\">great overview/summary of the book</a> by Break Through Consulting (PDF, 16 pages).</li>\r\n\t<li><a class=\"title\" href=\"https://www.amazon.com/Goal-Process-Ongoing-Improvement-ebook/dp/B002LHRM2O/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1408044991&amp;sr=1-1&amp;keywords=the+goal\">The Goal: A Process of Ongoing Improvement</a> <span class=\"ptBrand\">by Eliyahu M. Goldratt - 4* - a great classic in lean thinking in the form of a novel</span></li>\r\n\t<li><a class=\"title\" href=\"https://www.amazon.com/Nonviolent-Communication-Language-Life-Changing-Relationships-ebook/dp/B0019O6IWU/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1408045401&amp;sr=1-1&amp;keywords=nonviolent+communication\"><span title=\"Nonviolent Communication: A Language of Life: Life-Changing Tools for Healthy Relationships (Nonviolent Communication Guides)\">Nonviolent Communication: A Language of Life: Life-Changing Tools for Healthy Relationships</span></a> <span class=\"ptBrand\">by Marshall B. Rosenberg - 6*\r\n</span></li>\r\n\t<li><a href=\"https://www.amazon.com/Innovators-Dilemma-Technologies-Management-Innovation-ebook/dp/B00E257S86/\">The Innovator's Dilemma: When New Technologies Cause Great Firms to Fail </a>(Management of Innovation and Change) [in progress?]</li>\r\n</ul>\r\n2013\r\n<ul>\r\n\t<li><a href=\"https://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman-ebook/dp/B00555X8OA/\">Thinking, Fast and Slow</a> [cca 50%] - 6*</li>\r\n\t<li><a href=\"https://www.amazon.com/Tao-Coaching-Effectiveness-Inspiring-Developing-ebook/dp/B0041G68SC/\">The Tao of Coaching: Boost Your Effectiveness at Work by Inspiring and Developing Those Around You</a> - 4*</li>\r\n\t<li><a href=\"https://www.amazon.com/The-Phoenix-Project-Helping-Business/dp/0988262592\">The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win</a> - 5*</li>\r\n\t<li><a class=\"title\" href=\"https://www.amazon.com/Boyd-Fighter-Pilot-Who-Changed-ebook/dp/B000FA5UEG/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1400656186&amp;sr=1-1&amp;keywords=the+fighter+changed+art+of+war\">Boyd: The Fighter Pilot Who Changed the Art of War</a> - 3* - my <a href=\"/2013/04/29/book-review-digest-boyd-the-fighter-pilot-who-changed-the-art-of-war-relevant-for-itbusiness/\">review and digest</a></li>\r\n\t<li>...</li>\r\n</ul>",
  "excerpt": ""
 },
 {
  "title": "Ops: Monitoring",
  "published": "2011-10-24 09:55:58",
  "postType": "page",
  "slug": "/wiki/development/ops-monitoring/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "(<em>Work in progress.</em>)<br><br>Tools for monitoring systems and applications, especially in the Java EE environment.<br><br><h2>Monitoring needs</h2><br><br><ol>\n    <li>Metric collection - collection of metrics from different machines, servers, services, perhaps diff. monitoring systems</li>\n    <li>Metric aggregation - avg/min/max/std.dev etc. over a configurable period of time\n<ul>\n    <li>ability to compare with corresponding previous period(s) (prev. week, year, ...), derivation of a \"baseline\" to make it easy to spot deviations from the normal behavior</li>\n</ul>\n</li>\n    <li>Alerting and notifications - alert when a metric exceeds a limit, ... (preferably reasonable default + scriptable advanced conditions; scriptable alert actions, notifications via e-mail and other channels, ...)</li>\n    <li>Eventing - ability to correlate metrics with system events such as a DB upgrade</li>\n    <li>Other\n<ul>\n    <li>UI, dashboard (configurable display of metrics, graphs, combined graphs, alerts)</li>\n    <li>API (preferably REST, JSON)</li>\n    <li>Extensability</li>\n</ul>\n</li>\n</ol><br><br><h3>Some criteria</h3><br><br><ul>\n    <li>Number of supported platforms, servers (DB, AS, cache, ...)</li>\n    <li>Support for JavaEE-specific software (Tomcat threadpools, JDBC etc.)</li>\n    <li>Support for JMX to easily monitor anything Java-based</li>\n    <li>Extensability: Define custom metrics/aggregations, fetch the collected data, ...</li>\n</ul><br><br><h2>Recommended metrics</h2><br><br>From <a href=\"https://pragprog.com/book/mnee/release-it\">Release It!</a>, p.268-9<br><br><ul>\n    <li><strong>Memory</strong>: Minimum heap size, maximum heap size, generation sizes</li>\n    <li><strong>Garbage collection</strong>: Type, frequency, memory reclaimed, size of request</li>\n    <li><strong>Worker threads, for each thread pool</strong>: Number of threads, threads busy, threads busy more than 5s, high-water mark (max concurrent threads in use), low-water mark, number of times a thread was not available, request backlog</li>\n    <li><strong>DB connection pools, for each pool</strong>: Number of connections, connections in use, high-water mar, low-water mark, number of times a connection wasn't available, request backlog<strong>\n</strong></li>\n    <li><strong>Traffic statistics, for each request channel</strong>: Total requests processed, average response time, requests aborted, requests per second, time of last request, accepting traffic or not</li>\n    <li><strong>Business transactions, for each type</strong>: Number processed, number aborted, dollar value, transaction aging, conversion rate, completion rate</li>\n    <li><strong>Users</strong>: Demographics or classification, technographics, percentage of users who are registered, number of users, usage patterns, errors encountered</li>\n    <li><strong>Integration points</strong> (external web services, DB, ...): Current state, manual override applied, number of times used, average response time from remote system, number of failures</li>\n    <li><strong>Circuit breakers</strong>: Current state, manual override applied, number of failed calls, time of last successful call, number of state transitions</li>\n    <li><strong>App metrics</strong> - depending on the app in question</li>\n</ul><br><br><h3>State dashboard</h3><br><br>Summarising current state on a dashboard, as recommended in Release It!:<br><br><ul>\n    <li>Green - all of the following must be true:\n<ul>\n    <li>All expected events have occurred (batch jobs finished successfully, ...)</li>\n    <li>No abnormal events have occurred</li>\n    <li>All metrics are nominal (= mean ± 2*std.dev.)</li>\n    <li>All states are fully operational (no circuit breaker opened etc.)</li>\n</ul>\n</li>\n    <li>Yellow - at least one of the following is true:\n<ul>\n    <li>An expected event has not occurred</li>\n    <li>At least one abnormal event, with a medium severity, has occurred</li>\n    <li>One or more parameters is above or below nominal</li>\n    <li>A noncritical state is not fully operational (f.ex., a circuit breaker has cut off a noncritical feature)</li>\n</ul>\n</li>\n    <li>Red - at least one of the following is true:\n<ul>\n    <li>A required event has not occurred</li>\n    <li>At least one abnormal event, with a high severity, has occurred</li>\n    <li>One or more parameters is far above or below nominal</li>\n    <li>A critical state is not at its expected value (f.ex., \"accepting requests\" is false when it should be true)</li>\n</ul>\n</li>\n</ul><br><br>Notice that \"nominal values\" are typically based on the same day and hour of the previous week (unless it is a special season such as Black Friday sale etc. where it make more sense to compare to the previous year).<br><br><h2>The trouble with aggregating metrics</h2><br><br>Aggregating metrics (with the exception of the primitive ones such as counters) is not as simple as it may appear and you need to take care that the aggregation actually makes sense with respect to statistics. See e.g. <a href=\"https://www.vividcortex.com/blog/why-percentiles-dont-work-the-way-you-think\">Why Percentiles Don’t Work the Way you Think</a>.<br><br><h2>Tools</h2><br><br><h3>My experiences &amp; plans</h3><br><br>I have used <strong>Grafana</strong> 3 and <strong>InfluxDB</strong> 0.12.<br><br><h4>Time Series Database: InfluxDB</h4><br><br>I have picked InfluxDB over Graphite because:<br><br><ol>\n    <li>It was a single Go binary and thus simpler to deploy and manage</li>\n    <li>It was newer and seemed better designed (sorry, I do not have more details anymore)</li>\n</ol><br><br>It works OK for what I need.<br><br><h5>Limitations:</h5><br><br>Its query language is reportedly limited compared to Graphite.<br><br>My main issue is that I collect data from multiple nodes (that report in different times) and thus need to somehow first aggregate the data for a node and then to aggregate it over time. That would be easy with a nested query but is impossible with InfluxDB. (I could create new, aggregated metrics instead of the subquery with the Continuous Queries - but I would need to manually create a query for each metric (+ increasing the storage needs). For example I want to know how many nodes are up at any given time and each node reports the count of 1 every minute. I must make sure to take exactly one value from each node series.  So I need: SELECT sum(*) FROM (SELECT latest(\"is_node_up\") ... GROUP BY node) GROUP BY time(1m). (A description of <a href=\"https://github.com/grafana/grafana/issues/5429\">a similar challenge</a>.)<br><br>It only supports clustering and high availability in its commercial version.<br><br><h4>Alternatives to InfluxDB:</h4><br><br>See this reportedly good comparison of 8/2016: <a href=\"https://blog.dataloop.io/top10-open-source-time-series-databases\">Top10 Time Series Databases</a>: it rates DalmatinerDB (using ZFS, Riak Core) as #1 unless your data fits into one node - then InfluxDB wins. Nr. 3 is Prometheus - even though it isn't (only) a time series DB but a monitoring system.<br><br>According to <a href=\"https://news.ycombinator.com/item?id=12453192\">this HN discussion</a> (9/2016), there is:<br><br><ul>\n    <li><a href=\"https://cyanite.io/\">Cyanite</a> - it speaks the various Graphite protocols and feeds data into Cassandra, which takes care of the HA concerns. (JH: Though I believe that operating Cassandra isn't trivial). A commenter: \"Currently, we are running several nodes of Riemann/Cyanite/Cassandra. It works very well, integration is pretty straight forward.\"</li>\n    <li>ScyllaDB for Cassandra</li>\n    <li><a href=\"https://prometheus.io/\">Prometheus</a> - last time I checked it looked promising but wasn't mature enough; that has certainly changed since then</li>\n    <li>...</li>\n</ul><br><br><h4>Anomaly detection and alerting</h4><br><br><a href=\"https://github.com/nathanielc/morgoth\">Morgoth</a> looks as a useful tool for metric anomaly detection.<br><br><h3>Links to other tools of interest</h3><br><br><ul>\n    <li><a href=\"https://bosun.org/\">Bosun</a> \"<em>is an open-source, MIT licensed, monitoring and alerting system by Stack Exchange. It has an expressive domain specific language for evaluating alerts and creating detailed notifications. It also lets you test your alerts against history for a faster development experience.</em>\" (in Go)</li>\n    <li><a href=\"https://www.springsource.com/landing/hyperic-open-source-download\">Hyperic HQ</a>, open-source &amp; enterprise ed., see <a href=\"theholyjava.wordpress.com/2011/10/17/monitoring-java-webapp-with-hyperic-hq-send-email-when-too-many-errors-in-logs/\">my intro</a></li>\n    <li><a href=\"https://community.zenoss.org/index.jspa\">Zenoss</a>, open-source &amp; enterprise ed.</li>\n    <li><a href=\"https://www.nagios.org/\">Nagios</a>, open-source and ?, seems to be pretty popular</li>\n    <li><a href=\"https://ganglia.sourceforge.net/\">Ganglia</a> (<a href=\"https://sourceforge.net/apps/trac/ganglia/wiki/ganglia_quick_start\">quick start</a>), open-source, primarily targets Linux. Uses XML, XRD, RRD, web frontend in PHP, described as \"a scalable distributed monitoring system for high-performance computing systems such as clusters and Grids\". Extensible via C/Python.</li>\n    <li>Zabbix, open-source; general; compared to Hyperic: reasonable UI with custom dashboards, custom actions; quite flexible. We had regularly performance problems with its DB, the UI is old fashioned. It requires lot of clicking but fortunately has an API.</li>\n    <li>...</li>\n</ul><br><br>Enterprise and SaaS solutions<br><br><ul>\n    <li>NewRelic - popular, provides a rather high-level view</li>\n    <li><a href=\"https://www.appdynamics.com/\">AppDynamics</a> - focus on business transactions and end-to-end view with drill-down</li>\n    <li><a href=\"https://www.splunk.com/view/splunk/SP-CAAAG57\">Splunk Enterprise</a> -</li>\n</ul><br><br><h2 id=\"libraries\">Libraries</h2><br><br>Metrics<br><br><ul>\n    <li><a href=\"https://github.com/Netflix/servo/wiki\">Netflix Servo</a> - for collecting and publishing metrics from a java app (to a file, CloudWatch, in-memory sample). Exposes metrics (annotated fields) automatically over JMX. <a href=\"https://github.com/Netflix/servo/blob/master/servo-example/src/main/java/com/netflix/servo/example/BaseHandler.java\">See this example</a>. Essentially you either create different monitor objects or annotate fields, make sure they are updated as needed, register their owner with a registry, and run a poller that takes samples and publishes them. Computes <a href=\"https://github.com/Netflix/servo/blob/master/servo-core/src/main/java/com/netflix/servo/stats/StatsBuffer.java\">various stats</a>, supports <a href=\"https://github.com/Netflix/servo/wiki/Publishing-to-Graphite\">publishing to graphite</a>. Supports various metrics: informational (a string?), counter, gauge, ... . A nice thing is the <a href=\"https://github.com/Netflix/servo/blob/master/servo-core/src/main/java/com/netflix/servo/publish/AsyncMetricObserver.java\">AsyncMetricObserver</a> (update calls return immediatelly).</li>\n    <li><a href=\"https://code.google.com/p/javamelody/\">JavaMelody</a> - \"monitor Java or Java EE application servers in QA and production environments,\" targetted primarily at web/app servers, built-in charting. A proxy for monitoring of JDBC Drivers, EJBM interceptor, Spring support (=&gt; make a method monitored with an annotation). servlet filter. Data stored in .rdd files locally or sent to a central server. There is a <a href=\"https://www.slideshare.net/djkarlsen/significance-of-metrics\">short &amp; nice presentation</a> at SlideShare.</li>\n    <li><a href=\"https://code.google.com/p/javasimon/\">Java Simon</a> - Simple Monitoring API  (JAMon replacement) - record start and stop named events using the Simon API, Simon will compute metrics such as min/max/avg/std.dev/count/... . The events may be hierarchical (e.g. web call -&gt; db call). Support for capturing snapshots (samples) of the metrics, monitoring Java EE (DB Driver wrapper, monitoring servlet Filter, interceptors). Web console to monitor the metrics. Exposed over JMX.</li>\n    <li><a href=\"https://metrics.codahale.com/\">Yammer's Metrics</a> for instrumenting JVM-based services. Can report to e.g. Ganglia and Graphite. Support e.g. for Guice, Jetty, Jersey, Log4j, Apache HttpClient, Ehcache, Logback, Spring. Manual usage: create a metric (gauge, counter, meter (rate), histogram (min/max/std.dev./percentiles), timer (-&gt; rate, duration distribution)) and keep on updating it manually. Each metric is bound to a class (-&gt; package hierarchy). Access the metrics via JMX or via HTTP as JSON or send them to a stdout/csv file/ganglie/graphite. Support for custom HealtCheck:s. The AdminServlet serves the JSON metrics, may run health checks, print a thread dump, provide a simple ping response to load balancers (all of these are also available separately). <a href=\"https://metrics.codahale.com/manual/scala/\">Scala support</a>, metrics <a href=\"https://metrics.codahale.com/manual/webapps/\">servlet Filter</a>, ... . <a href=\"https://metrics.codahale.com/maven/apidocs/com/yammer/metrics/annotation/package-frame.html\">Annotations</a> for measuring methods of Guice/Jersey/... managed ojbects. <a href=\"https://metrics.codahale.com/maven/apidocs/index.html\">JavaDoc</a>.</li>\n</ul><br><br>Related<br><br><ul>\n    <li><a href=\"https://graphite.readthedocs.org/en/0.9.10/overview.html\">Graphite</a> - \"an enterprise-scale monitoring tool that runs well on cheap hardware\". A popular tool for visualizing time-series data (it receives data, stores them in a RDD-type db, and shows them in a web UI). Configurable graphs, <a href=\"https://graphite.readthedocs.org/en/0.9.10/dashboard.html\">dashboards</a> etc. Written n Python.</li>\n    <li><a href=\"https://jrds.fr/\">JRDS</a> - \"Jrds is performance collector, much like cacti or munins. But it intends to be more easy to use and able to collect a high number of machines in a very short time. It's fully written in java and avoid call external process to increase performances. It uses <a title=\"http://code.google.com/p/rrd4j/\" href=\"https://code.google.com/p/rrd4j/\">RRD4J</a>, a clone of <a title=\"http://oss.oetiker.ch/rrdtool/\" href=\"https://oss.oetiker.ch/rrdtool/\">rrdtool</a> written in java.\"</li>\n    <li><a href=\"https://code.google.com/p/rocksteady/\">Rocksteady</a> + <a href=\"https://esper.codehaus.org/\">Esper</a>: Rocksteady is a java app that reads metrics from RabbitMQ, parse them and turn them into events so Esper (CEP) can query against those metric and react to events match by the query.</li>\n    <li><a href=\"https://www.jolokia.org/\">Jolokia is remote JMX with JSON over HTTP</a>: a REST API bridged to JMX, with support for security, fine-grained access control, bulk operations. Especially useful if you either 1)  need to perform bulk operations (e.g. get multiple values) or 2) want to access them from something that doesn't support JMX. JSON is in general very easy to use and navigate. You can install Jolokia as a WAR (or mebedd its Servlet), a JVM agent, or attach it on-the-fly to a running JVM.</li>\n</ul><br><br>Logs<br><br><ul>\n    <li><a href=\"https://logstash.net/\">LogStash</a> - a popular tool that can collect (directly/via [distributed] syslog), parse (=&gt; extract timestamp etc), and store logs - support for indexing storing in ElasticSearch for searching, parses e.g. Apache logs out of the box. See this <a href=\"https://semicomplete.com/presentations/logstash-puppetconf-2012/#/7\">Logstash slides</a> (9/2012).\n<ul>\n    <li>Can also <a href=\"https://cookbook.logstash.net/recipes/statsd-metrics/\">send metrics to statsD</a> / Graphite</li>\n</ul>\n</li>\n    <li><a href=\"https://kibana.org/infrastructure.html\">Kibana</a> - a web interface to seach logs from LogStash, view them in realtime (based on a query) etc. See the overview of <a href=\"/2013/08/31/most-interesting-links-of-august-13/kibana.org/about.html\">Kibana’s powers</a>.</li>\n</ul><br><br>Other<br><br><ul>\n    <li><a href=\"https://hawt.io/\">hawtio web console</a> - a lightweight and modular HTML5 web console with <a href=\"https://hawt.io/plugins/index.html\">lots of plugins</a> for managing your Java stuff - to be embedded into standalone apps or containers such as Jetty/Tomcat - view metrics, manage, ... (using JMX under the cover)</li>\n</ul><br><br>&nbsp;",
  "excerpt": ""
 },
 {
  "title": "Performance & Performance Testing for Webapps",
  "published": "2012-01-13 08:58:16",
  "postType": "page",
  "slug": "/wiki/development/performance-testing-for-webapps-notes/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "<em>! work in progress !</em><br><br><h2>Key Performance Goals</h2><br><br>Requirement format: \"X should be less than L in P % times when the load is U users\"<br><br><ul>\n    <li>Request throughput</li>\n    <li>Latency</li>\n    <li>Max/avg response time from the end user's point of view</li>\n</ul><br><br><h2>Performance Metrics</h2><br><br><h3>The Utilization Saturation and Errors (USE) Method</h3><br><br>The <a href=\"https://www.brendangregg.com/usemethod.html\">USE Method</a> of performance analysis focuses on getting a complete overview of a system (without forgetting anything) and discovering quickly most of the performance problems. The main tool is a system-dependant checklist of resources and metrics of utilization, saturation (i.e. work that has to wait), and errors for each resource. Read more on its page, which also contains checklist for some systems.<br><br><h3>Java EE App Stress Testing (A. Bien)</h3><br><br>Goal: Test contention (=&gt; dead/live-locks), transaction isolation, caching behavior, consistency, robustness, performance, memory consumption.<br><br><ul>\n    <li>Memory, current heap size</li>\n    <li>Typical / peak # of worker threads</li>\n    <li>Usual depth of the request queue</li>\n    <li># rolled back transactions (f.ex. due to optimistic locking) vs. successful ones</li>\n    <li># requests/sec</li>\n    <li># &amp; length of major garbage collections</li>\n    <li># DB connections</li>\n    <li>Size of JPA caches</li>\n</ul><br><br><ul>\n    <li>all of these should be stable, i.e. not grow (too much) with time / growing load.</li>\n</ul><br><br>Ex.: JMeter + VisualVM (with the MBean plugin to monitor custom caches and with Visual GC) to observe the behavior live.<br><br><h3>Level: Browser</h3><br><br>TBD (network latency, rendering time, ... - use FireBug's timing capability or some similar browser plugin)<br><br><h3>Level: Server</h3><br><br>Resource utilization (from <a href=\"https://www-staging.newrelic.com/docs/server/using-the-server-monitor-ui\">New Relic docs</a>):<br><br><ul>\n    <li>Cpu busy [%] - the percentage of the time that the system is using the CPU</li>\n    <li>Disk busy [%] - the percentage of the time that the system is performing Disk IO</li>\n    <li>Memory used [%]</li>\n    <li>Disk space used [%]</li>\n    <li>Network utilization [Mb/s]</li>\n    <li>Drilling down into processes - their count, CPU, memory</li>\n</ul><br><br><h3>Layer: Servlet Container / EJB Container</h3><br><br>TBD (JVM heap, threads, ...)<br><br><ul>\n    <li>Servlet Container\n<ul>\n    <li># threads (unless NIO used, i.e. # concurrent requests being processed)</li>\n    <li>...</li>\n</ul>\n</li>\n    <li>Database\n<ul>\n    <li>No. free connections in connection pools</li>\n    <li>Avg. time connection is used by a thread (how long away from the pool)</li>\n</ul>\n</li>\n    <li>EJB Container\n<ul>\n    <li>Bean pool utilization</li>\n    <li>...</li>\n</ul>\n</li>\n    <li>...</li>\n</ul><br><br><h3>Layer: Application</h3><br><br>TBD (# concurrent users, # errors/exceptions, ...)<br><br><h3>Layer: Database</h3><br><br>TBD<br><br><h2>Common Performance Issues</h2><br><br><h3>Apache</h3><br><br>(I don't remember the resource for this :-( )<br><br><ul>\n    <li>No more File Descriptors\n<ul>\n    <li>• symptoms: entry in error log, new httpd children fail to start, fork() failing everywhere</li>\n    <li>• solution: increase system-wide limits, incr. ulimit via apachectl</li>\n</ul>\n</li>\n    <li>Sockets stuck in time_wait\n<ul>\n    <li>• sympt.: unable to accept new conn., CPU under-utiliz. &amp; httpd proc. idle, not swapping, netstat shows # sockets in time_wait</li>\n    <li>• many t_w are to be expected, only a problem when new conn. failing =&gt; decrease sys-wide TCP/IP FIN timeout</li>\n</ul>\n</li>\n    <li>High Mem Usage (swapping)\n<ul>\n    <li>• sympt.: (ignore system free mem, misleading): # disk activity, top/free show high swap usage, load gradually increasing, ps shows processes blocking on disk i/o</li>\n    <li>• sol.: add mem, ...</li>\n</ul>\n</li>\n    <li>CPU overload\n<ul>\n    <li>• sympt.: top shows little/no cpu idle time, *not* swapping, high load, much cpu spent in userspace</li>\n    <li>• sol.: add cpu</li>\n</ul>\n</li>\n    <li>Interrupt (IRQ) overload\n<ul>\n    <li>• sympt: (freq. on 8+ cpu machines) not swapping, 1-2 cpu busy rest idle, low total load</li>\n    <li>• sol.: add NIC</li>\n</ul>\n</li>\n</ul><br><br><h2>Doing Performance Testing Correctly</h2><br><br><h3>Jetty on Load Testing</h3><br><br>The <a href=\"https://wiki.eclipse.org/Jetty/Howto/High_Load\">Jetty High Load Howto</a> has some good tips on creating realistic load testers and on configuring the load testing and server machines (TCP buffer sizes, in/outbound connection queue size, # file, # ports, congestion control). F.ex.:<br><br><blockquote>- A common mistake is that load generators often open relatively few connections that are kept totally busy sending as many requests as possible over each connection. This causes the measured throughput to be limited by request latency (see <a title=\"http://blogs.webtide.com/gregw/entry/lies_damned_lies_and_benchmarks\" href=\"https://blogs.webtide.com/gregw/entry/lies_damned_lies_and_benchmarks\" rel=\"nofollow\">Lies Damned Lies and Benchmarks</a> for an analysis of such an issue.<br><br>- Another common mistake is to use a TCP/IP for a single request and to open many many short lived connections. This will often result in accept queues filling and limitations due to file descriptor and/or port starvation.<br><br>A load generator should well model the traffic profile from the normal clients of the server. For browsers, this if mostly between 2 and 6 connections that are mostly idle and that are used in sporadic bursts with read times in between. The connections are mostly long held HTTP/1.1 connections.</blockquote><br><br>It recommends the <a title=\"http://cometd.org/documentation/howtos/loadtesting\" href=\"https://cometd.org/documentation/howtos/loadtesting\" rel=\"nofollow\">Cometd Load Tester</a> for a good example of a realistic load generator<br><br><h2>Tools</h2><br><br><h3>Simple tools</h3><br><br>Web servers<br><br><ul>\n    <li><strong>ab</strong> (Apache Benchmark) - ex: <em>ab -n 10000 -c 250  &lt;page URL&gt;</em> - generate 10k GETs for the URL, issuing 25o in parallel (limited by the number of sockets a process can open on the test machine)</li>\n    <li><a href=\"https://linux.die.net/man/1/siege\"><strong>siege</strong></a> - http/https stress tester - available in the software repositories of most Linux distros</li>\n    <li><a href=\"https://github.com/wg/wrk/\">wrk</a> - a HTTP benchmarking tool wrk is a modern HTTP benchmarking tool capable of generating significant load when run on a single multi-core CPU. It combines a multithreaded design with scalable event notification systems such as epoll and kqueue.</li>\n    <li><a href=\"https://fortio.org/\">fortio</a> - similar to siege; runs at a specified query per second (qps) and records an histogram of execution time and calculates percentiles (e.g. p99 ie the response time such as 99% of the requests take less than that number (in seconds, SI unit)). It can run for a set duration, for a fixed number of calls, or until interrupted</li>\n</ul><br><br>Databases<br><br><ul>\n    <li>MySQL:<strong> <a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqlslap.html\">mysqlslap</a></strong> - simulates a number of clients connecting to the DB and performing a query of your choosing</li>\n</ul><br><br><h3>On-line tools</h3><br><br><ul>\n    <li><a href=\"https://blitz.io/\">Blitz.io</a> - load-testing service based on curl-like tool, very easy to use and with nice graphs, can simulate tens of thousands of concurrent users from different location on the Earth</li>\n    <li><a href=\"https://www.pingdom.com/\">Pingdom</a> - \"uptime and performance monitoring made easy\" - I haven't tried this</li>\n</ul><br><br><h3>Apache JMeter</h3><br><br><h4>General</h4><br><br><h5>Max Number of Concurrent Users</h5><br><br>The number of concurrent virtual users JMeter can efficiently simulate depends on the resources of the test machine (memory, thread limits, socket limits, network card speed, ...), the complexity of the test, and other load on the system. In general <a href=\"https://wiki.apache.org/jmeter/HowManyThreads\">it's recommended to use 1000 or less threads</a> - of course assuming that you don't perform any extensive report gathering/rendering and <a href=\"https://jmeter.apache.org/usermanual/best-practices.html#lean_mean\">reduce JMeter resource consumption</a> as it would steal resources available for the testing. With bad configuration or machine you can experience problems already with a much lower thread count.<br><br>Notice also that if you don't introduce any \"think time\" into your test plans than a single JMeter thread can generate much higher load than a human user could and thus a single thread can correspond to e.g. ten humans.<br><br>If you need more virtual user then you need multiple JMeter instances (preferably on multiple machines) in the master-slave configuration or as independent instances, compiling the individual reports yourself, if the overhead of master-slave communication is unacceptable for you.<br><br>Check this <a href=\"https://theworkaholic.blogspot.com/2009/09/running-jmeter-for-large-number-of.html\">blog for some tips</a> (2009).<br><br>From the Gatling stress test tool docs (referring to JMeter 2.5.1):<br><br><blockquote>JMeter creates one thread per user simulated. If there is not enough memory allocated to the JVM, it can crash trying to create these threads. For instance, JMeter could not run 1500 users with 512 MB (what was used for Gatling even with 2000 users); OutOfMemoryErrors are recorded in the table as <strong>OOM</strong>.<br><br>Another problem occurred with the 2000 users simulations; it seems that JMeter can not simulate more than 1514 users independently from the memory that was allocated to the JVM.</blockquote><br><br><h3>Gatling</h3><br><br><a href=\"https://gatling-tool.org/\">Gatling </a>is a new (2012?) stress test tool, written in Scala and using Akka. Tests are described by a fluent API in a \"text\" or richer scala format. It claims high efficiency (2000 users simulated where JMeter couldn't handle over 1500 and with much lower memory consumption of 512M). So far I haven't noticed anything about distributed testing (certainly needed for 10s of thousands of users).<br><br><h3>Banchmarking</h3><br><br><h4>SysBench</h4><br><br>\"<a href=\"https://sysbench.sourceforge.net/\">SysBench</a> is a modular, cross-platform and multi-threaded benchmark tool for evaluating OS parameters that are important for a system running a database under intensive load.\" Last release 2004.<br><br><h4>Disk: hdparm -t, bonnie++, iozone</h4><br><br>See the blog post <a href=\"https://stu.mp/2009/12/disk-io-and-throughput-benchmarks-on-amazons-ec2.html\">Disk IO and throughput benchmarks on Amazon’s EC2</a> (2009) for examples og use.<br><br><h4>DBT-{1-5} - The Database Test Suite</h4><br><br><a href=\"https://sourceforge.net/apps/mediawiki/osdldbt/index.php?title=Main_Page\">DBT-* is a suite of database tests</a>: DBT-1<sup>TM</sup> (Web Server)  simulates the activities of web users browsing and buying items, DBT-2<sup>TM</sup> is an OLTP transactional performance test, DBT-3<sup>TM</sup> is decision support workload (business oriented ad-hoc queries and concurrent data modifications), DBT-4<sup>TM</sup> is an application server and Web services workload, DBT-5<sup>TM</sup> is an OLTP workload simluating the activities of a brokerage firm.<br><br>For ex. <a href=\"https://xeround.com/cloud-database-comparison/xeround-vs-amazon-rds-benchmark/\">Xeround used it to compare its Cloud Database with Amazon RDS</a> (7/2011?).<br><br><h3>Web page performance testing</h3><br><br><ul>\n    <li><a href=\"https://developers.google.com/speed/pagespeed/\">Google PageSpeed tools</a> (<a href=\"https://developers.google.com/speed/pagespeed/insights/\">online</a>/Chrome extension) - provides recommendations\n<ul>\n    <li>Also <a href=\"https://www.google.com/webmasters/tools/mobile-friendly/\">Mobile-Friendly Test</a></li>\n</ul>\n</li>\n    <li><a href=\"https://yslow.org/\">YSlow</a> - browser plugin</li>\n    <li>Chrome/FF DevTools - Timing</li>\n</ul><br><br><h2>Related</h2><br><br><ul>\n    <li><a href=\"/2013/04/01/the-value-and-perils-of-performance-benchmarks-in-the-wake-of-techempowers-web-framework-benchmark/\">The Value and Perils of Performance Benchmarks in the Wake of TechEmpower’s Web Framework Benchmark</a></li>\n</ul><br><br><h2>Resources</h2><br><br><h3>Web page performance</h3><br><br><ul>\n    <li><a href=\"https://www.udacity.com/course/ud884\">Ilya Grigorik: <strong>Website Performance Optimization</strong> (Udacity course)</a> [1:13:57] - 2014; Critical Rendering Path, optimizing content size, number requests, minimizing blocking elements. How to use Chrome dev tools' Timing and perf.testing on a mobile.</li>\n    <li><a href=\"https://chimera.labs.oreilly.com/books/1230000000545\">Ilya Grigorik: High Performance Browser Networking</a> - free online book - Author Ilya Grigorik, a web performance engineer at Google, demonstrates performance optimization best practices for TCP, UDP, and TLS protocols, and explains unique wireless and mobile network optimization requirements. You’ll then dive into performance characteristics of technologies such as HTTP 2.0, client-side network scripting with XHR, real-time streaming with SSE and WebSocket, and P2P communication with WebRTC.</li>\n    <li>Google\n<ul>\n    <li><a href=\"https://developers.google.com/speed/docs/insights/mobile\">Speed requirements for mobile websites &amp; tips</a> (Mobile Analysis in PageSpeed Insights)</li>\n    <li><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/optimizing-critical-rendering-path\">Optimizing the Critical Rendering Path</a> and <a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/analyzing-crp#performance-patterns\">Analyzing Critical Rendering Path Performance</a></li>\n</ul>\n</li>\n</ul><br><br><h3>Testing</h3><br><br><h4>Core</h4><br><br><ul>\n    <li>Facebook Engineering: <a href=\"https://m.facebook.com/notes/facebook-engineering/the-mature-optimization-handbook/10151784131623920\">The Mature Optimization Handbook</a> (or go directly to the <a href=\"https://carlos.bueno.org/optimization/mature-optimization.pdf\">pdf</a>,   <a href=\"https://m.facebook.com/l.php?u=http%3A%2F%2Fcarlos.bueno.org%2Foptimization%2Fmature-optimization.epub&amp;h=hAQHRignh&amp;s=1\" target=\"_blank\" rel=\"noopener\">ePub</a>, <a href=\"https://m.facebook.com/l.php?u=http%3A%2F%2Fcarlos.bueno.org%2Foptimization%2Fmature-optimization.mobi&amp;h=GAQFDKjj1&amp;s=1\" target=\"_blank\" rel=\"noopener\">Mobi</a>). If you get bored, jump directly to ch 5. Instrumentation.</li>\n</ul><br><br><h3>Performance Tips</h3><br><br><h5>HTTP Caching</h5><br><br><dl>\n    <dt><a href=\"https://developers.google.com/speed/docs/best-practices/caching\">Google devs: Optimize caching</a></dt>\n    <dd>Key tips: Set one \"strong\" (unconditional) caching header - C<span style=\"color:#222222;font-family:arial, sans-serif;font-size:12.800000190735px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:normal;orphans:auto;text-align:left;text-indent:0;text-transform:none;white-space:normal;widows:auto;word-spacing:0;background-color:#ffffff;display:inline !important;float:none;\">ache-Control: max-age=N [sec]<span class=\"Apple-converted-space\"> (or Expires) - and one \"weak\" (conditional, checked for updates) - ETag (fingerprint/hash) or Last-Modified. Set <em>Cache control: public</em> directive to enable caching by HTTP proxies (and HTTPS caching for Firefox) - but make sure it does not set any cookies as most proxies would not cache it anyway in that case. Notice that many proxies do not cache resources with query params.</span></span></dd>\n</dl>",
  "excerpt": ""
 },
 {
  "title": "Vagrant Notes",
  "published": "2012-03-16 10:12:13",
  "postType": "page",
  "slug": "/wiki/tools/vagrant-notes/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "<h2>Essential resources</h2>\r\nBase boxes\r\n<ul>\r\n\t<li><a href=\"https://www.vagrantbox.es/\">VagrantBox.es</a> (including boxes available at vagrantup.com and the Ubuntu boxes below)</li>\r\n\t<li><a href=\"https://cloud-images.ubuntu.com/vagrant/\">Ubuntu-provided base boxes</a></li>\r\n</ul>\r\n<h2>The Cool Stuff</h2>\r\n<ul>\r\n\t<li>Broken environment, vagrant cannot ssh, ...? Just run vagrant destroy and vagrant up again.</li>\r\n\t<li>Have you encountered the \"works for me\" syndrom? With everybody using Vagrant (with the same version of it and VirtualBox), this shouldn't happen anymore</li>\r\n</ul>\r\n<h2>Tips</h2>\r\n<h3 id=\"tip_install_vagrant-vbguest\">Install vagrant-vbguest to ensure matching version of VB and VB guest additions</h3>\r\nFor Vagrant to be able to comunicate properly with a VM, the version of Virtual Box Guest Additions installed there must be the same as the version of your Virtual Box. The vagrant addon <a href=\"https://github.com/dotless-de/vagrant-vbguest\">vagrant-vbguest</a> automatically re-installs the correct version of VB additions upon VM start (provided that vagrant actually manages to connect to the VM, which often fails when the versions do not match).\r\n<h3>Re-download the base box to get the latest VB guest additions</h3>\r\nWhen you first use the <a href=\"https://files.vagrantup.com/lucid32.box\">vagrant base box</a>, it's cached on your machine forever. However the Vagrant guys sometimes update the box with the latest Virtual Box Guest Additions so it's useful to remove and re-download it (unless you use  <a href=\"https://github.com/dotless-de/vagrant-vbguest\">vagrant-vbguest</a>):\r\n<pre>vagrant box list\r\nvagrant box remove lucid32</pre>\r\n<h3>It might help to remove host-only adatpers from Vagrant</h3>\r\nIf you experience Vagrant not being able to connect to the VM after having created it, it's likely because of network setup problems or because the version of VirtualBox and VB Guest Additions installed in the VM do not match. In any case you can try to remove the host-only adapter from the VM (or completely from VB) if it is there and keep only the NAT adapter.\r\n<h2>Pitfalls</h2>\r\n<h3>Vagrant can wait forever for VM to boot if VirtualBox and VB Guest Additions versions don't match</h3>\r\nIt's very important that your version of VirtualBox and the VirtualBox Guest Additions installed into the virtual machine match otherwise Vagrant will likely have problems connecting to the VM, signaled by waiting very long after printing \"Waiting for VM to boot. This can take a few minutes.\"<br><br>See the related problem 'Vagrant up/halt/ssh Timeouts with \"Failed to connect to VM via SSH\"' in <a title=\"Note To Self: What to Do When a Vagrant Machine Stops Working (Destroy or Up Failing)\" href=\"/2012/03/24/note-to-self-how-to-solve-vagrant-destroy-failing-with-error-in-api-call-in-ffi-rb/\">Note To Self: What to Do When a Vagrant Machine Stops Working (Destroy or Up Failing)</a>.\r\n<h3>Beware memory mapped files (e.g. Apache) etc.</h3>\r\nRunning in a virtual machine has its risks due to defects in the VM software. For example there was one <a href=\"https://frankooh.wordpress.com/2011/01/21/vboxsf-and-small-files/\">tricky problem with Apache sending old file content from a shared folder</a> due to Virtual Box, shared folder and memory-mapped content not working properly together. So be aware that VMs have their risks and if something strange is happening, ask uncle Google.\r\n<h3>Limitation of file permissions in shared folders</h3>\r\nFile permissions between the host and guest are much more limited then you would expect and it is likely that other VirtualBox users than vagrant won't have (write) access to the files/directories in the shared folder, even if you try to run chmod. Therefore make sure to run the services that need write access as the user vagrant.<br><br>(Host: OS X, Guest: Debian, VB 4.1.10)\r\n<h3>Symlinks in shared folders don't work (usually)</h3>\r\nIf a directory that you share with a vagrant VM contains a symbolic link, the link will most likely not be accessible from the VM (ex.: cannot access /vagrant/puppet-files-symlink/: No such file or directory).<br><br>VirtualBox has now support for symlinks with the proper host+guest combination however there clearly are still issues. The Vagrant issue 713 has <a href=\"https://github.com/mitchellh/vagrant/issues/713#issuecomment-4397462\">some workarounds and useful links to more information</a>. There is also a <a href=\"https://www.virtualbox.org/ticket/818#comment:92\">related VB issue</a>.<br><br>(Host: OS X, Guest: lucid32, VB: 4.1.4, Vagrant: 1.0.2)\r\n<h2>Troubleshooting</h2>\r\nSee the blog post <a title=\"Note To Self: What to Do When a Vagrant Machine Stops Working (Destroy or Up Failing)\" href=\"/2012/03/24/note-to-self-how-to-solve-vagrant-destroy-failing-with-error-in-api-call-in-ffi-rb/\">Note To Self: What to Do When a Vagrant Machine Stops Working (Destroy or Up Failing)</a> for:\r\n<ul>\r\n\t<li>Vagrant Destroy Failing with \"Error in API call\" in ffi.rb</li>\r\n\t<li>Vagrant up/halt/ssh Timeouts with \"Failed to connect to VM via SSH\"</li>\r\n\t<li>Installing Virtual Box Guess Additions</li>\r\n</ul>\r\n<h3>vagrant up stops with \"[default] Waiting for VM to boot. This can take a few minutes.\"</h3>\r\nIf it takes more then few minutes than likely there was a failure in network setup in the VM.<br><br>Solution 1: Stop it, run vagrant destroy, try again.<br><br>Solution 2: Reconfigure vagrant to start the VM in GUI mode, log into it via Virtual Box, check what's wrong with ssh/networking.\r\n<h2>Puppet Notes</h2>\r\n<h5>wget must be run in the quiet mode?</h5>\r\nWget has been failing for me when run by puppet with \"change from notrun to 0 failed: wget ... returned 8 instead of one of [0]\" (8 = server error) while the same command executed from the command line worked just fine. It seems that wget used within an exec needs to be run with -q (or &amp;&gt; /some/file).\r\n<h3>Useful Plugins</h3>\r\nThere are <a href=\"https://github.com/mitchellh/vagrant/wiki/Available-Vagrant-Plugins\">many plugins</a>, some especially interesting are:\r\n<ul>\r\n\t<li><a href=\"https://github.com/dotless-de/vagrant-vbguest\">vagrant-vbguest</a> - automatically upgrade VirtualBox Guest Additions on the guest if your VB version is newer</li>\r\n\t<li><a href=\"https://github.com/fgrehm/vagrant-notify\">vagrant-notify</a> - forward notifications from the guest (send via send-notify) to the host system to show them via its notification facilities (Growl/Notification Center/local send-notify); great if you run a build tool in the VM and want to be notfiied of errors etc. (see f.ex. grunt-notify)</li>\r\n\t<li><a href=\"https://github.com/fgrehm/vagrant-cachier\">vagrant-cachier</a> - enable of caching apt/yum/.. packages on the host and reuse them when starting a new machine (to save downloading time and bandwidth and to be able to run vagrant destroy+up offline)</li>\r\n</ul>",
  "excerpt": ""
 },
 {
  "title": "How I Learn",
  "published": "2012-05-30 20:56:31",
  "postType": "page",
  "slug": "/how-i-learn/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "(draft)<br><br>Couple of people asked me how I keep up to date and learn so here is a brief description.<br><br><strong>Challenging Job</strong> I have (and had) a job where I can work on quite different projects and do lot of different stuff. I like learning new things and being challenged by them so it's important to have a job that provides these challenges. Most of things that I learn are directly or indirectly related to my daily work. (Though I usually go an extra mile or two thnecessary to just do the task when learning them.)<br><br><strong>Reading</strong> I read a lot. I guestimate that I spend 30-60 hours a month learning, most of that reading, mainly articles and blog posts (the top few of them get to my monthly <a href=\"/category/top-links-of-month/\">top list</a>). Most of that comes to me via <a href=\"https://twitter.com/#!/jakubholynet\">my Twitter feed</a>, predominantly from <a href=\"https://twitter.com/#!/dzone\">DZone</a> that does a good job of supplying popular and often relevant articles, and partly from specialized sources such as Planet Clojure and then from renown experts including Martin <a href=\"https://twitter.com/#!/martinfowler\">Fowler</a>, Kent <a href=\"https://twitter.com/#!/KentBeck\">Beck</a>, Adam <a href=\"https://twitter.com/#!/AdamBien\">Bien</a>, Gojko <a href=\"https://twitter.com/#!/gojkoadzic\">Adzic</a>. I also <a href=\"/wiki/development/books/\">read  books</a>, preferably general ones such as <em><a href=\"https://amzn.com/0321437381\">Implementing Lean...</a></em>, <em><a href=\"https://amzn.com/0132350882\">Clean Code</a></em>, and even <a href=\"https://joyofclojure.com/the-book/\">Joy of Clojur</a>e (though language-specific, it introduces the reader into functional thinking and the design and philosophy behind the language rather than just the syntax and tricks)<br><br><strong>Doing Different Stuff</strong> I prefer to do very different stuff because that is how you learn most. That's why I've decided f.ex. to learn Clojure as opposed to Ruby or Scala: it's much more functional (yet practical, living on the JVM), <a href=\"https://www.slideshare.net/malyvelky/why-functiona-programming-and-clojure-lightningtalk\">it's mind bending</a> (slide 8), and it's a Lisp, i.e. <a href=\"https://www.paulgraham.com/avg.html\">the-most-powerful-language-ever</a>.<br><br><strong>Programming</strong> Finally I have some hobby projects that I use to do different stuff<sup>TM</sup> than in my daily job such as experimenting with Groovy unit tests or to practice pair-programming with friends.<br><br><strong>Conferences &amp; Similar</strong> Good conferences provide inspiration and knowledge though not all are so good. <a href=\"https://www.meetup.com/find/?keywords=programming&amp;mcId=&amp;mcName=&amp;lat=&amp;lon=&amp;userFreeform=oslo&amp;gcResults=Oslo%2C+Norge%3ANO%3AOslo%3Anull%3AOslo%3Anull%3Anull%3A59.9138688%3A10.7522454&amp;op=search&amp;resetgeo=true&amp;events=&amp;allGroups=true\">Meetup groups</a> such as Oslo Socially Functional, Coding Dojo, XP, Lean are good sources of both inspiration and fun.\r\n<h2>What About Time?</h2>\r\nYes, that's a problem, especially given that I need time for my family and yoga. Sorry, I've no magic answer here.\r\n<h2>My Top Tools</h2>\r\n<ul>\r\n\t<li>Mobile app for Twitter</li>\r\n\t<li><a href=\"https://getpocket.com/\">Pocket</a> mobile app for saving articles I haven't time to read now</li>\r\n\t<li>Email and the <a href=\"https://play.google.com/store/apps/details?id=com.dngames.autoshare&amp;hl=en\">AutoShare</a> app to send stuff to process later to myself</li>\r\n</ul>\r\n<h2>Your Tips?</h2>\r\nPlease use comments to share your tips for learning and keeping up-to-date with our rapidly moving profession!\r\n<h2>Where Am I, Where to Go?</h2>\r\nUseful resources:\r\n<ul>\r\n\t<li><a href=\"https://sijinjoseph.com/programmer-competency-matrix/\">Programmer Competency Matrix</a> – a nice overview of a programmer needs to know in different areas (computer science: data structures etc., SW engineering: SCM etc., programming: defensive coding, IDE etc.) + what experience and knowledge they need, split into 4 levels. Where are you?</li>\r\n\t<li><a href=\"https://en.wikipedia.org/wiki/Dreyfus_model_of_skill_acquisition#The_original_five-stage_model\">Dreyfus model of skill acquisition</a> - where are you in each of the key skills and what do you thus need to do to grow? (novice - quick wins, advanced beginner - breakable toys, i.e. safe environment to explore the limits of the rules by breaking them and learning from failure, practicioner (competence) - follows rules, needs goal-based tasks instead of micromanagement, proficient - develops intuition but checks it against the rules, learns from case studies and anecdotical knowledge, expert - transcends the rules, acts based on intuition, unable to truly explain her decisions (but well capable of rationalizing them)). You will typically be on different levels in your different skills - development, team member, communicator, solution engineering, methodology - and it pays of to know where you are and thus what are your limits, needs, abilities.</li>\r\n</ul>",
  "excerpt": ""
 },
 {
  "title": "Aquamacs/Emacs",
  "published": "2012-06-30 14:04:09",
  "postType": "page",
  "slug": "/wiki/tools/emacs/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "My personal Emacs/Aquamacs mini-reference. (Without the very elementary stuff that I still happen to remember.)<br><br><h2>Display</h2><br><br><ul>\n    <li><a href=\"https://braeburn.aquamacs.org/code/master/aquamacs/doc/EmacsManual/Change-Window.html#Change%20Window\">Windows</a>\n<ul>\n    <li>Resize split window: Mouse-1 click on the bar between them and drag it.</li>\n</ul>\n</li>\n</ul><br><br><h2>Search and RegExp</h2><br><br>Search<br><br><ul>\n    <li>C-S forward (see isearch-forward[-regexp])</li>\n    <li>C-R backward</li>\n    <li>M-x query-replace[-regexp] - (use isearch-forward-regexp to build the regexp as it interactively displays the matches)</li>\n    <li>Repeat: To repeat or find the next regexp or normal match just press C-r or C-s (w.r.t. desired direction) again (once or twice)</li>\n</ul><br><br>RegExps in Emacs.<br><br><ul>\n    <li>Key differences: Escape ()| to make them special (group/alternative). Use [[:digit:]] etc. instead of \\d. [a-z] is case insensitive. Non-greedy: .+?.</li>\n    <li>Build an RE interactively (shows matches): M-x re-builder\n<ul>\n    <li>! You have to <a href=\"https://www.masteringemacs.org/articles/2011/04/12/re-builder-interactive-regexp-builder/\">switch into the string syntax</a> either interactively (C-c TAB string RET or C-c C-i in the builder) or by default (in the config: (require 're-builder) (setq reb-re-syntax 'string)); (default is read for Lisp source code, other are functio-like <a href=\"https://www.emacswiki.org/emacs/rx\">rx</a>, <a href=\"https://www.emacswiki.org/cgi-bin/wiki/SymbolicRegexp\">sregex</a>, lisp-re)</li>\n    <li>Match TAB: C-q TAB, newline: C-q C-j</li>\n    <li>C-c C-i: toggle case-sensitivity; move between matches: C-c C-s, C-c C-r</li>\n    <li>(Note: You can simple copy the RE and paste it e.g. into C-M % (query replace regexp))</li>\n    <li>C-c C-q quit the re-build</li>\n    <li>See <a href=\"https://emacswiki.org/emacs/RegularExpression#toc1\">RE syntax</a> (\\s- whitespaces, \\w word constituent)</li>\n    <li><a href=\"https://www.emacswiki.org/emacs/download/re-builder+.el\">re-builder+</a> allows interactive building of RE for search and [query-]replace-regexp</li>\n</ul>\n</li>\n</ul><br><br><h2>Various</h2><br><br><ul>\n    <li>M-z <a href=\"https://www.emacswiki.org/emacs/ZapToChar\">zap-to-char</a> - delete all to the given char, inclusive (\", ), etc.); (I've rebound it to <a href=\"https://www.emacswiki.org/emacs/ZapUpToChar\">zap-up-to-char</a>)</li>\n    <li>C-RET (via Cua mode) - select a rectangular area =&gt; cut, yank, etc.</li>\n</ul><br><br><h3>Speedbar</h3><br><br><ul>\n    <li>b to buffer list mode, f to file list mode, r to \"previous mode\"</li>\n    <li>t stop updating w.r.t. current buffer/frame (slowbar mode)</li>\n</ul><br><br><h3>Navigation</h3><br><br><h4>Ido &amp; flex matching for fast file/buffer location</h4><br><br>The general <a href=\"https://www.emacswiki.org/emacs/InteractivelyDoThings\">InteractivelyDoThings</a> mode has the great ido-enable-flex-matching option that will automatically show matching completions for commands working on files, buffers etc in the minibufer, e.g. C-x b and copy to switch to the buffer comoyo-puppet. It's genial!<br><br>Tip for ido-open-file (C-x C-f) with ido:<br><br><ul>\n    <li>// starts search for files under /</li>\n    <li>~/ under the home dir</li>\n    <li>C-d open dired in the current dir</li>\n</ul><br><br>General C-s/-r: to next/prev match. To fall back to the origina open file: C-f, buffer: C-b.<br><br><h4>File searching</h4><br><br><ul>\n    <li>If using IDO: C-x C-f for ifo-find-file then M-f (ido-wide-find-file-or-pop-dir) to search for a file in the current dir and subdirs</li>\n    <li>IDO tip to: typing '**/xyz' seems to find (after a short while) all files containing xyz in the name anywhere on the disk?? (works also without IDO, for dir/subdirs)</li>\n    <li>M-x find-name-dired - prompts for a dir, uses find &lt;dir&gt; -iname &lt;your input&gt; to find files by name</li>\n    <li>M-x locate - on Mac you might need to <a href=\"https://stackoverflow.com/a/4345711\">set it to use Spotlight</a></li>\n</ul><br><br><h2>Libs</h2><br><br><ul>\n    <li>Sexp fold/expand is very useful for exploring source code (hide all but the first lines of all top-level forms with hs-hide-all) - the built-in <a href=\"https://www.emacswiki.org/emacs/HideShow\">hs-minor-mode</a> can hide/show all, or hide/show/toggle one but the keys for it are cumbersome; <a href=\"https://github.com/shanecelis/hideshow-org.git\">hideshow-org</a> makes it possible to toggle hide/show with TAB, while preserving the original TAB behavior (it does the normal TAB first only only if nothing changes does it expand/fold)</li>\n</ul><br><br><h2>Links</h2><br><br><ul>\n    <li><a href=\"https://johnbokma.com/mexit/2009/03/30/emacs-dired-rename-files.html\">Using [w]dired to rename files</a> etc.</li>\n    <li><a href=\"https://clojure.jr0cket.co.uk/perfect-environment/paredit-guide\">ParEdit Guide</a> (from Clojure Made Simple) - wrap with M - &lt;delimiter&gt;, extend it with M-); extend to a whole sexp: C-), to throw out a sexp: C-}; for backwards: (, {</li>\n</ul><br><br><h1>Emacs usability</h1><br><br><h2>The Problem</h2><br><br><ol>\n    <li>It is hard to learn *and remember* 10s of commands and their key combinations</li>\n    <li>It is hard to type finger-breaking combinations such as C-c @ C-h - see Xah Lee's <a href=\"https://xahlee.info/kbd/banish_key_chords.html\">Banish Key Chords</a></li>\n</ol><br><br>See Xeh's <a href=\"https://ergoemacs.org/emacs/emacs_modernization.html\">Emacs Modernization</a> posts.<br><br><h2>The Solution</h2><br><br><h3>Ideal solution</h3><br><br>Ideally, Emacs would be more discoverable and provide context-sensitive help and offer commands based on the current context and their frequency of use.<br><br><ol>\n    <li>Context-sensitive action list similar to IntelliJ's Alt-Enter, Eclipse's Command-1: show the most used actions relevant to the current cursor point; f.ex. at \"{\" show Go to matching bracket, Select block, Collapse block</li>\n    <li>Inline help with the most used commands when switching to a new major/minor mode - either embedded in the buffer or a non-intrusive (and fading away?) pop-up; f.ex. for a Dired and Magit buffer</li>\n    <li>Menus for less frequently used commands (remember, <a href=\"https://www.emacswiki.org/emacs/MenuAccessFromKeyboard\">menus can be accessed from the keyboard</a>)</li>\n    <li>Use key sequences à la Vim instead of key chords with Ctrl-, Alt-</li>\n</ol><br><br><h3>Actual solution</h3><br><br><em>{work in progress}</em><br><br><ol>\n    <li>ErgoEmacs-mode - more sensible key combinations, &lt;menu&gt; key + sequence of letters similar to Vim's command mode\n<ul>\n    <li>See <a href=\"https://ergoemacs.github.io/banish-key-chords.html\">EE's Banish Key Chords</a> page</li>\n</ul>\n</li>\n    <li><a href=\"https://www.emacswiki.org/emacs/OneKey\">OneKey?</a> -– customizable in-buffer menus for different types of items (major-mode commands, standard keybindings, yasnippets, etc). Useful for learning keybindings, or quickly finding relevant commands.</li>\n    <li>discover.el?</li>\n    <li>...</li>\n</ol>",
  "excerpt": ""
 },
 {
  "title": "Code Quality",
  "published": "2012-08-11 09:29:26",
  "postType": "page",
  "slug": "/code-quality/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "<div style=\"background-color:lightgrey;font-weight:bold;padding:10px;margin-bottom:10px;\">THIS IS ONLY A DRAFT</div>\r\n<h1>Code (And Design) Quality And Why Should We Care</h1>\r\n<blockquote>A traveller meets a woodcutter cutting trees with a blunt axe and asks: \"Why don't you sharpen your axe?\"\r\nWoodcutter: \"I've no time for that, I must cut trees!\" (unknown origin)</blockquote>\r\n<h2>Why: No Sustainable Development Speed Without Code Quality</h2>\r\n// poppend., graph time-speed-debt\r\n// cost of new devel. vs. cost of maintenance\r\n// Via - lost time due to quality\r\n<h2>What Is Code Quality?</h2>\r\n- tests\r\n- clean code values (impl. patt. KB): communication, simplicity, flexibility\r\n- guiding principles (Kent): locality of change etc.\r\n- principles: SRP, SoC, KISS, DRY\r\n=&gt; small methods on the same level of abstraction, intention-revealing name and organization, ...\r\n- cleanliness maintenance during dev.: as cooks that end up with totally dirty and thrashed kitchen x those ending up with a clean one ready for further cooking\r\n- structure and abstractness level: code as a journalist - the pyramid structure of an article (incr. level of detail and amount of content)\r\n<h2>Pragmatic Code Quality</h2>\r\nWhat, when is \"good enough\"?\r\n- always can be increased; economics: cost x benefit\r\n<h2>The Challenges of Legacy (Unclean) Code</h2>\r\n<h3>Hard to understand</h3>\r\n<h4>Mixed business and implementation concerns</h4>\r\nFrom the code alone you can see what happens but not why this behavior is there. A business requirement may be implemented in multiple ways. If the code isn't well structured then you cannot distinguish which part is there as an essential consequence of the requirement and which part is there just because of the particular implementation way chosen. Thus \"the code is the documentation\" really fails here.\r\n<h3>Hard to change consistently</h3>\r\n<h4>Duplication</h4>\r\nWhen you need to modify - e.g. fix - a piece of duplicated (due to copy&amp;paste[&amp;modify] etc.) logic, you usually need to modify also the other duplicates. This is easy to forget (especially because the code is hard to understand), leading to only partially fixed defects and inconsistencies.\r\n<h2>Refs</h2>\r\n- blog Kb 4 design rules\r\n-\r\n<h2 id=\"testing\">Testing</h2>\r\nTesting is a key practice enabling clean code.<br><br>Local testing-related posts:\r\n<ul>\r\n\t<li><a href=\"/2012/10/27/the-principles-underlying-test-driven-development-or-why-you-should-tdd/\">Do You Know Why You Are Testing?! (On The Principles Underlying TDD)</a></li>\r\n\t<li><a href=\"/wiki/development/clean-test-design/\">Clean Test Design</a></li>\r\n\t<li><a href=\"/2011/11/21/principles-for-creating-maintainable-and-evolvable-tests/\">Principles for Creating Maintainable and Evolvable Tests</a></li>\r\n\t<li><a href=\"/2011/10/20/never-mix-public-and-private-unit-tests/\" rel=\"next\">Never Mix Public and Private Unit Tests! (Decoupling Tests from Implementation Details)</a></li>\r\n</ul>\r\n(Presumabely) good books about testing (though, according to Kent Beck as of 11/2012, \"Really, the right book has yet to be written.\"):\r\n<ul>\r\n\t<li>S. Freeman, N. Pryce: <a href=\"https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/\">Growing Object-Oriented Software Guided by Tests</a> (9/2009)</li>\r\n\t<li>Kent Beck: <a href=\"https://amzn.com/0321146530\">Test Ddriven Development By Example</a> (11/2002) - especially the part that covers the workflow of TDD</li>\r\n\t<li>Roy Osherove: <a href=\"https://www.amazon.com/Art-Unit-Testing-Examples-Net/dp/1933988274\">The Art of Unit Testing: With Examples in .Net</a> (7/2009)</li>\r\n</ul>\r\n<h2>Resources</h2>\r\n<ul>\r\n\t<li><a href=\"https://youtu.be/8kotnF6hfd8?t=45m\">Martin Fowler: The Value of Software Design</a> (talk, 22 min, from 0:45:00 til 1:07; Feb 2013) - a balanced argument for the value of good software design and internal code quality based on paying off by enabling us to keep our development speed. Discusses the <a href=\"https://martinfowler.com/bliki/DesignStaminaHypothesis.html\">DesignStaminaHypothesis</a> (bad design =&gt; rapid decline of development speed), <a href=\"https://martinfowler.com/bliki/TechnicalDebt.html\">TechnicalDebt</a>, <a href=\"https://martinfowler.com/bliki/TechnicalDebtQuadrant.html\">TechnicalDebtQuadrant</a> (Prudent x Reckless, Deliberate x Inadvertent), <a href=\"https://martinfowler.com/bliki/TradableQualityHypothesis.html\">TradableQualityHypothesis</a>. According to the experience of Fowler and others, the good design payoff point \"it's weeks, not months.\"</li>\r\n\t<li><a href=\"https://java.dzone.com/articles/opportunistic-refactoring\">Opportunistic Refactoring</a> by Martin Fowler – refactor on the go – how &amp; why</li>\r\n\t<li>Michael Feathers: <a href=\"https://www.stickyminds.com/s.asp?F=S16679_COL_2\">Getting Empirical about Refactoring</a> – gather information that helps us understand the impact of our refactoring decisions using data from a SCM, namely File Churn (frequency of changes, i.e. commits) vs. Complexity – files with both high really need refactoring. Summary: “<em>If we refactor as we make changes to our code, we end up working in progressively better code. Sometimes, however, it’s nice to take a high-level view of a code base so that we can discover where the dragons are. I’ve been finding that this churn-vs.-complexity view helps me find good refactoring candidates and also gives me a good snapshot view of the design, commit, and refactoring styles of a team.</em>“</li>\r\n\t<li>Jason Gorman: <a href=\"https://www.waterfall2006.com/gorman.html\">Refuctoring</a> - the art of securing your position by making your code incomprehensible by anyone else (<a href=\"https://www.youtube.com/watch?v=7RJmoCWx4cE\">see it done in practice</a>)</li>\r\n\t<li><a href=\"/2011/11/21/principles-for-creating-maintainable-and-evolvable-tests/\">Principles for Creating Maintainable and Evolvable Tests</a> - naming, proper level of abstraction</li>\r\n\t<li><a href=\"https://www.codinghorror.com/blog/2008/07/coding-without-comments.html\">CodingHorror: Coding Without Comments</a> (2008) - a very good explanation if how to treat comments (similar what Clean Code says): write code so that it is self-explanatory (using good method and variable names), if necessary, add comments that explain why (while the code shows what/how).</li>\r\n\t<li><a href=\"https://www.leanway.no/competence-debt/\">The other kind of software debt - competency debt</a></li>\r\n</ul>\r\nSome quotes:\r\n<blockquote>I like my tests to by very simple examples of what the production code does. I don’t like it when I have to think about what the tests mean…<br><br><em>- Matteo Vaccari in a <a href=\"https://matteo.vaccari.name/blog/archives/770\">post about Kent Beck’s Simplification strategy</a></em></blockquote>\r\n<blockquote>Any fool can write code that a computer can understand. Good programmers write code that humans can understand.<br><br>- <em>Martin Fowler</em></blockquote>",
  "excerpt": ""
 },
 {
  "title": "Risk-Based Testing",
  "published": "2012-09-08 18:56:42",
  "postType": "page",
  "slug": "/wiki/development/risk-based-testing/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "The resources we have for testing are always limited and we can never test all the combinations and interactions in our software. Therefore we have to choose where to focus our testing efforts.<br><br>The Pareto rule applies also to software defects <sup>citation needed</sup>, i.e. it has been observed that 80% of defects is caused by 20% of the code. Therefore <strong>we should focus our testing on those parts of the code where the risk (and severity) of defects is highest</strong> to use our limited resources to minimize the risk as much as possible. Where defects are most likely to occur must be considered individually for each case, it could be the integration part, business logic, occasionally UI or interactions throughout the whole application.<br><br>Another factor to consider is that <strong>testing is the easier and cheaper the closer it is to the possible source of defects</strong>. (As represented by Mike Cohn's <a href=\"https://martinfowler.com/bliki/TestPyramid.html\">Test Pyramid</a>.) It is much simpler to test thoroughly a single layer of an application (and even more so for a single class) than to write full integration tests extercising it end to end. (The level of complexity is lower - you need set up less things, there is much less possible interactions, it is much easier to reason about the code and to detect the cause of a failure.) Therefore we want our tests as focused around the most risky part of our code as possible.<br><br>Evaluating where the risk is located and how it is distributed through the application helps us decide how much we can focus our tests and where to focus them. We need of course to test also the rest of the application but if 20% of the code causes 80% defects than 80% of our \"testing budget\" should go there.<br><br>This is an application of the <a href=\"/wiki/development/economics-of-coding/\">Economics of Coding</a> regarding the cost and benefits of tests and the available resources.\r\n<h2>See Also</h2>\r\n<ul>\r\n\t<li><a href=\"/2012/01/18/how-to-create-maintainable-acceptance-tests/\">How to Create Maintainable Acceptance Tests</a></li>\r\n</ul>",
  "excerpt": ""
 },
 {
  "title": "Economics of Coding",
  "published": "2012-09-08 19:04:13",
  "postType": "page",
  "slug": "/wiki/development/economics-of-coding/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "Our resources are always limited. We must always be aware of the cost and benefits of whatever we do to spend them wisely.<br><br>Claims such as that code should have 100% test coverage are therefore misguided. What are the benefits of those tests (better design, safety net for refactorings, documentation), what is the cost of writing and maintaining them? Does the cost of testing a setter overweight its cost? Hardly.<br><br>Therefore never forget that all resources are limited and be aware whether the benefits of your effort are higher than its short- and long-term costs.\r\n<h2>Resources</h2>\r\n<a href=\"https://blogs.captechconsulting.com/blog/chris-wash/the-economics-developer-testing\">The Economics of Developer Testing</a> – a very interesting reflection on the cost and value of testing and what is enough tests. Tests cost to develop and maintain (and different tests cost differently, the more complex the more expensive). Not having tests costs too – usually quite a lot. To find the right ballance between tests and code and different types of tests we must be aware of their cost and benefits, both short &amp; long term. Worth reading, good links. (Note: We often tend to underestimate the cost of not having good tests. Much more then you might think.)",
  "excerpt": ""
 },
 {
  "title": "Clean Test Design",
  "published": "2012-09-21 08:22:54",
  "postType": "page",
  "slug": "/wiki/development/clean-test-design/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "How to design your tests so that they are maintainable, valuable, long-live, and help you develop defect-less code?<br><br><strong>WORK IN PROGRESS</strong>\r\n<h2>Stuff to include</h2>\r\n<ul>\r\n\t<li>Split into (ref.: Cohen's Testing Pyramid)\r\n<ul>\r\n\t<li>focused <a title=\"Never Mix Public and Private Unit Tests! (Decoupling Tests from Implementation Details)\" href=\"/2011/10/20/never-mix-public-and-private-unit-tests/\">private|public unit tests</a>\r\n<ul>\r\n\t<li>test individual methods in isolation; focused, independent =&gt; can test more cases, more easily</li>\r\n</ul>\r\n</li>\r\n\t<li>module-level integration tests\r\n<ul>\r\n\t<li>test collaboration of few classes (real classes, no mocks) to verify they collaborate together as expected - verify that the methods tested in unit tests are actually used</li>\r\n</ul>\r\n</li>\r\n\t<li>end-to-end integration/functional tests\r\n<ul>\r\n\t<li>similar to the previous one but on a higher level; what we choose as our ends <a title=\"Risk-Based Testing\" href=\"/wiki/development/risk-based-testing/\">depends on the risks invovled</a></li>\r\n</ul>\r\n</li>\r\n\t<li>acceptance tests\r\n<ul>\r\n\t<li>make sense to the business (though usually written by devs), can form the basis of a system of \"living documentation)</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\nRef\r\n<ul>\r\n\t<li><a title=\"How to Create Maintainable Acceptance Tests\" href=\"/2012/01/18/how-to-create-maintainable-acceptance-tests/\">How to Create Maintainable Acceptance Tests</a></li>\r\n\t<li><a title=\"Principles for Creating Maintainable and Evolvable Tests\" href=\"/2011/11/21/principles-for-creating-maintainable-and-evolvable-tests/\">Principles for Creating Maintainable and Evolvable Tests</a></li>\r\n\t<li><a title=\"Help, My Code Isn’t Testable! Do I Need to Fix the Design?\" href=\"/2012/09/09/help-my-code-isnt-testable-do-i-need-to-fix-the-design/\">Help, My Code Isn’t Testable! Do I Need to Fix the Design?</a></li>\r\n\t<li><a title=\"Permanent link to Do You Know Why You Are Testing?! (On The Principles Underlying TDD)\" href=\"/2012/10/27/the-principles-underlying-test-driven-development-or-why-you-should-tdd/\" rel=\"bookmark\">Do You Know Why You Are Testing?! (On The Principles Underlying TDD)</a></li>\r\n</ul>\r\nTopics\r\n<ul>\r\n\t<li>Mocks: Yes or not? (=&gt; when yes?) - read Martin Fowler's <a href=\"https://martinfowler.com/articles/mocksArentStubs.html\">Mocks Aren't Stubs</a> that discusses mockist vs classical testing; quote (emphasis mine): \"A classic test only cares about the final state - not how that state was derived. Mockist tests are thus <em>more coupled to the implementation</em> of a method. Changing the nature of calls to collaborators usually cause a mockist test to break.\"</li>\r\n</ul>",
  "excerpt": ""
 },
 {
  "title": "Parallel Change (Parallel Design)",
  "published": "2012-12-27 20:08:07",
  "postType": "page",
  "slug": "/wiki/development/parallel-design-parallel-change/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "Parallel design means that when changing a design, you keep the old design as long as possible while gradually adding the new one and then you gradually switching to the new design. Only after that you gradually remove all the old code.<br><br>This applies both at large and also (surprisingly) small scale. Though it costs you more – you have to figure out how to have them both run and it requires more effort to have them both – it often pays off because it’s safer and it enables resumable refactoring.<br><br>An example of a high-level parallel design is the replacement of a RDBMS with a NoSQL database. You’d start by implementing the code for writing into the new DB, then you would use it and write both to the old and the new one, then you would start also reading from the new one (perhaps comparing the results to the old code to verify their correctness) while still using the old DB’s data. Next you would start actually using the NoSQL DB’s data, while still writing to/reading from the old DB (so that you could easily switch back). Only when the new DB proves itself would you gradually remove the old DB.<br><br><p dir=\"ltr\">An example of a micro-level parallel design is the replacement of method parameters (message etc.) with the object they come from (an Edge), as <a href=\"https://github.com/iterate/codecamp2012/commit/cc04f0bb60d8260456049790793d462ce8810ef2#diff-1\">we did for notifyComment</a>:</p><br><br><pre><code>\n- public void notifyComment(String message, String eventName, String user) {\n-    notifications.add(user + &quot;: commented on &quot; + eventName + &quot; &quot; + message);\n---\n+ public void notifyComment(Edge target) {\n+    notifications.add(target.getTo().getId() + &quot;: commented on &quot; + target.getFrom().getId() + &quot; &quot; + target.get(&quot;comment&quot;));\n</code></pre><br><br>The steps were:<br><br><ol>\n    <li>Adding the Edge as another parameter (Refactor – Change Method Signature)</li>\n    <li>Replacing one by one usages of the original parameters with properties of the target Edge (Infinitest running tests automatically after each change to verify we’re still good)</li>\n    <li>Finally removing all the original parameters (Refactor – Change Method Signature)</li>\n</ol><br><br>The good thing is that your code always works and you can commit or stop at any time.<br><br>For an example, see my blog post <a href=\"/2017/02/03/demonstration-applying-the-parallel-change-technique-to-change-code-in-small-safe-steps/\">Demonstration: Applying the Parallel Change technique to change code in small, safe steps</a>.<br><br><h2>Related</h2><br><br>Parallel Design enables <strong>Resumable Refactoring</strong> - the code is always buildable and you are able to stop in the middle of the refactoring and continue (or not) at any later time.<br><br><h2>Note regarding the name</h2><br><br>My mentor called this Parallel Design but I prefer the name Parallel Change used on Martin Fowler's site by D. Sato since Parallel Design is also used in Lean for the practice of developing multiple solutions to the same problem in parallel to ensure that a hard deadline is not missed - typically a quick but suboptimal and a more time-consuming but better one.<br><br><h2>References</h2><br><br><ul>\n    <li><a href=\"https://martinfowler.com/bliki/ParallelChange.html\">ParallelChange</a> at MartinFowler.com by D. Sato - break the change into expand, migrate, and contract; nice examples and useful links</li>\n    <li><a href=\"https://www.infoq.com/presentations/The-Limited-Red-Society\">Joshua Kerievsky's talk The Limited Red Society</a> - the author argues for keeping periods when code doesn't compile or tests fail to minimum and shows examples of Big Leap and Parallel Change (referred to as Paralle Design here) strategies; highly recommended</li>\n    <li><a href=\"/2012/03/12/kent-beck-best-practices-for-software-design-with-low-feature-latency-and-high-throughput/\">Summary of Kent Beck's talk Best Practices for Software Design with Low Feature Latency and High Throughput</a></li>\n    <li>Kent Beck's presentation <a href=\"https://www.slideshare.net/deimos/kent-beck-effective-design\">Effective Design</a> (slides 8 and 9)</li>\n    <li><a href=\"https://www.facebook.com/notes/facebook-engineering/software-design-glossary/10150309412413920\">The Succession entry in Kent Beck's Software Design Glossary</a> - \"[..] <em>Succession </em>is the art of taking a single conceptual change, breaking it into safe steps, and then finding an order for those steps that optimizes safety, feedback, and efficiency. [..]\"</li>\n    <li>Dan Milstein: <a href=\"https://onstartups.com/tabid/3339/bid/97052/Screw-You-Joel-Spolsky-We-re-Rewriting-It-From-Scratch.aspx\">How To Survive a Ground-Up Rewrite Without Losing Your Sanity</a> - quotes: \"Over my career, I've come to place a really strong value on figuring out how to break big changes into small, safe, value-generating pieces.\" And: \"Here's what I'm going to say: always insert that dual-write layer. <em>Always</em>. It's a minor, generally somewhat fixed cost that buys you an incredible amount of insurance. It allows you, as we did above, to gradually switch over from one system to another. It allows you to back out at any time if you discover major problems with the way the data was migrated (which you will, over and over again). It means your migration of data can take a week, and that's not a problem, because you don't have to freeze writes to <em>both</em> systems during that time. And, as a bonus, it surfaces a bunch of those weird situations where \"other\" systems are writing directly to your old database.\"</li>\n</ul>",
  "excerpt": ""
 },
 {
  "title": "Why lean?",
  "published": "2013-01-11 07:01:38",
  "postType": "page",
  "slug": "/why-lean/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "<div style=\"background-color:lightgrey;font-weight:bold;padding:10px;margin-bottom:10px;\">THIS IS ONLY A DRAFT</div>\r\nLean in keywords: autonomy feedback agility experimentation learning continual-improvement latest-responsible-moment humility<br><br>For me, lean is about admitting that the world around us is too chaotic, too changing, for us to be able to comprehend it fully and to control it. It is about giving up the false illusion of control that detailed, long-term plans and command &amp; control structures provide and adopting a process suitable for our real chaotic environment, a process based on empirical control. An empirical process is constantly being adjusted based on the feedback from the environment. It is a scientifical process: you form an hypothesis, act, observe the results, and adjust accordingly.<br><br>The consequences of adpoting the lean approach are manifold. To be really able to experiment, learn, and react quickly, you must enable the people at the front line to do that, the command &amp; control chain is too long, slow, and distant from the situation. They must have motivation, autonomy, power to decide. And the teams must be cross-functional to be able to grasp the situation and act effectively (leading to DevOps etc.). You must relentlessly question and improve your process because it is never perfect and because the situation keeps on changing. You must focus on creating fast feedback loops - for software development, this eventually leads to continuous delivery and high focus on code quality.<br><br>Lean software development: Admit that nobody really knows what should be built and that it thus has to be found out via experimentation (hypothesis -&gt; feedback). Therefore it is crucial to start by understand the business need/value. Be aware that software doesn't just fit into a situation, it effects it - therefore ask how the processes are going to change due to / for the sake of the software to be developed. Build cross-functional teams (devops, testers, business). Do not base the development on plans but on business value and goals and measuring the project's contribution to them. Be aware of the cost of complexity and the 80:20 rule and stop the development when enough business value has been providing (preferably before implementing the other 60-80% of the features that would be rarely used but multiply the complexity). Be aware of the fact that there can be a much cheaper, faster, perhaps non-technical solution to the business need.<br><br>TODO: Resources, ideas\r\n<ul>\r\n\t<li>Antifragile =&gt; principles (motiv. people, worker's intelligence, ...)</li>\r\n\t<li>\"feedback loops\" - link to Kim's blog</li>\r\n\t<li>Beyond Budgeting</li>\r\n\t<li>Tom Gilb: <a href=\"https://vimeo.com/49381225\">Agile revised JZ12 talk</a>, papers, book</li>\r\n\t<li>Gojko Adzic's Impact Mapping</li>\r\n\t<li>Ward Cun. &amp; others: SW devel. is primarily a process of learning (what, why &amp; how to build)</li>\r\n\t<li>Sub-topics:\r\n<ul>\r\n\t<li>kaizen</li>\r\n\t<li>Lean &lt;&gt; agile &lt;&gt; code quality</li>\r\n\t<li>cynefin's 4 quadrants</li>\r\n\t<li>Cash to concept - 7 rules of lean, ...</li>\r\n\t<li>quality &lt;&gt; speed</li>\r\n\t<li>autonomy x motivation etc.</li>\r\n\t<li>|| design</li>\r\n</ul>\r\n</li>\r\n</ul>\r\nTBD: Continue\r\n<h2>Resources</h2>\r\n<h3>Lean, agile, software development</h3>\r\n<ul>\r\n\t<li><a href=\"https://youtu.be/502ILHjX9EE\">Agile in a Nutshell</a> (originally Agile Product Ownership in a Nutshell) by Henrik Kniberg - the best explanation of the agile development process ever, in just 15 minutes and with wonderful animation; every developer should see this. Some highlights: the most important task of product owner is to say NO so that backlog doesn't grow infinitely; at start, the estimates of size and value will suck and that's OK because the value is in the conversation, not in the numbers (that are anyway just relative); the goal is to maximize outcome (value), not output (# features). Compromises between short-term vs. long-term goals, knowledge vs. customer value building etc. Build the right thing (PO) x build it right (devs) x build it fast (SM). Technical debt x sustainable pace. As I said - you MUST see it.</li>\r\n\t<li><a href=\"https://martinfowler.com/articles/newMethodology.html\">M. Fowler: The New Methodology</a> - a good description of the rise of Agile, the motivation for it, the various Agile methodologies (XP, Lean, Scrum etc.) and what is required to be able to apply an agile approach. Main points: Agile is adaptive (vs. predictive) and relies heavily on people and their judgement and skills (vs. treating them as same, replacable units) - which also leads to the need of leadership instead of (command&amp;control) management. Discusses unpredictability of requirements and scope, foolishness of separating design and implementation, difficulty of measurement of SW development, continuous improvement etc. Quotes: \"However letting go of predictability doesn't mean you have to revert to uncontrollable chaos. Instead you need a process that can give you control over an unpredictability. That's what adaptivity is all about.\"</li>\r\n\t<li><a href=\"https://www.reliableplant.com/Read/9818/toyota\">The Toyota concept of 'respect for people'</a> - many state that they respect their workers but fail to really understand what it means; it is not about freedom of act, it is about a mutual respect, leveraging the strengths of each other: worker's experience and insight and manager's broader overview, as demonstrated by the problem-solving dialog and challenges (problem - root cause - solution - measure of success, the manager challenging the worker's answers). Also a nice example how the evaluation of individual performance leads to a much worse system and high turnover compared to a whole-oriented company.</li>\r\n\t<li><a href=\"https://kosmothink.com/2013/11/13/2636/\">It’s a state of mind: some practical indicators on doing agile vs. being agile</a> - are you agile or are just \"doing agile\"? Read on ti find out, if you dare! F.ex. \"<em>Non Agile teams have a process that slows the review of the changes.</em>\" Cocnlusion: \"<em>An Agile mindset is just that – a state of mind, a set of values. Its a constant questioning, and an opening up to possibilities. Its a predisposition to produce great things.</em>\"</li>\r\n</ul>\r\n<h3>Teaching SW dev</h3>\r\n<ul>\r\n\t<li>Dave Nicolett: <a href=\"https://davenicolette.wordpress.com/2013/05/31/i-know-how-to-tie-my-shoes/\">I know how to tie my shoes</a> - on the difficulty of convincing people to try unfamiliar software development techniques - \"<em>People change the way they operate when they are experiencing some sort of inconvenience or negative feedback. As long as things are going along reasonably well, people don’t go out of their way to change the way they work.</em>\" (with few exceptions) You can learn to <a href=\"https://www.youtube.com/watch?v=gbaHxsilsKI\">tie your shoes in a split second</a>, but why to invest the effort? You'd need to set aside assumptions, suppress habits, practice. You can argument there are many inconveniences (bugs, criticism for slow delivery, ...) but \"Unfortunately, that’s all pretty normal, and most people in the software field are accustomed to it.  They don’t see it as a problem that calls for them to change their practices. Most of them probably have a hard time visualizing a different reality.\" =&gt; Maybe that’s the reason there’s been no satisfactory answer to the question of how to convince people to adopt different practices. We shouldn’t be trying to convince people to do anything. We should be helping people solve their problems and achieve their goals. If they are satisfied with the outcomes they achieve using their current methods, then there is no problem to solve.</li>\r\n\t<li><a href=\"https://sealedabstract.com/rants/why-software-projects-are-terrible-and-how-not-to-fix-them/\">Why Software Projects are Terrible and How Not To Fix Them</a> - many teams are not ready to embrace new/better software practices, primarly for two reasons: 1) most of them are nonintuitive (f.ex. adding more people will slow dev down) and need to be sold through a high hierarchy of managament - but people/managers/organizations don't really care, it takes years for good/bad practices to have an impact, which is not relevant \"now.\" 2) Businss objectives change too quickly and SW is blamed for not delivering. Based on evaluating many failed projects. Conclusion: Choose carefully people/organizations your work with. Avoid blame-driven ones. Quote on middle managers: \"<em>He has to put more developers on the project, call a meeting and yell at people, and other arbitrary bad ideas.  Not because he thinks those will solve the problem.  In fact, managers often do this in spite of the fact that they know it’s bad. <strong>Because that’s what will convince upper management that they’re doing their best.</strong></em>\" \"<em>In the vast majority of failed projects I’ve been called to looked at, the managers have not read one book on software engineering.</em>\"</li>\r\n</ul>\r\n<h2>Inspiration for improvement and making an impact</h2>\r\nIf your process is the same in a year from now then you are far less efficient than you could be. #kaizen<br><br>Learn the rules, practice them, transcend them. No methodology is perfect, no rule or pattern is absolute. You need to think for yourself, question, experiment, think originally.<br><br>Forget delivering software. Make an impact, deliver valuable change. What valuable change should your current project cause? And no, software is not alwasy the right answer.<br><br>Be humble, respect people, question your thinking. Often we see something, jump to a conclusion, rush for an action, persuaded about our truth and determined to win and change the situation as we want for the good of all involved. Do not act based on unverified assumptions and beliefs - make your though process transparent to yourself and to others, check it with them, act based on open, verifiable data - see the <a href=\"https://www.mindtools.com/pages/article/newTMC_91.htm\">Ladder of Inference</a> for details (nicely introduced in this 5 min TED video called <a href=\"https://ed.ted.com/lessons/rethinking-thinking-trevor-maber\">Rethinking thinking</a>, by Trevor Maber).",
  "excerpt": ""
 },
 {
  "title": "Learning",
  "published": "2013-03-23 16:40:15",
  "postType": "page",
  "slug": "/wiki/development/learning/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "<h2>Python &amp; programming</h2>\r\n<ol>\r\n\t<li>Snytax: <a href=\"https://learnpythonthehardway.org/\">Learn Python the Hard Way</a> (by Zed Shaw)</li>\r\n\t<li><a href=\"https://newcoder.io/\">newcoder.io: Learning more Python via projects</a> - an excellent next step; in this tutorial series you will be building real-world apps while learning more of Python. You will play with, Data Visualization, APIs, Web Scraping, Networks, GUI.</li>\r\n</ol>\r\n<h2>Tools</h2>\r\n<h4>Git</h4>\r\n<ul>\r\n\t<li><a href=\"https://rogerdudler.github.com/git-guide/\">git - the simple (visual) guide</a> by R. Dudler - a minimalistic yet sufficient intro into git in a rather simple and visual way. Cons: too little about reslving conflicts and tools for merging. I'd also prefer if it recommended rebasing over merging. Has also a <a href=\"https://rogerdudler.github.com/git-guide/files/git_cheat_sheet.pdf\">git cheatsheet</a>.</li>\r\n\t<li><a href=\"https://www.ndpsoftware.com/git-cheatsheet.html#loc=workspace;\">An interactive one-page git cheatsheet</a> highlighting the differences between stash, workspace, index, local repository, and upstream repository (a.k.a. origin)</li>\r\n\t<li><a href=\"https://learn.github.com/p/intro.html\">learn.github.com </a></li>\r\n</ul>",
  "excerpt": ""
 },
 {
  "title": "Craft",
  "published": "2013-03-30 17:30:01",
  "postType": "page",
  "slug": "/craft/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "<div style=\"background-color:lightgrey;font-weight:bold;padding:10px;margin-bottom:10px;\">THIS IS ONLY A DRAFT</div><br><br>About the craft of software development and why it matters.<br><br><blockquote>Effectiveness: the capability to achieve a chosen set of goals.<br><br>(Effectiveness = doing the right thing, efficiency = doing it right.)</blockquote><br><br>By \"craft\" I mean focus on the following:<br><br><ul>\n    <li>Making our organizations more effective</li>\n    <li>Building the right software, building it right, building it quickly</li>\n</ul><br><br>There are multiple aspects - organizational, human (motivation, mastery, ...), technical (skills, ...).<br><br><em>Note: The pages <a title=\"Why lean?\" href=\"/why-lean/\">Why lean?</a> and <a title=\"Code Quality\" href=\"/code-quality/\">Code Quality</a> should be moved here.</em><br><br><h2>Resources</h2><br><br><h3>People, organizations, values</h3><br><br><ul>\n    <li><a href=\"https://www.amazon.com/Drive-Surprising-Truth-About-Motivates/dp/1594484805/\">Drive: The Surprising Truth About What Motivates Us</a></li>\n    <li><a href=\"https://flowchainsensei.wordpress.com/rightshifting/\">Bob Marshall: Rightshifting</a> - according to the author, 80% of knowledge work organizations are very ineffective, wasting resources on non-value-adding activites; only few are effective, even fewer highly effective. Rightshifting is the attempt at shiting them to the right, towards higher effectiveness. Links to a few videos explaining it more. Related: Steve McConnell's <a href=\"https://www.stevemcconnell.com/psd/13-businesscase.htm\">Business Case for Better Software Practices</a>, referring to a study by <a href=\"https://www.sei.cmu.edu/\">SEI</a>; \"The actual distribution of software effectiveness is asymmetric. Most organizations perform much closer to the worst practice than to the best.\" - the best performing 10 times better then the worst/average (productivity, speed, defects, value)</li>\n    <li><a href=\"https://ecorner.stanford.edu/authorMaterialInfo.html?mid=3103\">Tim O'Reilly: Create More Value Than You Capture</a> (30 min + questions) - build apps that matter, that change how we do things. Thinking just about money is bad. Try to make the society better, smart, create more value than you capture, solve important problems, help people. Ex. startups: <a href=\"https://www.uber.com/cities\">Uber</a>, <a href=\"https://squareup.com/\">Square</a>, <a href=\"https://codeforamerica.org/about/\">Code for America</a>.</li>\n</ul><br><br><h3>Software development</h3><br><br><ul>\n    <li><a href=\"https://www.youtube.com/watch?v=nIonZ6-4nuU\">Kent Beck: Making Making CoffeeScript</a> [video, 20 min] - a wonderful and inspiring demonstration of some of the key values and practices of efficient software development (while developing a test framework for/in CoffeeScript) - focus on shortening the feedback loop and application of <a href=\"/wiki/development/parallel-design-parallel-change/\">parallel change</a>; iterative evolution/emergence.</li>\n</ul>",
  "excerpt": ""
 },
 {
  "title": "Learning Java (EE)",
  "published": "2013-05-23 08:49:45",
  "postType": "page",
  "slug": "/learning-java-ee/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "Tips for learning Java, Java web development etc.<br><br><strong>DRAFT</strong><br><br>Notion:\r\n<ul>\r\n\t<li>? - I haven't read/seen the book</li>\r\n\t<li>?? - I do not have any idea if it is good or not</li>\r\n</ul>\r\nJava:\r\n<ul>\r\n\t<li>? <a href=\"https://www.amazon.com/Head-First-Java-Kathy-Sierra/dp/0596009208/\">Head First Java</a> - reportedly good</li>\r\n\t<li><a href=\"https://www.amazon.com/Effective-Java-2nd-Joshua-Bloch/dp/0321356683/\" rel=\"nofollow\">Effective Java, 2nd Edition (Bloch)</a> is supposed to be a required read by many</li>\r\n\t<li>A good <a href=\"https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=458&amp;get_params=p_track_id:JSE6Prog\">Oracle Certified Professional, Java SE 6 Programmer</a> study guide to get a solid overview of the basics and corner cases, once you know Java itself</li>\r\n\t<li>And if you want to do any serious web programming, <a href=\"https://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601/\" rel=\"nofollow\">Java Concurrency in Practise</a> is likely pretty useful to avoid many pitfalls</li>\r\n\t<li>?? <a href=\"https://www.greenteapress.com/thinkapjava/\">Think: Java How to Think Like a Computer Scientist</a> (online and pdf)</li>\r\n</ul>\r\nJava Web Dev:\r\n<ul>\r\n\t<li>?? <a href=\"https://www.amazon.com/Beginning-JSP-JSF-Tomcat-Development/dp/1430246235/\">Beginning JSP, JSF and Tomcat: Java Web Development</a>, 2nd ed. (2012, 436 pages)</li>\r\n</ul>",
  "excerpt": ""
 },
 {
  "title": "Česká politika",
  "published": "2013-08-24 11:33:52",
  "postType": "page",
  "slug": "/wiki/ceska-politika/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "Pro nedostatek lepšího umístění pro tyto odkazy.<br><br>A když už jsme u těch Čech, <a href=\"https://zpravy.idnes.cz/v-pelhrimove-byla-predstavena-nejdelsi-ceska-veta-ze-souhlasek-pv3-/domaci.aspx?c=A130821_124105_jihlava-zpravy_mv\">nejdelší neslabičná věta</a> Milana Hanáka: \"Blb vlk pln žbrnd zdrhl hrd z mlh Brd skrz vrch Smrk v čtvrť srn Krč.\"\r\n<ul>\r\n\t<li><a href=\"https://demagog.cz\">Demagog.cz</a> - factcheck politických diskusí - ověření tvzení politiků v TV diskusích ap. s ohledem na pravda/pololež/lež</li>\r\n\t<li><a href=\"https://kohovolit.eu/\">KohoVolit.eu</a> - \"využití analýz reálných dat pro veřejnou kontrolu\" - jak kteří politici/strany hlasovali, <a href=\"https://budovanistatu.cz/\">přehled českého rozpočtu</a> s detajly využití peněz, <a href=\"https://napistejim.cz/\">hledání svých zastupitelů</a> dle adresy voliče aj.</li>\r\n\t<li><a href=\"https://www.ceskapozice.cz/\">Česká pozice</a> - \"elitní informační web pro náročné čtenáře, politicky neutrální mezinárodní tým zkušených novinářů\"</li>\r\n\t<li><a href=\"https://www.nasipolitici.cz/\">NašiPolitici.cz</a> - NGO, \"databáze politiků a lobbistů jako nástroj jejich veřejné kontroly\"</li>\r\n\t<li><a href=\"https://blablanevolim.cz/\">blablanevolim.cz</a> - zavazi se politici prosadit 8 protikorupcnich pravidel? dodrzi to? (-&gt; <a href=\"https://rekonstrukcestatu.cz/\">rekonstrukcestatu.cz</a>)</li>\r\n</ul>",
  "excerpt": ""
 },
 {
  "title": "Clojure",
  "published": "2014-01-02 10:35:32",
  "postType": "page",
  "slug": "/clojure/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "Clojure-related resources and notes.<br><br><h1>Why Clojure(Script)?</h1><br><br><blockquote>Clojure(Script) is simpler yet more expressive (than Java(Script))\n<em>- paraphrase of David Nolan in <a href=\"https://swannodette.github.io/2015/07/29/clojurescript-17/\">ClojureScript Next</a></em></blockquote><br><br>Clojure (and thus ClojureScript) is one of the <strong>best designed</strong> programming languages, it is really well thought-through and great care is taken to ensure that the pieces do each a different thing yet fit perfectly together. It has been designed after years of painful experiences with production systems in Java, C++, Common Lisp and others to avoid the main sources of complexity and maintenance headaches. (For details see the <a href=\"https://clojure.org/about/rationale\">Clojure Rationale</a> and talks by Rich Hickey such as <a href=\"https://www.youtube.com/watch?v=2V1FtfBDsLU\">Effective Programs - 10 Years of Clojure</a>.)<br><br>Clojure enables <strong>interactive programming</strong> - you can connect a REPL to your application and develop it and interact with it from code while it is running. You cannot imagine the power and the insanely short feedback loop until you experience it. See the short screencast <a href=\"https://www.youtube.com/watch?v=KZjFVdU8VLI\">Interactive programming Flappy Bird in ClojureScript</a> for an idea.<br><br>It has performant <strong>immutable data structures</strong> that make many concurrency-related defects impossible.<br><br>It has a powerful <strong>library of data transformation</strong> functions that can be effectively combined together.<br><br>When necessary, you can use <strong>macros</strong> to remove duplication and fit the language to your problem.<br><br>No matter whether you use Clojure core or a library, they use raw Clojure data - that you can access and transform through the core functions you know and love. No more learning a custom API for every library! (Though you still need to learn and understand its data.)<br><br>It has also <strong><a href=\"https://clojure.com/blog/2013/06/28/clojure-core-async-channels.html\">core.async</a></strong> for asynchronous/reactive programming,  <strong><a href=\"https://clojure.org/about/spec\">clojure.spec</a></strong> to document, verify, use and test your data, and much more.<br><br>Clojure has also an active and friendly community. You always get help in the official Slack organization, one of the mailing lists, and other places.<br><br><h5>Nate Wildermuth: ClojureScript and the Blub Paradox</h5><br><br>(highlights and [insertions] mine)<br><br><blockquote>That makes the important advantages of ClojureScript hard to perceive, as <strong>the essential difference [from JS] belongs in new patterns of problem solving rather than new syntax and grammar</strong>.<br><br>ClojureScript does the opposite. Instead of seeking to avoid the danger of using one bug-prone function, it provides three types of switch statements, each suited to different kinds of control flow. These options not only allow one to engage in high-level forms of abstraction, but actually encourage this kind of thinking. Moreover, the entire pattern of thought begins at a much higher level, seeking to recognize patterns even before fully understanding the solution. [The same applies for Clojure and Concurrency, having cca 4 ways to manage state instead of Java’s one -makes you think about what/why/how, which is a Good Thing (TM)]<br><br>ClojureScript, like JavaScript, doesn't come with pattern matching. This would be a problem, except that ClojureScript comes with something better: macros.<br><br>Some languages run close to the \"metal\" — […]. Other languages take the opposite approach, running close to the \"human metal\" — our minds. The closer that a language can express (or in the case of macros, be modified to express) human thoughts, the closer we get to a program that we can understand natively. We no longer need to change our thoughts to fit the language. Instead, we change our language to fit the thoughts.</blockquote><br><br><h1>For beginners</h1><br><br><h3>Note: Clojure and productivity</h3><br><br>You can be very productive with Clojure, much more than e.g. in Java thanks to its interactive development, simplicity, and powerful tools such as macros. However there are some preconditions, as Eric Normand writes in <a href=\"https://purelyfunctional.tv/issues/purelyfunctional-tv-newsletter-266-beginner-experience/\">PurelyFunctional.tv Newsletter 266</a>:<br><br><blockquote>When you don't have the stuff above (paren[these] management, integrated REPL, hot code reloading, and experience debugging the errors), the [development] cycle can be much slower than the descendants of punchcard languages.</blockquote><br><br>(Fortunately the community is working on providing better beginner user experience, better tools, and better error reporting to alleviate these.)<br><br>So to really experience the productivity and pleasure of Clojure(Script), you need:<br><br><ol>\n    <li>A tool to enable effective, productive (structural) editing of Clojure code, such as <a href=\"https://shaunlebron.github.io/parinfer/\">Parinfer</a></li>\n    <li>A good editor with an integrated REPL so that you can evaluate your code and interact with your running application in a frictionless way. Cursive (paid for commercial use) and Emacs (powerful but very steep and long learning curve) are the most popular, but there are also special ones for beginners such as <a href=\"https://sekao.net/nightcode/\">Nightcode</a> and (simpler, web-based) <a href=\"https://sekao.net/lightmod/\">Lightmod</a>. (Many editors have some Clojure support but the quality and depth and thus user experience vary a lot.)</li>\n    <li>ClojureScript: hot code reloading (which <a href=\"https://github.com/bhauman/lein-figwheel\">Figwheel</a> does perfectly)</li>\n    <li>Experience debugging errors - sadly you have to learn that though tools such as Ultra/Pretty (see below) and <a href=\"https://github.com/bhb/expound\">Expound</a> for Spec do help.</li>\n    <li>Not to hesitate to ask for help and advice at the Clojurians Slack community :-)</li>\n</ol><br><br><h3>Resources for beginners</h3><br><br>Official sources<br><br><ul>\n    <li><a href=\"https://clojure.org/\">Clojure.org</a> and its <a href=\"https://clojure.org/reference/reader\">References</a> and <a href=\"https://clojure.org/guides/getting_started\">Guides</a>.</li>\n    <li><a href=\"https://clojurescript.org/\">ClojureScript.org</a> and its <a href=\"https://clojurescript.org/reference/documentation\">References</a> and <a href=\"https://clojurescript.org/guides/quick-start\">Guides</a>.</li>\n</ul><br><br>Help &amp; learning<br><br><ul>\n    <li><a href=\"https://jafingerhut.github.io/cheatsheet/grimoire/cheatsheet-tiptip-cdocs-summary.html\">Clojure Cheatsheet</a> and <a href=\"https://cljs.info/cheatsheet/\">ClojureScript Cheatsheet</a></li>\n    <li><a href=\"https://clojuredocs.org/\">ClojureDocs</a> - function documentation with examples</li>\n    <li><a href=\"https://www.conj.io/\">Grimoire</a> - another, newer function documentation site with examples</li>\n    <li><a href=\"https://www.4clojure.com/\">4clojure</a> - learn Clojure by solving small task and comparing your solution with others</li>\n    <li><a href=\"https://www.maria.cloud/intro\">Maria: learn Clojure with Shapes</a> - a cool, beginner-friendly ClojureScript notebook-style editor with a built-in introduction to Clojure(Script) using graphical programming</li>\n    <li>On-line books\n<ul>\n    <li><a href=\"https://www.braveclojure.com/\">Clojure for the Brave and True</a></li>\n</ul>\n</li>\n</ul><br><br>Community, advice, fora<br><br><ul>\n    <li><a href=\"https://clojurians.net/\">Clojurians</a> - the official Slack organization with channels for Clojure, ClojureScript, and most popular libraries and topics. Leading developers and authors often answer questions.</li>\n    <li><a href=\"https://groups.google.com/forum/#!forum/clojure\">Clojure</a> and <a href=\"https://groups.google.com/forum/#!forum/clojurescript\">ClojureScript Google Groups</a> - for advice, announcements, keeping informed</li>\n    <li><a href=\"https://clojureverse.org/\">Clojureverse</a> - friendly discussion fora</li>\n    <li>Newsletters to keep updated about the latest development, useful libraries, etc.\n<ul>\n    <li><a href=\"https://therepl.net/\">The REPL</a> by Daniel Compton(<a href=\"https://us7.campaign-archive.com/home/?u=fef380870c4a5633a21f55d8e&amp;id=b5272e542b\">older issues</a>)</li>\n    <li><a href=\"https://purelyfunctional.tv/newsletter/\">PurelyFunctional.tv Newsletter</a> by Eric Normand (<a href=\"https://purelyfunctional.tv/newsletter-archives/\">older issues</a>)</li>\n</ul>\n</li>\n    <li>Podcasts\n<ul>\n    <li><a href=\"https://blog.cognitect.com/cognicast/\">Cognicast</a> by Cognitect, the company behind Clojure - interviews with interesting people</li>\n    <li><a href=\"https://defn.audio/\">defn</a> - \"A loud, irreverent podcast discussing the delights of Clojure, ClojureScript with leaders and folks of the Community\"</li>\n</ul>\n</li>\n</ul><br><br>Beginner-friendly tools<br><br><ul>\n    <li>Beginner-friendly all-in-one IDE: <a href=\"https://sekao.net/nightcode/\">Nightcode</a> and (simpler, web-based) <a href=\"https://sekao.net/lightmod/\">Lightmod</a></li>\n    <li><a href=\"https://www.luminusweb.net/\">Luminus</a> - web \"framework,\" i.e. a curated and integrated set of libraries for web (backend and frontend) development in Clojure(Script) (developer tools, logging, security etc). So that you don't need to assemble your own.</li>\n    <li>Editing code\n<ul>\n    <li><a href=\"https://shaunlebron.github.io/parinfer/\">Parinfer</a> - provides for efficient and simple structural editing of Clojure/Lisp code using just Tab (compared to the older Paredit with its numerous key-bindings). A must-have for efficient and productive experience with any Lisp.</li>\n</ul>\n</li>\n    <li>Building and running code\n<ul>\n    <li><a href=\"https://github.com/venantius/ultra\">Ultra</a> - a Leiningen (the primary Clojure build tool) plugin for an absolutely kick-ass development environment (i.e. REPL) - better stack-traces (via <a href=\"https://github.com/AvisoNovate/pretty\">Pretty</a>), human-friendly test output, colors, syntax-highlighting.</li>\n</ul>\n</li>\n</ul><br><br>&nbsp;<br><br><h1>Style and best practices</h1><br><br><h3>Core</h3><br><br><ul>\n    <li><a href=\"https://stuartsierra.com/2018/07/06/threading-with-style\">Threading do's and don'ts</a>: use -&gt; and -&gt;&gt; only for navigation or transformation; prefer to keep the same type (but the last transf.) - break if necessary; avoid anonymous functions to change order type - likely doing to much already (if really necessary, use as-&gt; which is intended to be used exactly &amp; only inside -&gt;).</li>\n</ul><br><br><h1>Resources</h1><br><br><h3>Learning</h3><br><br><ul>\n    <li><a href=\"https://shaunlebron.github.io/t3tr0s-slides/\">Tetris in ClojureScript</a> (<a href=\"https://github.com/shaunlebron/t3tr0s-slides\">GitHub</a>; 2014+) - reportedly a great, interactive intro to the langs</li>\n    <li><a href=\"https://www.longstorm.org/weekly/cito/1/\">Open Source Clojure Tasks and Projects</a> - a weekly newsletter of suitable, learning-friendly tasks</li>\n    <li><a href=\"https://github.com/marcuscreo/clojure-learning-resources\">A list of Clojure projects which have tags that indicate novice Clojurists could contribute to them</a> by Marcus Blankenship</li>\n</ul><br><br><h3>Libs</h3><br><br>Convenience libraries - the missing \"features\" of clojure.core etc.<br><br><ul>\n    <li><a href=\"https://github.com/ztellman/potemkin/\">ztellman / potemkin</a> - \"<em>a collection of facades and workarounds for things that are more difficult than they should be</em>\" - f.ex. <em>import-vars</em> so that we can expose a single namespace with everything to users while having the code split in multiple files, <em>def-map-type</em> so that we only need to implement the 4 essential functions, <em>def-derived-map</em> - as a view on another object, f.ex. JavaBean, <em>definterface+</em> - same syntax as defprotocol but creating an interface with its memory/performance benefits =&gt; easy to switch,<em> fast-memoize</em> and more</li>\n    <li><a href=\"https://github.com/cloojure/tupelo\">cloojure/tupelo</a> (and <a href=\"https://github.com/cloojure/tupelo-datomic\">cloojure/tupelo-datomic</a>) - convenience features \"missing\" from clojure.core - e.g. the awesome (spy[x[x]]) for logging the expression [+type] going through a threading macro or a fn, ...)</li>\n    <li><a href=\"https://github.com/marick/suchwow\">marick/suchwow</a> - <em>Functions and behaviors not present in Clojure core. Support for creating and using your own \"favorite functions\" namespace. Better docstrings for clojure.core functions. More expansive versions of clojure.core functions.</em></li>\n    <li><a href=\"https://github.com/plumatic/plumbing\">plumatic/plumbing</a> - <em>Prismatic's Clojure(Script) utility belt</em> (including Graph - <em>a simple and declarative way to specify a structured computation</em>)</li>\n    <li><a href=\"https://github.com/weavejester/medley\">weavejester/medley</a> - <em>A lightweight library of useful Clojure(Script) functions (a tighter focus than useful and plumbing, and limits itself to a small set of general-purpose functions.)</em></li>\n    <li><a href=\"https://github.com/flatland/useful\">flatland/useful</a></li>\n    <li><a href=\"https://github.com/nathanmarz/specter\">nathanmarz/specter</a> - querying and manipulation of complex, nested data structures made easy</li>\n</ul><br><br>Web<br><br><ul>\n    <li><a href=\"https://github.com/ptaoussanis/sente\">Sente - Clojure(Script) + core.async + WebSockets/Ajax</a> - a tiny 600 LoC library for websockets (with fall-back to long-polling) communication between ClojureScript frontend and clojure backend, using EDN, support for request-reply and multiple user windows/tabs (<a href=\"https://groups.google.com/forum/m/#!msg/clojure/5J4L8pbGwGU/O1RSsiKE_JUJ\">comparison with Chord</a> (no non-WS fallback or req/resp))</li>\n</ul><br><br><h3>Development in general</h3><br><br>Essential<br><br><ul>\n    <li><a href=\"https://dev.solita.fi/2014/03/18/pimp-my-repl.html\">Timo Mihaljov's Pimp My REPL</a> (3/2014)- really great tips - user.clj, :dev profile, user-wide config in .lein/profiles.clj, tools.namespace, making funs available everywhere &amp; more via Vinyasa, form println with Spyscope, debug-repl, difform, clj-ns-browser (see also <a href=\"https://github.com/palletops/lein-shorthand\">lein-shorthand</a> and its library version <a href=\"https://github.com/gfredericks/dot-slash-2\">dot-slash-2</a> [actively developed at least in 2017])</li>\n    <li>Stuart Sierra's <a href=\"https://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded\">My Clojure Workflow, Reloaded</a> (6/2013) and the derived <a href=\"https://github.com/stuartsierra/reloaded\">reloaded lein template</a> and the <a href=\"https://github.com/stuartsierra/component\">component library</a> (and the lein template <a href=\"https://github.com/mowat27/reloadable-app\">reloadable-app</a> to build projects using component)</li>\n    <li>B. Batsov’s <a href=\"https://github.com/bbatsov/clojure-style-guide#readme\">Clojure Style Guide</a> (based on JoC etc.) at GitHub</li>\n    <li>Add dependencies dynamically to a running JVM - <a href=\"https://github.com/cemerick/pomegranate\">pomegranate</a> and its <em>add-dependencies</em> (and <a href=\"https://github.com/pallet/alembic\">Alembic</a> that wraps it and tries to avoid conflicts between project's and its dependencies - but not maintained since 2016)</li>\n</ul><br><br>ClojureScript<br><br><ul>\n    <li><a href=\"https://github.com/plexus/chestnut\">Chestnut</a> (10/2014) - A Leiningen template for a Clojure/ClojureScript app based on Om, featuring a great dev setup, and easy deployment. Highlight: well-functioning browser-connected REPL, see <a href=\"https://swannodette.github.io/2014/10/10/magic/\">a demo by D. Nolen</a> who labels it \"one of the coolest bits of ClojureScript tech I've encountered in a very long time.\" The REPL is \"always ready to go even if you kill the web server, refresh the web page, or have a JS exception on the page.\" and there is live reload upon file change without corrupting the app state.</li>\n    <li><a href=\"https://github.com/bhauman/lein-figwheel\">lein-figwheel</a> - Figwheel builds your ClojureScript code and hots loads it into the browser as you are coding - live code and CSS reloading</li>\n    <li><a href=\"https://github.com/tomjakubowski/weasel\">weasel</a> - WebSocket-connected REPL environment for ClojureScript - especially useful if the standard REPL doesn't work because the page does not allow for iframes and/or does not use http://</li>\n    <li><a href=\"https://github.com/binaryage/cljs-devtools/blob/master/readme.md\">clj-devtools</a> - Better presentation of ClojureScript values in Chrome DevTools</li>\n</ul><br><br>Testing<br><br><ul>\n    <li><a href=\"https://github.com/juxt/iota\">juxt iota</a> - simplify running multiple checks on a (complex) data structure</li>\n</ul><br><br>Data<br><br><ul>\n    <li><a href=\"https://typedclojure.org/\">Typed Clojure</a></li>\n    <li><a href=\"https://github.com/Prismatic/schema\">Prismatic Schema</a></li>\n    <li><a href=\"https://github.com/marick/structural-typing/wiki\">structural-typing</a> - runtime data checks similar to Schema, inspired by Elm. '<em>Tailored to \"flow-style\" programming, where complex structures flow through a series of functions, each of which makes a smallish change.</em>' Highlights: (1) Extra keys are to be preserved but not otherwise meddled with. (2) We want to check more then types (e.g. is a num in a range?)</li>\n    <li><a href=\"https://github.com/clojurewerkz/balagan/blob/master/README.md\">Balagan, Clojure (Script) data transformation and querying library</a> ClojureWerkz - this is something I’ve been looking for in quite a while. Ex.:\n<pre><code>(b/select {:a {:b {:c 1}} ..} [:a :* :c] (fn [val path] ...))</code></pre>\n</li>\n    <li><a href=\"https://github.com/tonsky/datascript\">DataScript</a> - Immutable database and <a href=\"https://en.wikipedia.org/wiki/Datalog\">Datalog</a> query engine for Clojure, ClojureScript and JS</li>\n    <li><a href=\"https://github.com/nathanmarz/specter\">Specter</a> (Clj(s))- queries and transformations on complex/nested data structures made extremely concise and elegant</li>\n    <li><a href=\"https://gist.github.com/stuarthalloway/2645453\">Use Datomic’s Datalog to query data structures</a></li>\n</ul><br><br>Utilities<br><br><ul>\n    <li><a href=\"https://github.com/clojure/tools.trace\">clojure/tools.trace</a> - trace calls, f.ex. run <em>(trace-ns my.ns)</em> to print call with params and return value of each function</li>\n    <li><a href=\"https://github.com/marick/structural-typing\">Schmetterling - Debug running clojure processes</a> from the browser! - upon an exception, the process will pause and S. will show the stack, which you can navigate and see locals and run code in the context of any stack frame; you can also trigger it from your code. It can be used nicely also in pre/post-conditions.</li>\n</ul><br><br>Lein<br><br><ul>\n    <li><a href=\"https://github.com/xsc/lein-ancient\">lein-ancient</a> - analyzes your <tt>project.clj</tt> and lets you know which dependencies are out of date.</li>\n    <li><a href=\"https://github.com/rkneufeld/lein-try\">lein-try</a> - start a REPL with various dependencies without needing a project. Great for exploring new libraries!</li>\n    <li><a href=\"https://github.com/jonase/eastwood\">Eastwood</a> - a lint tool for Clojure.</li>\n    <li><a href=\"https://github.com/palletops/lein-shorthand\">lein-shorthand</a> - a plugin to make useful functions (such as pprint, source) accessible in any namespace by copying them into a new namespace . so you can invoke (./pprint ...).</li>\n</ul><br><br><h3>Lib catalog</h3><br><br><ul>\n    <li><a href=\"https://www.clojure-toolbox.com/\">clojure-toolbox.com</a></li>\n    <li><a href=\"https://clojurewerkz.org/\">clojurewerkz.org</a></li>\n</ul><br><br><h3>From Clojure to Java</h3><br><br><ul>\n    <li><a href=\"https://github.com/GlenKPeterson/UncleJim\">UncleJim (\"Unmodifiable Collections for Java™ Immutability\") </a> is a very interesting looking library, with these main features:\n<ul>\n    <li>Type-safe versions of Clojure’s immutable collections, implementing the generic java.util collection interfaces.</li>\n    <li>A simplified immutable alternative to Java 8 Streams, wrapping checked exceptions and avoiding primitives.</li>\n    <li>A tiny, type-safe data definition language of brief helper functions: vec(), set(), map(), and tup(), (like Clojure’s vector [], set #{}, and map {}).</li>\n    <li>Extend Tuples to make your own immutable Java classes (with correct equals(), hashCode(), and toString() implementations) almost as easily as writing case classes in Scala.</li>\n</ul>\n</li>\n</ul><br><br><h1>ClojureScript</h1><br><br>Cljs: 23kB<br><br>(-&gt; (dom/getElement \"app\")\n(dom/setTextContent (join \", \" [\"Hello\" \"World!\"])))<br><br>jQuery: 29kB (+ 45kB Immutable.js)<br><br>$(\"#app\").text(\n[\"Hello\", \"World\"].join(\", \"));<br><br>Source: <a href=\"https://drive.google.com/file/d/0B8PcNdmU12GXVmdYeHNFU2hYc28/view\">SeatleJS - ClojureScript for Skeptics by @derekslager</a>",
  "excerpt": ""
 },
 {
  "title": "Frontend",
  "published": "2014-02-18 09:30:08",
  "postType": "page",
  "slug": "/wiki/development/frontend/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "<h2>Frontend development tools 2/2014</h2>\r\n(By Pål &amp; co.)\r\n<h3>Build &amp; live reload</h3>\r\nHave a dev server that live updates when files are saved and can also run tests, builds etc. - see an example here: <a href=\"https://github.com/iterate/iterateconf/blob/master/Gruntfile.js\" target=\"_blank\">https://github.com/iterate/iterateconf/blob/master/Gruntfile.js</a> (using grunt with watch).<br><br>Of course, make sure to use JSHint, testing etc.\r\n<h3>Editor</h3>\r\nAny, but f.ex. in <strong>LightTable</strong> it is possible to have code in one pane and live preview of the page in another next to it so the feedback loop is really short.<br><br>Tip: Use  <strong>Chrome Web Inspector's workspaces</strong> as development environment when doing lot of changes to HTML/CSS/LESS - \"inspect element\", change it, WI can store changes back to the original files, after proper configuration. See this <a href=\"https://remysharp.com/2013/07/18/my-workflow-v3-full-coding-stack/\">screencast of fully in-Chrome development</a> and <a href=\"https://www.html5rocks.com/en/tutorials/developertools/revolutions2013/#toc-workspaces\">description of worskpaces at HTML5 Rocks</a>. Basically: <a href=\"//flags\">chrome://flags</a> -  \"Enable Developer Tools experiments,\" web inspector settings - add a new workspace, right-click on a file in the Sources tab and  \"Map to Network Resource\".<br><br>Experimental: Adobe's new JavaScript-based editor <a href=\"https://brackets.io/\">Brackets</a> looks interesting, good integration with Chrome.\r\n<h3>Framework-specific</h3>\r\nAngularJS: <a href=\"https://github.com/angular/angularjs-batarang/\">Batarang</a> is a must-have Chrome plugin for inspecting scopes and variables.\r\n<h2>Resources</h2>\r\n<h3>Related</h3>\r\n<ul>\r\n\t<li>\r\n<p id=\"post-2903\"><a title=\"Permanent link to Tools for Editor – Browser Integration for Interactive JS/HTML Development\" href=\"/2013/03/25/tools-for-editor-browser-integration-for-interactive-jshtml-development/\" rel=\"bookmark\">Tools for Editor – Browser Integration for Interactive JS/HTML Development</a> (3/2013)</p>\r\n</li>\r\n</ul>",
  "excerpt": ""
 },
 {
  "title": "Practices",
  "published": "2014-02-28 13:05:51",
  "postType": "page",
  "slug": "/wiki/development/practicies/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "Development practices.\r\n<h2>Subpages:</h2>\r\n<ul>\r\n\t<li><a title=\"Continuous Delivery\" href=\"/wiki/development/practicies/continuous-delivery/\">Continuous Delivery</a></li>\r\n</ul>\r\n<h2>Not sub-paged yet:</h2>\r\n<h3>Performance Testing</h3>\r\n<ul>\r\n\t<li>Facebook Engineering: <a href=\"https://m.facebook.com/notes/facebook-engineering/the-mature-optimization-handbook/10151784131623920\">The Mature Optimization Handbook</a> (or go directly to the <a href=\"https://carlos.bueno.org/optimization/mature-optimization.pdf\">pdf</a>,   <a href=\"https://m.facebook.com/l.php?u=http%3A%2F%2Fcarlos.bueno.org%2Foptimization%2Fmature-optimization.epub&amp;h=hAQHRignh&amp;s=1\" target=\"_blank\">ePub</a>, <a href=\"https://m.facebook.com/l.php?u=http%3A%2F%2Fcarlos.bueno.org%2Foptimization%2Fmature-optimization.mobi&amp;h=GAQFDKjj1&amp;s=1\" target=\"_blank\">Mobi</a>. )If you get bored, jump directly to ch 5. Instrumentation.</li>\r\n</ul>",
  "excerpt": ""
 },
 {
  "title": "Continuous Delivery",
  "published": "2014-02-28 13:06:50",
  "postType": "page",
  "slug": "/wiki/development/practicies/continuous-delivery/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "<h2>Resources</h2>\r\n<ul>\r\n\t<li><a href=\"https://www.thoughtworks.com/insights/blog/case-continuous-delivery\">Jez Humble: The Case for Continuous Delivery</a> (2/2014) - read to persuade manager about CD: \"Still, many managers and executives remain unconvinced as to the benefits [of CD], and would like to know more about the economic drivers behind CD.\" CD reduces waste: \"[..]online controlled experiments (A/B tests) at Amazon. This approach created hundreds of millions of dollars of value[..],\" reduces risks: \"[..] Etsy, has a great <a href=\"https://www.usievents.com/en/conferences/8-paris-usi-2011/sessions/968-john-allspaw\">presentation</a> which describes how deploying more frequently improves the stability of web services.\" CD makes development cheaper by reducing the cost of non-value-adding activities such as integration and testing. F.ex. HP got dev. costs down by 40%, dev cost/program by 78%</li>\r\n</ul>\r\n<h2>Notes</h2>\r\n<h3>Why continuous delivery practices?</h3>\r\n<ul>\r\n\t<li>Everybody develops on the same branch to prevent integration/merge hell and unexpected issues when a merge \"succeeds\" but causes unexpected side effects (reviving previously removed configuration etc.) - use feature toggles, <a title=\"Parallel Design (Parallel Change)\" href=\"/wiki/development/parallel-design-parallel-change/\">parallel change</a>, etc. to make this possible</li>\r\n</ul>",
  "excerpt": ""
 },
 {
  "title": "Cloud",
  "published": "2014-02-28 14:34:55",
  "postType": "page",
  "slug": "/wiki/development/cloud/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "<ul>\r\n\t<li><a href=\"https://msdn.microsoft.com/en-us/library/dn568099.aspx\">Cloud Design Patterns: Prescriptive Architecture Guidance for Cloud Applications</a> (recommended by <a href=\"https://twitter.com/markusbk\">@markusbk</a>  so it must be good); Patterns: Cache-aside, Circuit Breaker, Compensating Transaction, Competing Consumers, Compute Resource Consolidation, Command and Query Responsibility Segregation (CQRS), Event Sourcing, External Configuration Store, Federated Identity, Gatekeeper, Health Endpoint Monitoring, Index Table, Leader Election, Materialized View, Pipes and Filters, Priority Queue, Queue-based Load Leveling, Retry, Runtime Reconfiguration, Scheduler Agent Supervisor, (data) Sharding, Static Content Hosting (-&gt; CDN), Throttling, Valet Key.\r\nGuidance topics: Asynchronous Messaging Primer, Autoscaling, Caching, Compute Partitioning, Data Consistency Primer, Data Partitioning, Data Replication and Synchronization, Instrumentation and Telemetry, Multiple Datacenter Deployment, Service Metering</li>\r\n</ul>",
  "excerpt": ""
 },
 {
  "title": "Code Conventions (Java)",
  "published": "2014-03-13 11:52:35",
  "postType": "page",
  "slug": "/wiki/development/code-conventions-java/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "<h2>Structure</h2>\r\n<h3>Guard clauses (a.k.a. guard statements, guard conditions)</h3>\r\n(<a href=\"https://www.refactoring.com/catalog/replaceNestedConditionalWithGuardClauses.html\">Introduced by M. Fowler in Refactoring</a>)<br><br>Instead of nested if-else, have (a number of) if (condition not satisfied) { return / throw }; at the start of the method to handle exceptional flows and then continue with the main flow. This improves readability. Example by Fowler:\r\n<blockquote>\r\n<pre>double getPayAmount() {\r\n  if (_isDead) return deadAmount();\r\n  if (_isSeparated) return separatedAmount();\r\n  if (_isRetired) return retiredAmount();\r\n  return normalPayAmount();\r\n};</pre>\r\n</blockquote>\r\n<h4>What about the single point of entry and exit guideline?</h4>\r\nThe question<a href=\"https://stackoverflow.com/questions/36707/should-a-function-have-only-one-return-statement\"> Should a function have only one return statement?</a> at StackOverflow has some really good answers and comments, let me steal and present some of them.<br><br>According to<a href=\"https://stackoverflow.com/a/733858/3309863\"> Chris S. at SO</a>,  <a href=\"https://www.cc2e.com/\">Code Complete</a> recommends:\r\n<blockquote><strong>17.1 return</strong><br><br><strong>Minimize the number of returns in each routine</strong>. It's harder to understand a routine if, reading it at the bottom, you're unaware of the possibility that it *return*ed somewhere above.<br><br><strong>Use a <em>return</em> when it enhances readability</strong>. In certain routines, once you know the answer, you want to return it to the calling routine immediately. If the routine is defined in such a way that it doesn't require any cleanup, not returning immediately means that you have to write more code.</blockquote>\r\nAlso Kent Beck in  <a href=\"https://rads.stackoverflow.com/amzn/click/0321413091\">Implementation Patterns</a> says that single entry/exit is a historical relic that is unnecessarily strict nowadays, according to <a href=\"https://stackoverflow.com/a/36732/3309863\">blank at SO</a>:\r\n<blockquote>\"was to prevent the confusion possible when jumping into and out of many locations in the same routine. It made good sense when applied to FORTRAN or assembly language programs written with lots of global data where even understanding which statements were executed was hard work ... with small methods and mostly local data, it is needlessly conservative.\"</blockquote>",
  "excerpt": ""
 },
 {
  "title": "Architecture",
  "published": "2014-04-23 06:55:57",
  "postType": "page",
  "slug": "/wiki/development/architecture/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "Architectural decisions are the decisions that are hard to change later on (contrary to design decisions). One goal of an architect is to minimize them, i.e. design the system so that they are not so important after all. We also try to make it possible to postpone making them as long as reasonable so that we have more knowledge when we eventually make them.<br><br><a href=\"https://vimeo.com/68331684\">Kevlin Henney: The Architecture of Uncertainty</a> - use uncertainty, lack of knowledge and <a href=\"https://commitment-thebook.com/\">options</a> to partition and structure the code in a system<br><br>It's crucial to understand the needs of the domain - f.ex. the complex, often changing rules of a pension system x transactional processing with focus on security and batch processing in a bank x high volume and importance of speed at a stock exchange.\r\n<h3>Tom Gilb</h3>\r\nThe goal of architecture is to satisfy requirements (enable delivering desired qualities, respect constraints, costs) -\r\n<blockquote>Architecture that never refers to necessary qualities, performance characteristics, costs, and constraints is not really architecture of any kind.</blockquote>\r\nReal arch.:\r\n<ul>\r\n\t<li>Has multidimensional clear design performance <strong>objectives</strong> [performance = all regarding how it functions, not just speed etc.]</li>\r\n\t<li>Has clear multiple <strong>constraints</strong></li>\r\n\t<li>Produces <strong>architecture ideas</strong> which enable and permit objectives to be met reasonably within constraints [and we can try which works best or combine multiple]</li>\r\n\t<li>Estimates expected effects</li>\r\n</ul>\r\n<h2>Resources</h2>\r\n<h3>Studying architecture</h3>\r\n<ul>\r\n\t<li><a title=\"The Architecture of Open Source Applications\" href=\"https://www.amazon.com/dp/B00557TMN4/ref=wl_it_dp_o_pC_nS_ttl?_encoding=UTF8&amp;colid=15C6Q8OEGS1X2&amp;coliid=I2NEOT2RQLTZB6\">The Architecture of Open Source Applications</a> and <a title=\"The Architecture of Open Source Applications, Volume II: Structure, Scale, and a Few More Fearless Hacks\" href=\"https://www.amazon.com/dp/B008940UYK/ref=wl_it_dp_o_pC_nS_ttl?_encoding=UTF8&amp;colid=15C6Q8OEGS1X2&amp;coliid=I3ADMW0YBTXFUP\">The Architecture of Open Source Applications, Volume II: Structure, Scale, and a Few More Fearless Hacks</a> - \" the authors of twenty-five open source applications explain how their software is structured, and why\"</li>\r\n</ul>\r\n<h3>Other</h3>\r\n<ul>\r\n\t<li><a href=\"https://www.infoq.com/presentations/architecture-disaster\">Architecture War Stories</a> by Stefan Tilkov on Oct 04, 2014 (talk, 45 min)</li>\r\n</ul>",
  "excerpt": ""
 },
 {
  "title": "Better Work",
  "published": "2014-05-20 08:45:20",
  "postType": "page",
  "slug": "/wiki/better-work/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "Resources about better, more effective, happier workplaces, companies, societies. Doing the right thing and doing things right in the context of organizations and the society in large.<br><br>Some keywords: values, rightshifting, non-violent communication, quality, human-centric, lean.<br><br><h2>Heroes</h2><br><br><h3>Dr. W. Edwards Deming</h3><br><br><a href=\"https://deming.org/theman/theories\">Edwards Deming</a> is the father of a \"new management\" (post-taylorian), of the Japanese post-war success, of lean thinking, of more human workplaces.<br><br>F.ex. this overview of <a href=\"https://www.skymark.com/resources/leaders/deming.asp\">The 14 For The Transformation Of Management and Theory of Profound Knowledge</a> .<br><br>See <a href=\"https://blog.deming.org/2013/09/online-resources-for-w-edwards-demings-management-ideas/\">Online Resources for W. Edwards Deming’s Management Ideas</a>.<br><br><h2>Alternative company organizations and cultures</h2><br><br><blockquote>Consequently, we should focus on keeping ourselves and our customers happy, not focus on making money. Good reputation and profit is simply a side effect of keeping ourselves and our customers happy.\n- <a href=\"https://blog.crisp.se/2010/05/08/henrikkniberg/1273272420000\">What is Crisp?</a>,  Crisp's Blog</blockquote><br><br><ul>\n    <li><a href=\"https://blog.crisp.se/2010/05/08/henrikkniberg/1273272420000\">What is Crisp?</a>,  Crisp's Blog 5/2010 - this cooperative/company has created two A3: “What is Crisp? - defines their purpose\" and \"Crisp strategy - defines how the company works and why\". Great idea, great content.</li>\n    <li><a href=\"https://blog.crisp.se/2014/03/27/peterantman/crisp-consensus-model-2-1\">Crisp consensus model 2.1</a> - Crisp, an IT consultancy, is owned by its members, has no CEO, and decides using consensus (how many people are involved depends on the size and effect of the decision - 1, team, a special group, all)</li>\n    <li><a href=\"https://www.self-managementinstitute.org/\">The Morning Star Co.</a> in California has used self-management for decades to become one of the leading tomato producers in the US</li>\n</ul><br><br><h2>Resources</h2><br><br><ul>\n    <li><a href=\"https://www.amazon.com/Turn-Ship-Around-Turning-Followers/dp/1591846404/\">Turn the Ship Around!: A True Story of Turning Followers into Leaders</a> (<a href=\"https://turntheshiparound.com/\">website</a>) - a wonderful story of turning the worst submarine in the navy into the best one by turning everybody into a leader - and thus tapping into all their resources, passion, initiative. Giving people purpose and control over their own work is crucial for effectiveness, especially in a chaotic enironment.\nSome advices: Focus on excellence, not avoiding mistakes. Empowering others is disempowering - allow them do the job. You perhaps can start to change culture by faking it at first (e.g. behaving as a proud sailor). Responsibility requires competence - on our job, we are learning every day.\nSome highlights: \"Lack of certainty is a strength. Certainty is arrogance.\" \"Efforts to monitor the process make the organization less efficient while efforts to improve it make it more efficient.\" \"The best way not to make a mistake is not to do anything or make any decisions.\"</li>\n    <li>Holocracy in a large company: <a href=\"https://uk.businessinsider.com/tony-hsieh-zappos-holacracy-management-experiment-2015-5\">Inside Zappos CEO Tony Hsieh's radical management experiment that prompted 14% of employees to quit</a> (5/2015)</li>\n</ul><br><br><h2>Books to check out</h2><br><br><ul>\n    <li><a href=\"https://www.amazon.com/gp/product/162779428X/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=162779428X&amp;linkCode=as2&amp;tag=thebusiinsi-20&amp;linkId=V325S7UDCPKZKOSW\" target=\"_blank\">Holacracy: The New Management System for a Rapidly Changing World</a></li>\n    <li>Frederic Laloux: <a href=\"https://www.amazon.com/gp/product/2960133501/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=2960133501&amp;linkCode=as2&amp;tag=thebusiinsi-20&amp;linkId=224A47RXPGLLRNGW\" target=\"_blank\">Reinventing Organizations</a> (Recommended to everybody at Zappos before deciding whether they wanted to remain in a self-managed system; about Laloux: \"..so many of the problems he addressed at companies were due to managers who stifled progress. [..] Laloux concluded that self-management was just one element of a new type of organization that represented the direction humanity was heading in — away from absolute leaders and toward empowered individuals.\")<br><br>Read more: <a href=\"https://uk.businessinsider.com/tony-hsieh-zappos-holacracy-management-experiment-2015-5#ixzz3bKOkTf8j\">http://uk.businessinsider.com/tony-hsieh-zappos-holacracy-management-experiment-2015-5#ixzz3bKOkTf8j</a></li>\n    <li>\n<p class=\"title\"><a class=\"title\" href=\"https://www.amazon.com/Delivering-Happiness-Profits-Passion-Purpose/dp/0446576220/ref=la_B002ZXH4AY_1_1?s=books&amp;ie=UTF8&amp;qid=1432717334&amp;sr=1-1\">Delivering Happiness: A Path to Profits, Passion, and Purpose</a> <span class=\"ptBrand\">by Tony Hsieh</span> <span class=\"bindingAndRelease\">(Mar 19, 2013) [Zappos CEO]</span></p>\n</li>\n</ul>",
  "excerpt": ""
 },
 {
  "title": "My Competency Matrix",
  "published": "2014-05-21 06:53:13",
  "postType": "page",
  "slug": "/wiki/my-competency-matrix/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "TBD\r\n<ul>\r\n\t<li>Software engineering (O(n), algorithms etc.)</li>\r\n\t<li>Technology\r\n<ul>\r\n\t<li>DB</li>\r\n\t<li>JVM\r\n<ul>\r\n\t<li>Java EE</li>\r\n\t<li>Clojure</li>\r\n</ul>\r\n</li>\r\n\t<li>Web\r\n<ul>\r\n\t<li>REST</li>\r\n</ul>\r\n</li>\r\n\t<li>Data &amp; BI</li>\r\n</ul>\r\n</li>\r\n\t<li>Methodology and practices\r\n<ul>\r\n\t<li>DevOps</li>\r\n\t<li>Lean</li>\r\n\t<li>XP\r\n<ul>\r\n\t<li>Testing / TDD</li>\r\n\t<li>pair-programming</li>\r\n\t<li>retrospectives</li>\r\n</ul>\r\n</li>\r\n\t<li>Lean startup &amp; MVP</li>\r\n\t<li>Performance (testing etc.)</li>\r\n</ul>\r\n</li>\r\n\t<li>Communication and human relationships</li>\r\n\t<li>Get things done\r\n<ul>\r\n\t<li>focus - learning</li>\r\n\t<li>prioritizing - learning</li>\r\n</ul>\r\n</li>\r\n</ul>\r\nSpecialities\r\n<ul>\r\n\t<li>Fond of learning, trying new stuff, finding solutions =&gt; broad skill set</li>\r\n\t<li>Documentation - especially making code understandable and navigable</li>\r\n\t<li>Full stack - incl. DevOps, tools setup, ...</li>\r\n\t<li>Skepticism regarding value of a product (a.k.a. \"show me the money\")</li>\r\n\t<li>Kaizen - constantly questioning processes, practices, products, requirements, ...</li>\r\n\t<li>Believes in people, communication, agility (small, iterative, feedback-driven steps)</li>\r\n\t<li>Fond of sharing, writing and teaching (f.ex. Puppet, Clojure)</li>\r\n</ul>\r\nHall of fame\r\n<ul>\r\n\t<li>Introduction of Ansible and thus partial automation of staging and production env setup and deployment</li>\r\n\t<li>Continuous deployment with per-user, user-driven roll back for a customer support app [<a href=\"/2013/09/05/blue-green-deployment-without-breaking-sessions-with-haproxy-and-jetty/\">ref</a>]</li>\r\n\t<li>...</li>\r\n</ul>",
  "excerpt": ""
 },
 {
  "title": "Learning Programming",
  "published": "2014-10-21 22:02:06",
  "postType": "page",
  "slug": "/wiki/development/learning-programming/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "<h2>Kids</h2>\r\n<ul>\r\n\t<li><a href=\"https://inventwithpython.com/\">Invent Your Own Computer Games with Python</a> (2014; kids around 10 yrs)</li>\r\n\t<li>Racket (and <a href=\"https://realmofracket.com/about.html\">Realm of Racket - Learn to program, one game at a time</a>?) [variant of Scheme] - built-in user-friendly IDE</li>\r\n</ul>\r\nSee also\r\n<ul>\r\n\t<li><a title=\"36 Resources To Help You Teach Kids Programming\" href=\"https://regulargeek.com/2011/07/20/36-resources-to-help-you-teach-kids-programming/\">36 Resources To Help You Teach Kids Programming</a> (2011) - incl. <a href=\"https://www.amazon.com/gp/product/1590594916/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;tag=regulargeek-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=1590594916\">Squeak: Learn Programming With Robots</a>, <a href=\"https://ruby4kids.com/ruby4kids\" target=\"_blank\">Ruby for kids</a>; resources etc. incl.<a href=\"https://www.teachkidstoprogram.com/\" target=\"_blank\">Teach Kids To Program</a>, Alice, ScratchLego Mindstorms,</li>\r\n</ul>",
  "excerpt": ""
 },
 {
  "title": "NoCV",
  "published": "2014-11-26 21:31:54",
  "postType": "page",
  "slug": "/about/nocv/",
  "status": "private",
  "tags": [],
  "categories": [],
  "content": "I'm a full-stack developer with affinity for DevOps and scars burnt by bad code, with <span style=\"color:#00ffff;\">9</span> years in the trenches of corporate and startup life. I believe in development as discovery, people, communication. My holy grail is lean thinking with its focus on value, elimination of waste, and being feedback-driven. I love to learn and share, as demonstrated by my blogs The Holy Java and Wonders of Code with 12k monthly views and co-organization of the Oslo Socially Functional Programmers meetup. My mission: delivering real &amp; proven value to users quickly and frequently. My vice: questioning all established processes, practices, and values. My dream: working for the greater good.<br><br>Experiences from entertainment industry, travel, e-commerce, e-learning, data analysis/business intelligence, integration.",
  "excerpt": ""
 },
 {
  "title": "♀ Heroes",
  "published": "2015-01-28 09:37:40",
  "postType": "page",
  "slug": "/%e2%99%80-heroes/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "<a href=\"https://medium.com/@3fingeredfox/margaret-hamilton-lead-software-engineer-project-apollo-158754170da8\"><img class=\"wp-image-4243 size-medium\" src=\"/images/2015/01/apollo-hamilton.gif?w=236\" alt=\"apollo-hamilton\" width=\"236\" height=\"300\" /></a> Margaret Hamilton, lead software engineer, Project Apollo - showing off her source code<br><br>This page is dedicated to all the great women that contributed significantly to the evolution of software engineering and IT.<br><br>(<em>Work in progress - tips for additions welcomed.</em>)<br><br><ul>\n    <li><strong>First programmer</strong> - <a href=\"https://en.wikipedia.org/wiki/Ada_Lovelace\">Ada Lovelace</a> (daughter of Lord Byron); wrote an algorithm to be executed by an early mechanical general-purpose comuting machine in 1840s (14 October is Ada Lovelace Day)</li>\n    <li><strong>First assembly</strong> language - <a href=\"https://en.wikipedia.org/wiki/Kathleen_Booth\">Kathleen Booth</a></li>\n    <li>The six <strong>programmers of the first electronic general-purpose computer</strong> <a href=\"https://en.wikipedia.org/wiki/ENIAC\">ENIAC</a> - Jean Bartik, Frances “Betty” Snyder Holberton, Kathleen McNulty Mauchly Antonelli, Marlyn Wescoff Meltzer, Ruth Lichterman Teitelbaum, Frances Bilas Spence</li>\n    <li>The <strong>first compiler</strong> and <strong>COBOL</strong>, one of the first high-level programming languages - <a href=\"https://en.wikipedia.org/wiki/Grace_Hopper\">Grace Hopper</a> (she was also a rear admiral and is credited with popularizing the term \"debugging.\")</li>\n    <li>The first female <strong>recipient of the A.M. Turing Award</strong> - Frances E. Allen, for her \"pioneering contributions to the theory and practice of optimizing compiler techniques that laid the foundation for modern optimizing compilers and automatic parallel execution.” She was also working on the first compiler that targeted multiple machines and source languages. <a href=\"https://caitiem.com/2015/02/04/tech-wcw-2-frances-e-allen/\">More info</a></li>\n</ul><br><br><h2>Related</h2><br><br><ul>\n    <li><a href=\"https://www.witi.com/center/witimuseum/halloffame/\">Women In IT Hall of Fame</a> - highlights the contributions of women to scientific and technological communities every year</li>\n    <li>The book <a href=\"https://www.amazon.com/dp/1612480861\">Pioneer Programmer: Jean Jennings Bartik and the Computer that Changed the World</a> - autobiography of the lead programmer of ENIAC</li>\n</ul>",
  "excerpt": ""
 },
 {
  "title": "Compiled \"Must Watch/Read\" Resources",
  "published": "2015-03-28 19:45:09",
  "postType": "page",
  "slug": "/wiki/development/compiled-must-watchread-resources/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "<div class=\"container\">\n<h3 class=\"entry-title public\">JavaScript</h3>\n<ul>\n    <li class=\"entry-title public\"><span class=\"author\"><a class=\"url fn\" href=\"https://github.com/bolshchikov\" rel=\"author\">bolshchikov</a></span><span class=\"path-divider\">/</span><a class=\"js-current-repository\" href=\"https://github.com/bolshchikov/js-must-watch\">js-must-watch</a>: Must-watch videos about javascript  (cca 5-20/year, since 2009)</li>\n    <li class=\"entry-title public\"><a class=\"url fn\" href=\"https://github.com/jkup\" rel=\"author\">jkup</a></span><span class=\"path-divider\">/</span><a class=\"js-current-repository\" href=\"https://github.com/jkup/functional-javascript\">functional-javascript</a>: A list of functional javascript resources - videos, posts, courses, libraries, books, people, ...</li>\n</ul>\n<p class=\"entry-title public\"></p><br><br></div>",
  "excerpt": ""
 },
 {
  "title": "Best Posts",
  "published": "2015-06-21 16:35:26",
  "postType": "page",
  "slug": "/best/",
  "status": "publish",
  "tags": [],
  "categories": [],
  "content": "<p id=\"post-3786\"><a href=\"/2014/03/17/frustration-driven-development-towards-devops-lean-clojure/\" rel=\"bookmark\">Frustration-Driven Development – Towards DevOps, Lean, Clojure</a> (3/2014) - one of the best things I have ever written.</p><br><br><p id=\"post-2468\"><a href=\"/2012/09/12/programming-like-kent-beck/\" rel=\"bookmark\">Programming Like Kent Beck</a> (9/2912) - a lot of inspiring lessons from Kent</p>",
  "excerpt": ""
 }
]